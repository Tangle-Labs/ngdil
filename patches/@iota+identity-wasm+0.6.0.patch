diff --git a/node_modules/@iota/identity-wasm/LICENSE b/node_modules/@iota/identity-wasm/LICENSE
deleted file mode 100644
index 4947287..0000000
--- a/node_modules/@iota/identity-wasm/LICENSE
+++ /dev/null
@@ -1,177 +0,0 @@
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/node_modules/@iota/identity-wasm/README.md b/node_modules/@iota/identity-wasm/README.md
deleted file mode 100644
index 74dab2d..0000000
--- a/node_modules/@iota/identity-wasm/README.md
+++ /dev/null
@@ -1,197 +0,0 @@
-# IOTA Identity WASM
-
-> This is the beta version of the official WASM bindings for [IOTA Identity](https://github.com/iotaledger/identity.rs).
-
-## [API Reference](https://wiki.iota.org/identity.rs/libraries/wasm/api_reference)
-
-## [Account Examples](https://github.com/iotaledger/identity.rs/blob/main/bindings/wasm/examples-account/README.md)
-## [Low-Level Examples](https://github.com/iotaledger/identity.rs/blob/main/bindings/wasm/examples/README.md)
-
-## Install the library:
-
-Latest Release: this version matches the main branch of this repository, is stable and will have changelogs.
-```bash
-npm install @iota/identity-wasm
-```
-
-Development Release: this version matches the dev branch of this repository, may see frequent breaking changes and has the latest code changes.
-```bash
-npm install @iota/identity-wasm@dev
-```
-
-## Build
-
-Alternatively, you can build the bindings if you have Rust installed. If not, refer to [rustup.rs](https://rustup.rs) for the installation. 
-
-Install [`wasm-bindgen-cli`](https://github.com/rustwasm/wasm-bindgen). A manual installation is required because we use the [Weak References](https://rustwasm.github.io/wasm-bindgen/reference/weak-references.html) feature, which [`wasm-pack` does not expose](https://github.com/rustwasm/wasm-pack/issues/930).
-
-```bash
-cargo install --force wasm-bindgen-cli
-```
-
-Then, install the necessary dependencies using:
-```bash
-npm install
-```
-
-and build the bindings for `node.js` with
-
-```bash
-npm run build:nodejs
-```
-
-or for the `web` with
-
-```bash
-npm run build:web
-```
-
-## Minimum Requirements
-
-The minimum supported version for node is: `v16.0.0`
-
-## NodeJS Usage
-<!-- 
-Test this example using https://github.com/anko/txm: `txm README.md`
-
-Replace imports with local paths for txm:
-!test program
-cat \
-| sed -e "s#require('@iota/identity-wasm/node')#require('./node/identity_wasm.js')#" \
-| node
--->
-<!-- !test check Nodejs Example -->
-```javascript
-const identity = require('@iota/identity-wasm/node')
-
-async function main() {
-
-    // The creation step generates a keypair, builds an identity
-    // and publishes it to the IOTA mainnet.
-    const builder = new identity.AccountBuilder();
-    const account = await builder.createIdentity();
-
-    // Retrieve the DID of the newly created identity.
-    const did = account.did();
-
-    // Print the DID of the created Identity.
-    console.log(did.toString())
-
-    // Print the local state of the DID Document
-    console.log(account.document());
-
-    // Print the Explorer URL for the DID.
-    console.log(`Explorer Url:`, identity.ExplorerUrl.mainnet().resolverUrl(did));
-}
-
-main()
-```
-
-## Web Setup
-
-The library loads the WASM file with an HTTP GET request, so the .wasm file must be copied to the root of the dist folder.
-
-### Rollup
-
-- Install `rollup-plugin-copy`:
-
-```bash
-$ npm install rollup-plugin-copy --save-dev
-```
-
-- Add the copy plugin usage to the `plugins` array under `rollup.config.js`:
-
-```js
-// Include the copy plugin
-import copy from 'rollup-plugin-copy'
-
-// Add the copy plugin to the `plugins` array of your rollup config:
-copy({
-  targets: [{
-    src: 'node_modules/@iota/identity-wasm/web/identity_wasm_bg.wasm',
-    dest: 'public',
-    rename: 'identity_wasm_bg.wasm'
-  }]
-})
-```
-
-### Webpack
-
-- Install `copy-webpack-plugin`:
-
-```bash
-$ npm install copy-webpack-plugin --save-dev
-```
-
-```js
-// Include the copy plugin
-const CopyWebPlugin= require('copy-webpack-plugin');
-
-// Add the copy plugin to the `plugins` array of your webpack config:
-
-new CopyWebPlugin({
-  patterns: [
-    {
-      from: 'node_modules/@iota/identity-wasm/web/identity_wasm_bg.wasm',
-      to: 'identity_wasm_bg.wasm'
-    }
-  ]
-}),
-```
-
-### Web Usage
-
-```js
-import * as identity from "@iota/identity-wasm/web";
-
-identity.init().then(() => {
-
-  // The creation step generates a keypair, builds an identity
-  // and publishes it to the IOTA mainnet.
-  let builder = new identity.AccountBuilder();
-  let account = await builder.createIdentity();
-
-  // Retrieve the DID of the newly created identity.
-  const did = account.did();
-
-  // Print the DID of the created Identity.
-  console.log(did.toString())
-
-  // Print the local state of the DID Document
-  console.log(account.document());
-
-});
-
-// or
-
-(async () => {
-  
-  await identity.init()
-    
-  // The creation step generates a keypair, builds an identity
-  // and publishes it to the IOTA mainnet.
-  let builder = new identity.AccountBuilder();
-  let account = await builder.createIdentity();
-
-  // Retrieve the DID of the newly created identity.
-  const did = account.did();
-
-  // Print the DID of the created Identity.
-  console.log(did.toString())
-
-  // Print the local state of the DID Document
-  console.log(account.document());
-  
-})()
-
-// Default path is "identity_wasm_bg.wasm", but you can override it like this
-await identity.init("./static/identity_wasm_bg.wasm");
-```
-
-`identity.init().then(<callback>)` or `await identity.init()` is required to load the wasm file (from the server if not available, because of that it will only be slow for the first time)
-
-## Examples in the Wild
-
-You may find it useful to see how the WASM bindings are being used in existing applications:
-
-- [Zebra IOTA Edge SDK](https://github.com/ZebraDevs/Zebra-Iota-Edge-SDK) (mobile apps using Capacitor.js + Svelte)
diff --git a/node_modules/@iota/identity-wasm/node/identity_wasm.d.ts b/node_modules/@iota/identity-wasm/identity_wasm.d.ts
similarity index 100%
rename from node_modules/@iota/identity-wasm/node/identity_wasm.d.ts
rename to node_modules/@iota/identity-wasm/identity_wasm.d.ts
diff --git a/node_modules/@iota/identity-wasm/node/identity_wasm.js b/node_modules/@iota/identity-wasm/identity_wasm.js
similarity index 100%
rename from node_modules/@iota/identity-wasm/node/identity_wasm.js
rename to node_modules/@iota/identity-wasm/identity_wasm.js
diff --git a/node_modules/@iota/identity-wasm/node/identity_wasm_bg.wasm b/node_modules/@iota/identity-wasm/identity_wasm_bg.wasm
similarity index 100%
rename from node_modules/@iota/identity-wasm/node/identity_wasm_bg.wasm
rename to node_modules/@iota/identity-wasm/identity_wasm_bg.wasm
diff --git a/node_modules/@iota/identity-wasm/node/identity_wasm_bg.wasm.d.ts b/node_modules/@iota/identity-wasm/identity_wasm_bg.wasm.d.ts
similarity index 100%
rename from node_modules/@iota/identity-wasm/node/identity_wasm_bg.wasm.d.ts
rename to node_modules/@iota/identity-wasm/identity_wasm_bg.wasm.d.ts
diff --git a/node_modules/@iota/identity-wasm/node/package.json b/node_modules/@iota/identity-wasm/node/package.json
deleted file mode 100644
index 0b50525..0000000
--- a/node_modules/@iota/identity-wasm/node/package.json
+++ /dev/null
@@ -1,13 +0,0 @@
-{
-  "name": "@iota/identity-wasm",
-  "description": "WASM bindings for IOTA Identity - A Self Sovereign Identity Framework implementing the DID and VC standards from W3C. To be used in Javascript/Typescript",
-  "version": "0.6.0",
-  "license": "Apache-2.0",
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/iotaledger/identity.rs.git"
-  },
-  "main": "identity_wasm.js",
-  "homepage": "https://www.iota.org",
-  "types": "identity_wasm.d.ts"
-}
\ No newline at end of file
diff --git a/node_modules/@iota/identity-wasm/web/identity_wasm.d.ts b/node_modules/@iota/identity-wasm/web/identity_wasm.d.ts
deleted file mode 100644
index bd2b524..0000000
--- a/node_modules/@iota/identity-wasm/web/identity_wasm.d.ts
+++ /dev/null
@@ -1,4100 +0,0 @@
-/* tslint:disable */
-/* eslint-disable */
-/**
-* Initializes the console error panic hook for better error messages
-*/
-export function start(): void;
-/**
-*/
-export enum DIDMessageEncoding {
-  Json,
-  JsonBrotli,
-}
-/**
-* Controls validation behaviour when checking whether or not a credential has been revoked by its
-* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status).
-*/
-export enum StatusCheck {
-/**
-* Validate the status if supported, reject any unsupported
-* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.
-*
-* Only `RevocationBitmap2022` is currently supported.
-*
-* This is the default.
-*/
-  Strict,
-/**
-* Validate the status if supported, skip any unsupported
-* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.
-*/
-  SkipUnsupported,
-/**
-* Skip all status checks.
-*/
-  SkipAll,
-}
-/**
-* Declares how credential subjects must relate to the presentation holder during validation.
-* See `PresentationValidationOptions::subject_holder_relationship`.
-*
-* See also the [Subject-Holder Relationship](https://www.w3.org/TR/vc-data-model/#subject-holder-relationships) section of the specification.
-*/
-export enum SubjectHolderRelationship {
-/**
-* The holder must always match the subject on all credentials, regardless of their [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property.
-* This variant is the default used if no other variant is specified when constructing a new
-* `PresentationValidationOptions`.
-*/
-  AlwaysSubject,
-/**
-* The holder must match the subject only for credentials where the [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property is `true`.
-*/
-  SubjectOnNonTransferable,
-/**
-* The holder is not required to have any kind of relationship to any credential subject.
-*/
-  Any,
-}
-/**
-* Declares when validation should return if an error occurs.
-*/
-export enum FailFast {
-/**
-* Return all errors that occur during validation.
-*/
-  AllErrors,
-/**
-* Return after the first error occurs.
-*/
-  FirstError,
-}
-/**
-*/
-export enum KeyType {
-  Ed25519,
-  X25519,
-}
-/**
-*/
-export enum MethodRelationship {
-  Authentication,
-  AssertionMethod,
-  KeyAgreement,
-  CapabilityDelegation,
-  CapabilityInvocation,
-}
-
-/**
- * Options for attaching one or more verification relationships to a method on an identity.
- */
-export type AttachMethodRelationshipOptions = {
-    /**
-     * The identifier of the method in the document.
-     */
-    fragment: string,
-
-    /**
-     * The relationships to add;
-     */
-    relationships: MethodRelationship | MethodRelationship[]
-};
-
-
-
-/**
- * Options for creating a new method on an identity.
- */
-export type CreateMethodOptions = {
-    /**
-     * The identifier of the method in the document.
-     */
-    fragment: string,
-
-    /**
-     * The scope of the method, defaults to VerificationMethod.
-     */
-    scope?: MethodScope,
-
-    /**
-     * Method content for the new method.
-     */
-    content: MethodContent
-  };
-
-
-
-/**
- * Options for detaching one or more verification relationships from a method on an identity.
- */
-export type DetachMethodRelationshipOptions = {
-    /**
-     * The identifier of the method in the document.
-     */
-    fragment: string,
-
-    /**
-     * The relationships to remove.
-     */
-    relationships: MethodRelationship | MethodRelationship[]
-};
-
-
-
-/** Holds options to create a new `VerifierOptions`. */
-interface IVerifierOptions {
-    /** Verify the signing verification method relationship matches this.
-    *
-    * NOTE: `purpose` overrides the `method_scope` option.
-    */
-    readonly methodScope?: MethodScope;
-
-    /** Verify the signing verification method type matches one specified.
-    *
-    * E.g. `[MethodType.Ed25519VerificationKey2018(), MethodType.X25519KeyAgreementKey2019()]`
-    */
-    readonly methodType?: Array<MethodType>;
-
-    /** Verify the `Proof.challenge` field matches this. */
-    readonly challenge?: string;
-
-    /** Verify the `Proof.domain` field matches this. */
-    readonly domain?: string;
-
-    /** Verify the `Proof.purpose` field matches this. Also verifies that the signing
-    * method has the corresponding verification method relationship.
-    *
-    * NOTE: `purpose` overrides the `method_scope` option.
-    */
-    readonly purpose?: ProofPurpose;
-
-    /** Determines whether to error if the current time exceeds the `Proof.expires` field.
-    *
-    * Default: false (reject expired signatures).
-    */
-    readonly allowExpired?: boolean;
-}
-
-/** Fields for constructing a new {@link Presentation}. */
-interface IPresentation {
-  /** The JSON-LD context(s) applicable to the `Presentation`. */
-  readonly context?: string | Record<string, any> | Array<string | Record<string, any>>;
-  /** A unique URI that may be used to identify the `Presentation`. */
-  readonly id?: string;
-  /** One or more URIs defining the type of the `Presentation`. Contains the base context by default. */
-  readonly type?: string | Array<string>;
-  /** Credential(s) expressing the claims of the `Presentation`. */
-  readonly verifiableCredential: Credential | Array<Credential>;
-  /** The entity that generated the `Presentation`. */
-  readonly holder?: string | DID;
-  /** Service(s) used to refresh an expired {@link Credential} in the `Presentation`. */
-  readonly refreshService?: RefreshService | Array<RefreshService>;
-  /** Terms-of-use specified by the `Presentation` holder. */
-  readonly termsOfUse?: Policy | Array<Policy>;
-  /** Miscellaneous properties. */
-  readonly [properties: string]: unknown;
-}
-
-
-/**
- * Options to customize how identities are published to the Tangle.
-**/
-export type PublishOptions = {
-    /**
-     * Whether to force the publication to be an integration update.
-     * If this option is not set, the account automatically determines whether
-     * an update needs to be published as an integration or a diff update.
-     * Publishing as an integration update is always valid, but not recommended
-     * for identities with many updates.
-     *
-     * See the IOTA DID method specification for more details.
-     *
-     * @deprecated since 0.5.0, diff chain features are slated for removal.
-     */
-     forceIntegrationUpdate?: boolean,
-
-
-    /**
-     * Set the fragment of a verification method with which to sign the update.
-     * This must point to an Ed25519 method with a capability invocation
-     * verification relationship.
-     *
-     *  If omitted, the default signing method on the Document will be used.
-     */
-     signWith?: string
- }
-
-
-
-/**
- * Configuration used to create a new Identity.
- */
-export type IdentitySetup = {
-    /**
-     * Use a pre-generated Ed25519 private key for the DID.
-     */
-    privateKey?: Uint8Array,
-};
-
-
-
-/**
- * Options for creating a new {@link AccountBuilder}.
- */
-export type AccountBuilderOptions = {
-
-    /**
-     * When the account will store its state to the storage.
-     */
-    autosave?: AutoSave
-
-    /**
-     * `autopublish == true` the account will publish messages to the tangle on each update.
-     * `autopublish == false` the account will combine and publish message when .publish() is called.
-     */
-    autopublish?: boolean,
-
-    /**
-     * Client for tangle requests.
-     */
-    clientConfig?: IClientConfig,
-
-    /**
-     * The Storage implemantation to use for each account built by this builder.
-     */
-    storage?: Storage
-};
-
-
-/** IOTA node details with optional authentication. */
-interface INodeAuth {
-  readonly url: string;
-  readonly jwt?: string;
-  readonly username?: string;
-  readonly password?: string;
-}
-
-/** {@link Client} configuration options. */
-interface IClientConfig {
-  /** Sets the IOTA Tangle network. */
-  readonly network?: Network;
-  /** Sets the DID message encoding used when publishing to the Tangle. */
-  readonly encoding?: DIDMessageEncoding;
-  /** Adds a list of IOTA nodes to use by their URLs. */
-  readonly nodes?: Array<string>;
-  /** Sets an IOTA node by its URL to be used as primary node. */
-  readonly primaryNode?: INodeAuth;
-  /** Adds an IOTA node by its URL to be used as primary PoW node (for remote PoW). */
-  readonly primaryPowNode?: INodeAuth;
-  /** Adds a list of IOTA permanodes by their URLs. */
-  readonly permanodes?: Array<INodeAuth>;
-  /** Adds a list of IOTA nodes to be used by their URLs. */
-  readonly nodeAuth?: Array<INodeAuth>;
-  /** Sets the node sync interval in seconds. */
-  readonly nodeSyncInterval?: number;
-  /** Disables the node sync process. */
-  readonly nodeSyncDisabled?: boolean;
-  /** Enables/disables quorum. */
-  readonly quorum?: boolean;
-  /** Sets the number of nodes used for quorum. */
-  readonly quorumSize?: number;
-  /** Sets the quorum threshold. */
-  readonly quorumThreshold?: number;
-  /** Sets whether proof-of-work (PoW) is performed locally or remotely. Default: false. */
-  readonly localPow?: boolean;
-  /** Sets whether the PoW should be done locally in case a node doesn't support remote PoW. Default: true. */
-  readonly fallbackToLocalPow?: boolean;
-  /** Sets the number of seconds that new tips will be requested during PoW. */
-  readonly tipsInterval?: number;
-  /** Sets the default request timeout. */
-  readonly requestTimeout?: number;
-  /** When publishing to the Tangle, sets whether to retry until the message is confirmed by a milestone. Default: true. */
-  readonly retryUntilIncluded?: boolean;
-}
-
-
-/**
- * Options for setting the `alsoKnownAs` property.
- */
- export type SetAlsoKnownAsOptions = {
-
-    /**
-     * List of URLs for the `alsoKnownAs` property. Duplicates are ignored.
-     */
-    urls: string | string[] | null,
-};
-
-
-
-/**
- * Options for deleting a method on an identity.
- */
-export type DeleteMethodOptions = {
-    /**
-     * The identifier of the method in the document.
-     */
-    fragment: string,
-};
-
-
-
-/**
- * Options for deleting a service on an identity.
- */
-export type DeleteServiceOptions = {
-    /**
-     * The identifier of the service in the document.
-     */
-    fragment: string,
-};
-
-
-
-/**
- * Options for setting DID controllers.
- */
- export type SetControllerOptions = {
-
-    /**
-     * List of DIDs to be set as controllers, use `null` to remove all controllers.
-     */
-    controllers: DID | DID[] | null,
-};
-
-
-
-/** Holds options to create a new `ProofOptions`. */
-interface IProofOptions {
-    /** When the proof was generated. */
-    readonly created?: Timestamp;
-
-    /** When the proof expires. */
-    readonly expires?: Timestamp;
-
-    /** Challenge from a proof requester to mitigate replay attacks. */
-    readonly challenge?: string;
-
-    /** Domain for which a proof is valid to mitigate replay attacks. */
-    readonly domain?: string;
-
-    /** Purpose for which the proof was generated. */
-    readonly purpose?: ProofPurpose;
-}
-
-/** Fields for constructing a new {@link Credential}. */
-interface ICredential {
-  /** The JSON-LD context(s) applicable to the `Credential`. */
-  readonly context?: string | Record<string, any> | Array<string | Record<string, any>>;
-  /** A unique URI that may be used to identify the `Credential`. */
-  readonly id?: string;
-  /** One or more URIs defining the type of the `Credential`. Contains the base context by default. */
-  readonly type?: string | Array<string>;
-  /** One or more objects representing the `Credential` subject(s). */
-  readonly credentialSubject: Subject | Array<Subject>;
-  /** A reference to the issuer of the `Credential`. */
-  readonly issuer: string | DID | Issuer;
-  /** A timestamp of when the `Credential` becomes valid. Defaults to the current datetime. */
-  readonly issuanceDate?: Timestamp;
-  /** A timestamp of when the `Credential` should no longer be considered valid. */
-  readonly expirationDate?: Timestamp;
-  /** Information used to determine the current status of the `Credential`. */
-  readonly credentialStatus?: Status;
-  /** Information used to assist in the enforcement of a specific `Credential` structure. */
-  readonly credentialSchema?: Schema | Array<Schema>;
-  /** Service(s) used to refresh an expired `Credential`. */
-  readonly refreshService?: RefreshService | Array<RefreshService>;
-  /** Terms-of-use specified by the `Credential` issuer. */
-  readonly termsOfUse?: Policy | Array<Policy>;
-  /** Human-readable evidence used to support the claims within the `Credential`. */
-  readonly evidence?: Evidence | Array<Evidence>;
-  /** Indicates that the `Credential` must only be contained within a {@link Presentation} with a proof issued from the `Credential` subject. */
-  readonly nonTransferable?: boolean;
-  /** Miscellaneous properties. */
-  readonly [properties: string]: unknown;
-}
-
-
-/** Holds options to create a new `CredentialValidationOptions`. */
-interface ICredentialValidationOptions {
-    /** Declare that the credential is **not** considered valid if it expires before this `Timestamp`.
-     * Uses the current datetime during validation if not set. */
-    readonly earliestExpiryDate?: Timestamp;
-
-    /** Declare that the credential is **not** considered valid if it was issued later than this `Timestamp`.
-     * Uses the current datetime during validation if not set. */
-    readonly latestIssuanceDate?: Timestamp;
-
-    /** Validation behaviour for `credentialStatus`.
-     *
-     * Default: `StatusCheck.Strict`. */
-    readonly status?: StatusCheck;
-
-    /** Options which affect the verification of the signature on the credential. */
-    readonly verifierOptions?: VerifierOptions;
-
-}
-
-
-/** Holds options to create a new `PresentationValidationOptions`. */
-interface IPresentationValidationOptions {
-    /** Declare that the credentials of the presentation must all be validated according to these `CredentialValidationOptions`. */
-    readonly sharedValidationOptions?: CredentialValidationOptions;
-
-    /** Options which affect the verification of the signature on the presentation. */
-    readonly presentationVerifierOptions?: VerifierOptions;
-
-    /** Declare how the presentation's credential subjects must relate to the holder.
-     *
-     * Default: SubjectHolderRelationship.AlwaysSubject
-     */
-    readonly subjectHolderRelationship?: SubjectHolderRelationship;
-
-}
-
-
-/**
- * Holds options to create a new `Service`.
- */
-interface IService {
-    /**
-     * Identifier of the service.
-     *
-     * Must be a valid DIDUrl with a fragment.
-     */
-    readonly id: DIDUrl | string;
-
-    /**
-     * Type of service.
-     *
-     * E.g. "LinkedDomains" or "DIDCommMessaging".
-     */
-    readonly type: string;
-
-    /**
-     * A URL, set of URLs, or map of URL sets.
-     *
-     * NOTE: throws an error if any entry is not a valid URL string. List entries must be unique.
-     */
-    readonly serviceEndpoint: string | string[] | Map<string, string[]> | Record<string, string[]>;
-
-    /**
-     * Additional custom properties to embed in the service.
-     *
-     * WARNING: entries may overwrite existing fields and result in invalid documents.
-     */
-    readonly properties?: Map<string, any> | Record<string, any>;
-}
-
-
-/**
- * Options for creating a new service on an identity.
- */
-export type CreateServiceOptions = {
-  /**
-   * The identifier of the service in the document.
-   */
-  fragment: string;
-
-  /**
-   * The type of the service.
-   */
-  type: string;
-
-  /**
-   * The `ServiceEndpoint` of the service.
-   */
-  endpoint: string | string[] | Map<string, string[]> | Record<string, string[]>;
-
-  /**
-   * Additional properties of the service.
-   */
-  properties?: Map<string, any> | Record<string, any>;
-};
-
-
-
-/** An interface for Account storage implementations.
-
-The `Storage` interface is used for secure key operations, such as key generation and signing,
-as well as key-value like storage of data structures, such as DID documents.
-
-# Identifiers
-
-Implementations of this interface are expected to uniquely identify keys through the
-combination of DID _and_ `KeyLocation`.
-
-An implementation recommendation is to use the DID as a partition key. Everything related to a DID
-can be stored in a partition identified by that DID. Keys belonging to a DID can then be identified
-by `KeyLocation`s in that partition.
-
-# DID List
-
-The storage is expected to maintain a list of stored DIDs. DIDs created with `did_create` should be
-inserted into the list, and removed when calling `did_purge`.
-Other operations on the list are `did_exists` and `did_list`.
-
-# Implementation example
-
-See the `MemStore` example for a test implementation. */
-interface Storage {
-  /** Creates a new identity for the given `network`.
-
-   - Uses the given Ed25519 `private_key` or generates a new key if it's `None`.
-   - Returns an error if the DID already exists.
-   - Adds the newly created DID to a list which can be accessed via `did_list`.
-
-   Returns the generated DID and the location at which the key was stored. */
-  didCreate: (network: string, fragment: string, privateKey?: Uint8Array) => Promise<[DID, KeyLocation]>;
-
-  /** Removes the keys and any other state for the given `did`.
-
-   This operation is idempotent: it does not fail if the given `did` does not (or no longer) exist.
-
-   Returns `true` if the did and its associated data was removed, `false` if nothing was done. */
-  didPurge: (did: DID) => Promise<boolean>;
-
-  /** Returns `true` if `did` exists in the list of stored DIDs. */
-  didExists: (did: DID) => Promise<boolean>;
-
-  /** Returns the list of stored DIDs. */
-  didList: () => Promise<Array<DID>>;
-
-  /** Generates a new key for the given `did` with the given `key_type` and `fragment` identifier
-   and returns the location of the newly generated key. */
-  keyGenerate: (did: DID, keyType: KeyType, fragment: string) => Promise<KeyLocation>;
-
-  /** Inserts a private key at the specified `location`.
-
-   If a key at `location` exists, it is overwritten. */
-  keyInsert: (did: DID, keyLocation: KeyLocation, privateKey: Uint8Array) => Promise<void>;
-
-  /** Retrieves the public key from `location`. */
-  keyPublic: (did: DID, keyLocation: KeyLocation) => Promise<Uint8Array>;
-
-  /** Deletes the key at `location`.
-
-   This operation is idempotent: it does not fail if the key does not exist.
-
-   Returns `true` if it removed the key, `false` if nothing was done. */
-  keyDelete: (did: DID, keyLocation: KeyLocation) => Promise<boolean>;
-
-  /** Signs `data` with the private key at the specified `location`. */
-  keySign: (did: DID, keyLocation: KeyLocation, data: Uint8Array) => Promise<Signature>;
-
-  /** Returns `true` if a key exists at the specified `location`. */
-  keyExists: (did: DID, keyLocation: KeyLocation) => Promise<boolean>;
-
-  /** Encrypts the given `plaintext` with the specified `encryptionAlgorithm` and `cekAlgorithm`.
-   *
-   *  Returns an `EncryptedData` instance.
-   */
-  dataEncrypt: (did: DID, plaintext: Uint8Array, associatedData: Uint8Array, encryptionAlgorithm: EncryptionAlgorithm, cekAlgorithm: CekAlgorithm, publicKey: Uint8Array) => Promise<EncryptedData>;
-
-  /** Decrypts the given `data` with the specified `encryptionAlgorithm` and `cekAlgorithm`.
-   *
-   *  Returns the decrypted text.
-   */
-  dataDecrypt: (did: DID, data: EncryptedData, encryptionAlgorithm: EncryptionAlgorithm, cekAlgorithm: CekAlgorithm, privateKey: KeyLocation) => Promise<Uint8Array>;
-
-  /** Returns the chain state of the identity specified by `did`. */
-  chainStateGet: (did: DID) => Promise<ChainState | undefined>;
-
-  /** Set the chain state of the identity specified by `did`. */
-  chainStateSet: (did: DID, chainState: ChainState) => Promise<void>;
-
-  /** Returns the document of the identity specified by `did`. */
-  documentGet: (did: DID) => Promise<Document | undefined>;
-
-  /** Sets a new state for the identity specified by `did`. */
-  documentSet: (did: DID, document: Document) => Promise<void>;
-
-  /** Persists any unsaved changes. */
-  flushChanges: () => Promise<void>;
-}
-
-
-/** Information used to increase confidence in the claims of a {@link Credential}.
-
-[More Info](https://www.w3.org/TR/vc-data-model/#evidence) */
-interface Evidence {
-  /** A URL that allows retrieval of information about the evidence. */
-  readonly id?: string;
-  /** The type(s) of the credential evidence. */
-  readonly types: string | Array<string>;
-  /** Additional properties of the credential evidence. */
-  readonly [properties: string]: unknown;
-}
-
-
-/** An identifier representing the issuer of a {@link Credential}.
-
-[More Info](https://www.w3.org/TR/vc-data-model/#issuer) */
-interface Issuer {
-  /** A URL identifying the credential issuer. */
-  readonly id: string;
-  /** Additional properties of the credential issuer. */
-  readonly [properties: string]: unknown;
-}
-
-
-/** Information used to express obligations, prohibitions, and permissions about a {@link Credential} or {@link Presentation}.
-
-[More Info](https://www.w3.org/TR/vc-data-model/#terms-of-use) */
-interface Policy {
-  /** A URL identifying the credential terms-of-use. */
-  readonly id?: string;
-  /** The type(s) of the credential terms-of-use. */
-  readonly types: string | Array<string>;
-  /** Additional properties of the credential terms-of-use. */
-  readonly [properties: string]: unknown;
-}
-
-
-/** Information used to refresh or assert the status of a {@link Credential}.
-
-[More Info](https://www.w3.org/TR/vc-data-model/#refreshing) */
-interface RefreshService {
-  /** The URL of the credential refresh service. */
-  readonly id: string;
-  /** The type(s) of the credential refresh service. */
-  readonly types: string | Array<string>;
-  /** Additional properties of the credential refresh service. */
-  readonly [properties: string]: unknown;
-}
-
-
-/** Information used to validate the structure of a {@link Credential}.
-
-[More Info](https://www.w3.org/TR/vc-data-model/#data-schemas) */
-interface Schema {
-  /** A URL identifying the credential schema file. */
-  readonly id: string;
-  /** The type(s) of the credential schema. */
-  readonly types: string | Array<string>;
-  /** Additional properties of the credential schema. */
-  readonly [properties: string]: unknown;
-}
-
-
-/** Information used to determine the current status of a {@link Credential}.
-
-[More Info](https://www.w3.org/TR/vc-data-model/#status) */
-interface Status {
-  /** A URL identifying the credential status. */
-  readonly id: string;
-  /** The type of the credential status. */
-  readonly type: string;
-  /** Additional properties of the credential status. */
-  readonly [properties: string]: unknown;
-}
-
-
-/** An entity who is the target of a set of claims in a {@link Credential}.
-
-[More Info](https://www.w3.org/TR/vc-data-model/#credential-subject) */
-interface Subject {
-  /** A URI identifying the credential subject. */
-  readonly id?: string | DID;
-  /** Additional properties of the credential subject. */
-  readonly [properties: string]: unknown;
-}
-
-/**
-* An account manages one identity.
-*
-* It handles private keys, writing to storage and
-* publishing to the Tangle.
-*/
-export class Account {
-  free(): void;
-/**
-* Attach one or more verification relationships to a method.
-*
-* Note: the method must exist and be in the set of verification methods;
-* it cannot be an embedded method.
-* @param {AttachMethodRelationshipOptions} options
-* @returns {Promise<void>}
-*/
-  attachMethodRelationships(options: AttachMethodRelationshipOptions): Promise<void>;
-/**
-* Adds a new verification method to the DID document.
-* @param {CreateMethodOptions} options
-* @returns {Promise<void>}
-*/
-  createMethod(options: CreateMethodOptions): Promise<void>;
-/**
-* Detaches the given relationship from the given method, if the method exists.
-* @param {DetachMethodRelationshipOptions} options
-* @returns {Promise<void>}
-*/
-  detachMethodRelationships(options: DetachMethodRelationshipOptions): Promise<void>;
-/**
-* Returns the {@link DID} of the managed identity.
-* @returns {DID}
-*/
-  did(): DID;
-/**
-* Returns whether auto-publish is enabled.
-* @returns {boolean}
-*/
-  autopublish(): boolean;
-/**
-* Returns the auto-save configuration value.
-* @returns {AutoSave}
-*/
-  autosave(): AutoSave;
-/**
-* Returns a copy of the document managed by the `Account`.
-*
-* Note: the returned document only has a valid signature after publishing an integration chain update.
-* In general, for use cases where the signature is required, it is advisable to resolve the
-* document from the Tangle.
-* @returns {Document}
-*/
-  document(): Document;
-/**
-* Resolves the DID Document associated with this `Account` from the Tangle.
-* @returns {Promise<ResolvedDocument>}
-*/
-  resolveIdentity(): Promise<ResolvedDocument>;
-/**
-* Removes the identity from the local storage entirely.
-*
-* Note: This will remove all associated document updates and key material - recovery is NOT POSSIBLE!
-* @returns {Promise<void>}
-*/
-  deleteIdentity(): Promise<void>;
-/**
-* Push all unpublished changes to the tangle in a single message.
-* @param {PublishOptions | undefined} publish_options
-* @returns {Promise<void>}
-*/
-  publish(publish_options?: PublishOptions): Promise<void>;
-/**
-* Signs a {@link Credential} with the key specified by `fragment`.
-* @param {string} fragment
-* @param {Credential} credential
-* @param {ProofOptions} options
-* @returns {Promise<Credential>}
-*/
-  createSignedCredential(fragment: string, credential: Credential, options: ProofOptions): Promise<Credential>;
-/**
-* Signs a {@link Document} with the key specified by `fragment`.
-* @param {string} fragment
-* @param {Document} document
-* @param {ProofOptions} options
-* @returns {Promise<Document>}
-*/
-  createSignedDocument(fragment: string, document: Document, options: ProofOptions): Promise<Document>;
-/**
-* Signs a {@link Presentation} the key specified by `fragment`.
-* @param {string} fragment
-* @param {Presentation} presentation
-* @param {ProofOptions} options
-* @returns {Promise<Presentation>}
-*/
-  createSignedPresentation(fragment: string, presentation: Presentation, options: ProofOptions): Promise<Presentation>;
-/**
-* Signs arbitrary `data` with the key specified by `fragment`.
-* @param {string} fragment
-* @param {any} data
-* @param {ProofOptions} options
-* @returns {Promise<any>}
-*/
-  createSignedData(fragment: string, data: any, options: ProofOptions): Promise<any>;
-/**
-* Overwrites the {@link Document} this account manages, **without doing any validation**.
-*
-* ### WARNING
-*
-* This method is dangerous and can easily corrupt the internal state,
-* potentially making the identity unusable. Only call this if you fully
-* understand the implications!
-* @param {Document} document
-* @returns {Promise<void>}
-*/
-  updateDocumentUnchecked(document: Document): Promise<void>;
-/**
-* Fetches the latest changes from the tangle and **overwrites** the local document.
-*
-* If a DID is managed from distributed accounts, this should be called before making changes
-* to the identity, to avoid publishing updates that would be ignored.
-* @returns {Promise<void>}
-*/
-  fetchDocument(): Promise<void>;
-/**
-* If the document has a `RevocationBitmap` service identified by `fragment`,
-* revoke all credentials with a `revocationBitmapIndex` in `credentialIndices`.
-* @param {string} fragment
-* @param {number | number[]} credentialIndices
-* @returns {Promise<void>}
-*/
-  revokeCredentials(fragment: string, credentialIndices: number | number[]): Promise<void>;
-/**
-* If the document has a `RevocationBitmap` service identified by `fragment`,
-* unrevoke all credentials with a `revocationBitmapIndex` in `credentialIndices`.
-* @param {string} fragment
-* @param {number | number[]} credentialIndices
-* @returns {Promise<void>}
-*/
-  unrevokeCredentials(fragment: string, credentialIndices: number | number[]): Promise<void>;
-/**
-* Encrypts the given `plaintext` with the specified `encryption_algorithm` and `cek_algorithm`.
-*
-* Returns an [`EncryptedData`] instance.
-* @param {Uint8Array} plaintext
-* @param {Uint8Array} associated_data
-* @param {EncryptionAlgorithm} encryption_algorithm
-* @param {CekAlgorithm} cek_algorithm
-* @param {Uint8Array} public_key
-* @returns {Promise<EncryptedData>}
-*/
-  encryptData(plaintext: Uint8Array, associated_data: Uint8Array, encryption_algorithm: EncryptionAlgorithm, cek_algorithm: CekAlgorithm, public_key: Uint8Array): Promise<EncryptedData>;
-/**
-* Decrypts the given `data` with the key identified by `fragment` using the given `encryption_algorithm` and
-* `cek_algorithm`.
-*
-* Returns the decrypted text.
-* @param {EncryptedData} data
-* @param {EncryptionAlgorithm} encryption_algorithm
-* @param {CekAlgorithm} cek_algorithm
-* @param {string} fragment
-* @returns {Promise<Uint8Array>}
-*/
-  decryptData(data: EncryptedData, encryption_algorithm: EncryptionAlgorithm, cek_algorithm: CekAlgorithm, fragment: string): Promise<Uint8Array>;
-/**
-* Sets the `alsoKnownAs` property in the DID document.
-* @param {SetAlsoKnownAsOptions} options
-* @returns {Promise<void>}
-*/
-  setAlsoKnownAs(options: SetAlsoKnownAsOptions): Promise<void>;
-/**
-* Deletes a verification method if the method exists.
-* @param {DeleteMethodOptions} options
-* @returns {Promise<void>}
-*/
-  deleteMethod(options: DeleteMethodOptions): Promise<void>;
-/**
-* Deletes a Service if it exists.
-* @param {DeleteServiceOptions} options
-* @returns {Promise<void>}
-*/
-  deleteService(options: DeleteServiceOptions): Promise<void>;
-/**
-* Sets the controllers of the DID document.
-* @param {SetControllerOptions} options
-* @returns {Promise<void>}
-*/
-  setController(options: SetControllerOptions): Promise<void>;
-/**
-* Adds a new Service to the DID Document.
-* @param {CreateServiceOptions} options
-* @returns {Promise<void>}
-*/
-  createService(options: CreateServiceOptions): Promise<void>;
-}
-/**
-* An [`Account`] builder for easy account configuration.
-*
-* To reduce memory usage, accounts created from the same builder share the same `Storage`
-* used to store identities, and the same {@link Client} used to publish identities to the Tangle.
-*
-* The configuration on the other hand is cloned, and therefore unique for each built account.
-* This means a builder can be reconfigured in-between account creations, without affecting
-* the configuration of previously built accounts.
-*/
-export class AccountBuilder {
-  free(): void;
-/**
-* Creates a new `AccountBuilder`.
-* @param {AccountBuilderOptions | undefined} options
-*/
-  constructor(options?: AccountBuilderOptions);
-/**
-* Loads an existing identity with the specified `did` using the current builder configuration.
-* The identity must exist in the configured `Storage`.
-* @param {DID} did
-* @returns {Promise<Account>}
-*/
-  loadIdentity(did: DID): Promise<Account>;
-/**
-* Creates a new identity based on the builder configuration and returns
-* an {@link Account} object to manage it.
-*
-* The identity is stored locally in the `Storage`. The DID network is automatically determined
-* by the {@link Client} used to publish it.
-*
-* @See {@link IdentitySetup} to customize the identity creation.
-* @param {IdentitySetup | undefined} identity_setup
-* @returns {Promise<Account>}
-*/
-  createIdentity(identity_setup?: IdentitySetup): Promise<Account>;
-}
-/**
-* Agreement information used as the input for the concat KDF.
-*/
-export class AgreementInfo {
-  free(): void;
-/**
-* Creates an `AgreementInfo` Object.
-* @param {Uint8Array} apu
-* @param {Uint8Array} apv
-* @param {Uint8Array} pub_info
-* @param {Uint8Array} priv_info
-*/
-  constructor(apu: Uint8Array, apv: Uint8Array, pub_info: Uint8Array, priv_info: Uint8Array);
-/**
-* Returns a copy of `apu'
-* @returns {Uint8Array}
-*/
-  apu(): Uint8Array;
-/**
-* Returns a copy of `apv'
-* @returns {Uint8Array}
-*/
-  apv(): Uint8Array;
-/**
-* Returns a copy of `pubInfo'
-* @returns {Uint8Array}
-*/
-  pubInfo(): Uint8Array;
-/**
-* Returns a copy of `privInfo'
-* @returns {Uint8Array}
-*/
-  privInfo(): Uint8Array;
-/**
-* Serializes `AgreementInfo` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes `AgreementInfo` from a JSON object.
-* @param {any} json_value
-* @returns {AgreementInfo}
-*/
-  static fromJSON(json_value: any): AgreementInfo;
-}
-/**
-*/
-export class AutoSave {
-  free(): void;
-/**
-* Never save.
-* @returns {AutoSave}
-*/
-  static never(): AutoSave;
-/**
-* Save after every action.
-* @returns {AutoSave}
-*/
-  static every(): AutoSave;
-/**
-* Save after every N actions.
-* @param {number} number_of_actions
-* @returns {AutoSave}
-*/
-  static batch(number_of_actions: number): AutoSave;
-/**
-* Serializes `AutoSave` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes `AutoSave` from a JSON object.
-* @param {any} json_value
-* @returns {AutoSave}
-*/
-  static fromJSON(json_value: any): AutoSave;
-}
-/**
-* Supported algorithms used to determine and potentially encrypt the content encryption key (CEK).
-*/
-export class CekAlgorithm {
-  free(): void;
-/**
-* Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF.
-* @param {AgreementInfo} agreement
-* @returns {CekAlgorithm}
-*/
-  static EcdhEs(agreement: AgreementInfo): CekAlgorithm;
-/**
-* Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF.
-* @param {AgreementInfo} agreement
-* @returns {CekAlgorithm}
-*/
-  static EcdhEsA256Kw(agreement: AgreementInfo): CekAlgorithm;
-/**
-* Serializes `CekAlgorithm` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes `CekAlgorithm` from a JSON object.
-* @param {any} json_value
-* @returns {CekAlgorithm}
-*/
-  static fromJSON(json_value: any): CekAlgorithm;
-}
-/**
-*/
-export class ChainState {
-  free(): void;
-/**
-* Serializes a `ChainState` object as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a JSON object as `ChainState`.
-* @param {any} json_value
-* @returns {ChainState}
-*/
-  static fromJSON(json_value: any): ChainState;
-}
-/**
-*/
-export class Client {
-  free(): void;
-/**
-* Creates a new `Client` with default settings.
-*/
-  constructor();
-/**
-* Creates a new `Client` with the given settings.
-* @param {IClientConfig} config
-* @returns {Promise<Client>}
-*/
-  static fromConfig(config: IClientConfig): Promise<Client>;
-/**
-* Returns the `Client` Tangle network.
-* @returns {Network}
-*/
-  network(): Network;
-/**
-* Publishes a {@link Document} to the Tangle.
-* @param {Document} document
-* @returns {Promise<Receipt>}
-*/
-  publishDocument(document: Document): Promise<Receipt>;
-/**
-* Publishes a `DiffMessage` to the Tangle.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {string} message_id
-* @param {DiffMessage} diff
-* @returns {Promise<Receipt>}
-*/
-  publishDiff(message_id: string, diff: DiffMessage): Promise<Receipt>;
-/**
-* Publishes arbitrary JSON data to the specified index on the Tangle.
-* @param {string} index
-* @param {any} data
-* @returns {Promise<Receipt>}
-*/
-  publishJSON(index: string, data: any): Promise<Receipt>;
-/**
-* Publishes arbitrary JSON data to the specified index on the Tangle.
-* Retries (promotes or reattaches) the message until it’s included (referenced by a milestone).
-* Default interval is 5 seconds and max attempts is 40.
-* @param {string} index
-* @param {any} data
-* @param {number | undefined} interval
-* @param {number | undefined} max_attempts
-* @returns {Promise<any>}
-*/
-  publishJsonWithRetry(index: string, data: any, interval?: number, max_attempts?: number): Promise<any>;
-/**
-* Checks if a message is confirmed by a milestone.
-* @param {string} messageId
-* @returns {Promise<boolean>}
-*/
-  isMessageIncluded(messageId: string): Promise<boolean>;
-/**
-* Fetch the DID document specified by the given `DID`.
-* @param {DID | string} did
-* @returns {Promise<ResolvedDocument>}
-*/
-  resolve(did: DID | string): Promise<ResolvedDocument>;
-/**
-* Returns the message history of the given DID.
-* @param {DID | string} did
-* @returns {Promise<DocumentHistory>}
-*/
-  resolveHistory(did: DID | string): Promise<DocumentHistory>;
-/**
-* Returns the `DiffChainHistory` of a diff chain starting from a document on the
-* integration chain.
-*
-* NOTE: the document must have been published to the tangle and have a valid message id and
-* capability invocation method.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {ResolvedDocument} document
-* @returns {Promise<DiffChainHistory>}
-*/
-  resolveDiffHistory(document: ResolvedDocument): Promise<DiffChainHistory>;
-}
-/**
-*/
-export class Credential {
-  free(): void;
-/**
-* Returns the base JSON-LD context.
-* @returns {string}
-*/
-  static BaseContext(): string;
-/**
-* Returns the base type.
-* @returns {string}
-*/
-  static BaseType(): string;
-/**
-* Constructs a new `Credential`.
-* @param {ICredential} values
-*/
-  constructor(values: ICredential);
-/**
-* Returns a copy of the JSON-LD context(s) applicable to the `Credential`.
-* @returns {Array<string | Record<string, any>>}
-*/
-  context(): Array<string | Record<string, any>>;
-/**
-* Returns a copy of the unique `URI` identifying the `Credential` .
-* @returns {string | undefined}
-*/
-  id(): string | undefined;
-/**
-* Returns a copy of the URIs defining the type of the `Credential`.
-* @returns {Array<string>}
-*/
-  type(): Array<string>;
-/**
-* Returns a copy of the `Credential` subject(s).
-* @returns {Array<Subject>}
-*/
-  credentialSubject(): Array<Subject>;
-/**
-* Returns a copy of the issuer of the `Credential`.
-* @returns {string | Issuer}
-*/
-  issuer(): string | Issuer;
-/**
-* Returns a copy of the timestamp of when the `Credential` becomes valid.
-* @returns {Timestamp}
-*/
-  issuanceDate(): Timestamp;
-/**
-* Returns a copy of the timestamp of when the `Credential` should no longer be considered valid.
-* @returns {Timestamp | undefined}
-*/
-  expirationDate(): Timestamp | undefined;
-/**
-* Returns a copy of the information used to determine the current status of the `Credential`.
-* @returns {Array<Status>}
-*/
-  credentialStatus(): Array<Status>;
-/**
-* Returns a copy of the information used to assist in the enforcement of a specific `Credential` structure.
-* @returns {Array<Schema>}
-*/
-  credentialSchema(): Array<Schema>;
-/**
-* Returns a copy of the service(s) used to refresh an expired `Credential`.
-* @returns {Array<RefreshService>}
-*/
-  refreshService(): Array<RefreshService>;
-/**
-* Returns a copy of the terms-of-use specified by the `Credential` issuer.
-* @returns {Array<Policy>}
-*/
-  termsOfUse(): Array<Policy>;
-/**
-* Returns a copy of the human-readable evidence used to support the claims within the `Credential`.
-* @returns {Array<Evidence>}
-*/
-  evidence(): Array<Evidence>;
-/**
-* Returns whether or not the `Credential` must only be contained within a {@link Presentation}
-* with a proof issued from the `Credential` subject.
-* @returns {boolean | undefined}
-*/
-  nonTransferable(): boolean | undefined;
-/**
-* Returns a copy of the proof used to verify the `Credential`.
-* @returns {Proof | undefined}
-*/
-  proof(): Proof | undefined;
-/**
-* Returns a copy of the miscellaneous properties on the `Credential`.
-* @returns {Map<string, any>}
-*/
-  properties(): Map<string, any>;
-/**
-* Serializes a `Credential` to a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Credential` from a JSON object.
-* @param {any} json
-* @returns {Credential}
-*/
-  static fromJSON(json: any): Credential;
-/**
-* Deep clones the object.
-* @returns {Credential}
-*/
-  clone(): Credential;
-}
-/**
-* Options to declare validation criteria when validating credentials.
-*/
-export class CredentialValidationOptions {
-  free(): void;
-/**
-* Creates a new `CredentialValidationOptions` from the given fields.
-*
-* Throws an error if any of the options are invalid.
-* @param {ICredentialValidationOptions} options
-*/
-  constructor(options: ICredentialValidationOptions);
-/**
-* Creates a new `CredentialValidationOptions` with defaults.
-* @returns {CredentialValidationOptions}
-*/
-  static default(): CredentialValidationOptions;
-/**
-* Serializes a `CredentialValidationOptions` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `CredentialValidationOptions` from a JSON object.
-* @param {any} json
-* @returns {CredentialValidationOptions}
-*/
-  static fromJSON(json: any): CredentialValidationOptions;
-/**
-* Deep clones the object.
-* @returns {CredentialValidationOptions}
-*/
-  clone(): CredentialValidationOptions;
-}
-/**
-*/
-export class CredentialValidator {
-  free(): void;
-/**
-* Validates a `Credential`.
-*
-* The following properties are validated according to `options`:
-* - the issuer's signature,
-* - the expiration date,
-* - the issuance date,
-* - the semantic structure.
-*
-* ### Warning
-* The lack of an error returned from this method is in of itself not enough to conclude that the credential can be
-* trusted. This section contains more information on additional checks that should be carried out before and after
-* calling this method.
-*
-* #### The state of the issuer's DID Document
-* The caller must ensure that `issuer` represents an up-to-date DID Document. The convenience method
-* `Resolver::resolveCredentialIssuer` can help extract the latest available state of the issuer's DID Document.
-*
-* #### Properties that are not validated
-*  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:
-* `credentialStatus`, `type`, `credentialSchema`, `refreshService`, **and more**.
-* These should be manually checked after validation, according to your requirements.
-*
-* ### Errors
-* An error is returned whenever a validated condition is not satisfied.
-* @param {Credential} credential
-* @param {Document | ResolvedDocument} issuer
-* @param {CredentialValidationOptions} options
-* @param {number} fail_fast
-*/
-  static validate(credential: Credential, issuer: Document | ResolvedDocument, options: CredentialValidationOptions, fail_fast: number): void;
-/**
-* Validates the semantic structure of the `Credential`.
-*
-* ### Warning
-* This does not validate against the credential's schema nor the structure of the subject claims.
-* @param {Credential} credential
-*/
-  static checkStructure(credential: Credential): void;
-/**
-* Validate that the credential expires on or after the specified timestamp.
-* @param {Credential} credential
-* @param {Timestamp} timestamp
-*/
-  static checkExpiresOnOrAfter(credential: Credential, timestamp: Timestamp): void;
-/**
-* Validate that the credential is issued on or before the specified timestamp.
-* @param {Credential} credential
-* @param {Timestamp} timestamp
-*/
-  static checkIssuedOnOrBefore(credential: Credential, timestamp: Timestamp): void;
-/**
-* Verify the signature using the DID Document of a trusted issuer.
-*
-* # Warning
-* The caller must ensure that the DID Documents of the trusted issuers are up-to-date.
-* ### Errors
-* This method immediately returns an error if
-* the credential issuer' url cannot be parsed to a DID belonging to one of the trusted issuers. Otherwise an attempt
-* to verify the credential's signature will be made and an error is returned upon failure.
-* @param {Credential} credential
-* @param {Array<Document> | Array<ResolvedDocument>} trusted_issuers
-* @param {VerifierOptions} options
-*/
-  static verifySignature(credential: Credential, trusted_issuers: Array<Document> | Array<ResolvedDocument>, options: VerifierOptions): void;
-/**
-* Validate that the relationship between the `holder` and the credential subjects is in accordance with
-* `relationship`. The `holder_url` parameter is expected to be the URL of the holder.
-* @param {Credential} credential
-* @param {string} holder_url
-* @param {number} relationship
-*/
-  static check_subject_holder_relationship(credential: Credential, holder_url: string, relationship: number): void;
-/**
-* Checks whether the credential status has been revoked.
-*
-* Only supports `BitmapRevocation2022`.
-* @param {Credential} credential
-* @param {Array<Document> | Array<ResolvedDocument>} trustedIssuers
-* @param {number} statusCheck
-*/
-  static checkStatus(credential: Credential, trustedIssuers: Array<Document> | Array<ResolvedDocument>, statusCheck: number): void;
-}
-/**
-* @typicalname did
-*/
-export class DID {
-  free(): void;
-/**
-* Creates a new `DID` from a public key.
-* @param {Uint8Array} public_key
-* @param {string | undefined} network
-*/
-  constructor(public_key: Uint8Array, network?: string);
-/**
-* Parses a `DID` from the input string.
-* @param {string} input
-* @returns {DID}
-*/
-  static parse(input: string): DID;
-/**
-* Returns the IOTA tangle network of the `DID`.
-* @returns {Network}
-*/
-  network(): Network;
-/**
-* Returns a copy of the unique tag of the `DID`.
-* @returns {string}
-*/
-  tag(): string;
-/**
-* Construct a new `DIDUrl` by joining with a relative DID Url string.
-* @param {string} segment
-* @returns {DIDUrl}
-*/
-  join(segment: string): DIDUrl;
-/**
-* Clones the `DID` into a `DIDUrl`.
-* @returns {DIDUrl}
-*/
-  toUrl(): DIDUrl;
-/**
-* Converts the `DID` into a `DIDUrl`.
-* @returns {DIDUrl}
-*/
-  intoUrl(): DIDUrl;
-/**
-* Returns the `DID` as a string.
-* @returns {string}
-*/
-  toString(): string;
-/**
-* Deserializes a JSON object as `DID`.
-* @param {any} json_value
-* @returns {DID}
-*/
-  static fromJSON(json_value: any): DID;
-/**
-* Serializes a `DID` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deep clones the object.
-* @returns {DID}
-*/
-  clone(): DID;
-/**
-* Returns the IOTA tangle network of the `DID`.
-*/
-  readonly networkName: string;
-}
-/**
-* @typicalname didUrl
-*/
-export class DIDUrl {
-  free(): void;
-/**
-* Parses a `DIDUrl` from the input string.
-* @param {string} input
-* @returns {DIDUrl}
-*/
-  static parse(input: string): DIDUrl;
-/**
-* Return a copy of the `DID` section of the `DIDUrl`.
-* @returns {DID}
-*/
-  did(): DID;
-/**
-* Return a copy of the relative DID Url as a string, including only the path, query, and fragment.
-* @returns {string}
-*/
-  urlStr(): string;
-/**
-* Returns a copy of the `DIDUrl` method fragment, if any. Excludes the leading '#'.
-* @returns {string | undefined}
-*/
-  fragment(): string | undefined;
-/**
-* Sets the `fragment` component of the `DIDUrl`.
-* @param {string | undefined} value
-*/
-  setFragment(value?: string): void;
-/**
-* Returns a copy of the `DIDUrl` path.
-* @returns {string | undefined}
-*/
-  path(): string | undefined;
-/**
-* Sets the `path` component of the `DIDUrl`.
-* @param {string | undefined} value
-*/
-  setPath(value?: string): void;
-/**
-* Returns a copy of the `DIDUrl` method query, if any. Excludes the leading '?'.
-* @returns {string | undefined}
-*/
-  query(): string | undefined;
-/**
-* Sets the `query` component of the `DIDUrl`.
-* @param {string | undefined} value
-*/
-  setQuery(value?: string): void;
-/**
-* Append a string representing a path, query, and/or fragment, returning a new `DIDUrl`.
-*
-* Must begin with a valid delimiter character: '/', '?', '#'. Overwrites the existing URL
-* segment and any following segments in order of path, query, then fragment.
-*
-* I.e.
-* - joining a path will clear the query and fragment.
-* - joining a query will clear the fragment.
-* - joining a fragment will only overwrite the fragment.
-* @param {string} segment
-* @returns {DIDUrl}
-*/
-  join(segment: string): DIDUrl;
-/**
-* Returns the `DIDUrl` as a string.
-* @returns {string}
-*/
-  toString(): string;
-/**
-* Serializes a `DIDUrl` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deep clones the object.
-* @returns {DIDUrl}
-*/
-  clone(): DIDUrl;
-}
-/**
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-*/
-export class DiffChainHistory {
-  free(): void;
-/**
-* Returns an `Array` of the diff chain `DiffMessages`.
-*
-* NOTE: this clones the field.
-* @returns {Array<DiffMessage>}
-*/
-  chainData(): Array<DiffMessage>;
-/**
-* Returns an `Array` of `MessageIds` as strings.
-*
-* NOTE: this clones the field.
-* @returns {Array<string>}
-*/
-  spam(): Array<string>;
-/**
-* Serializes as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes from a JSON object.
-* @param {any} json
-* @returns {DiffChainHistory}
-*/
-  static fromJSON(json: any): DiffChainHistory;
-}
-/**
-* Defines the difference between two DID `Document`s' JSON representations.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-*/
-export class DiffMessage {
-  free(): void;
-/**
-* Returns the DID of the associated DID Document.
-*
-* NOTE: clones the data.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {DID}
-*/
-  id(): DID;
-/**
-* Returns a copy of the DID of the associated DID Document.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {DID}
-*/
-  did(): DID;
-/**
-* Returns a copy of the raw contents of the DID Document diff as a JSON string.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {string}
-*/
-  diff(): string;
-/**
-* Returns a copy of the message_id of the DID Document diff.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {string}
-*/
-  messageId(): string;
-/**
-* Sets the message_id of the DID Document diff.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {string} message_id
-*/
-  setMessageId(message_id: string): void;
-/**
-* Returns a copy of the Tangle message id of the previous DID Document diff.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {string}
-*/
-  previousMessageId(): string;
-/**
-* Sets the Tangle message id of the previous DID Document diff.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {string} message_id
-*/
-  setPreviousMessageId(message_id: string): void;
-/**
-* Returns a copy of the proof.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {Proof | undefined}
-*/
-  proof(): Proof | undefined;
-/**
-* Returns a new DID Document which is the result of merging `self`
-* with the given Document.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {Document} document
-* @returns {Document}
-*/
-  merge(document: Document): Document;
-/**
-* Serializes a `DiffMessage` as a JSON object.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `DiffMessage` from a JSON object.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {any} json
-* @returns {DiffMessage}
-*/
-  static fromJSON(json: any): DiffMessage;
-/**
-* Deep clones the object.
-* @returns {DiffMessage}
-*/
-  clone(): DiffMessage;
-}
-/**
-*/
-export class Document {
-  free(): void;
-/**
-* Creates a new DID Document from the given `KeyPair`, network, and verification method
-* fragment name.
-*
-* The DID Document will be pre-populated with a single verification method
-* derived from the provided `KeyPair` embedded as a capability invocation
-* verification relationship. This method will have the DID URL fragment
-* `#sign-0` by default and can be easily retrieved with `Document::defaultSigningMethod`.
-*
-* NOTE: the generated document is unsigned, see `Document::signSelf`.
-*
-* Arguments:
-*
-* * keypair: the initial verification method is derived from the public key with this keypair.
-* * network: Tangle network to use for the DID, default `Network::mainnet`.
-* * fragment: name of the initial verification method, default "sign-0".
-* @param {KeyPair} keypair
-* @param {string | undefined} network
-* @param {string | undefined} fragment
-*/
-  constructor(keypair: KeyPair, network?: string, fragment?: string);
-/**
-* Creates a new DID Document from the given `VerificationMethod`.
-*
-* NOTE: the generated document is unsigned, see `Document::signSelf`.
-* @param {VerificationMethod} method
-* @returns {Document}
-*/
-  static fromVerificationMethod(method: VerificationMethod): Document;
-/**
-* Returns whether the given {@link MethodType} can be used to sign document updates.
-* @param {MethodType} method_type
-* @returns {boolean}
-*/
-  static isSigningMethodType(method_type: MethodType): boolean;
-/**
-* Returns a copy of the DID Document `id`.
-* @returns {DID}
-*/
-  id(): DID;
-/**
-* Sets the controllers of the DID Document.
-*
-* Note: Duplicates will be ignored.
-* Use `null` to remove all controllers.
-* @param {DID | DID[] | null} controllers
-*/
-  setController(controllers: DID | DID[] | null): void;
-/**
-* Returns a list of document controllers.
-* @returns {DID[]}
-*/
-  controller(): DID[];
-/**
-* Sets the `alsoKnownAs` property in the DID document.
-* @param {string | string[] | null} urls
-*/
-  setAlsoKnownAs(urls: string | string[] | null): void;
-/**
-* Returns a set of the document's `alsoKnownAs`.
-* @returns {Array<string>}
-*/
-  alsoKnownAs(): Array<string>;
-/**
-* Adds a custom property to the DID Document.
-* If the value is set to `null`, the custom property will be removed.
-*
-* ### WARNING
-* This method can overwrite existing properties like `id` and result in an invalid document.
-* @param {string} key
-* @param {any} value
-*/
-  setPropertyUnchecked(key: string, value: any): void;
-/**
-* Returns a copy of the custom DID Document properties.
-* @returns {Map<string, any>}
-*/
-  properties(): Map<string, any>;
-/**
-* Return a set of all {@link Service Services} in the document.
-* @returns {Service[]}
-*/
-  service(): Service[];
-/**
-* Add a new {@link Service} to the document.
-*
-* Returns `true` if the service was added.
-* @param {Service} service
-* @returns {boolean}
-*/
-  insertService(service: Service): boolean;
-/**
-* Remove a {@link Service} identified by the given {@link DIDUrl} from the document.
-*
-* Returns `true` if a service was removed.
-* @param {DIDUrl} did
-* @returns {boolean}
-*/
-  removeService(did: DIDUrl): boolean;
-/**
-* Returns a list of all {@link VerificationMethod} in the DID Document.
-* @returns {VerificationMethod[]}
-*/
-  methods(): VerificationMethod[];
-/**
-* Adds a new Verification Method to the DID Document.
-* @param {VerificationMethod} method
-* @param {MethodScope} scope
-*/
-  insertMethod(method: VerificationMethod, scope: MethodScope): void;
-/**
-* Removes all references to the specified Verification Method.
-* @param {DIDUrl} did
-*/
-  removeMethod(did: DIDUrl): void;
-/**
-* Returns a copy of the first `VerificationMethod` with a capability invocation relationship
-* capable of signing this DID document.
-*
-* Throws an error if no signing method is present.
-* @returns {VerificationMethod}
-*/
-  defaultSigningMethod(): VerificationMethod;
-/**
-* Returns a copy of the first `VerificationMethod` with an `id` property
-* matching the provided `query`.
-*
-* Throws an error if the method is not found.
-* @param {DIDUrl | string} query
-* @param {MethodScope | undefined} scope
-* @returns {VerificationMethod | undefined}
-*/
-  resolveMethod(query: DIDUrl | string, scope?: MethodScope): VerificationMethod | undefined;
-/**
-* Attempts to resolve the given method query into a method capable of signing a document update.
-* @param {DIDUrl | string} query
-* @returns {VerificationMethod}
-*/
-  resolveSigningMethod(query: DIDUrl | string): VerificationMethod;
-/**
-* Attaches the relationship to the given method, if the method exists.
-*
-* Note: The method needs to be in the set of verification methods,
-* so it cannot be an embedded one.
-* @param {DIDUrl} did_url
-* @param {number} relationship
-* @returns {boolean}
-*/
-  attachMethodRelationship(did_url: DIDUrl, relationship: number): boolean;
-/**
-* Detaches the given relationship from the given method, if the method exists.
-* @param {DIDUrl} did_url
-* @param {number} relationship
-* @returns {boolean}
-*/
-  detachMethodRelationship(did_url: DIDUrl, relationship: number): boolean;
-/**
-* Signs the DID document with the verification method specified by `method_query`.
-* The `method_query` may be the full `DIDUrl` of the method or just its fragment,
-* e.g. "#sign-0".
-*
-* NOTE: does not validate whether the private key of the given `key_pair` corresponds to the
-* verification method. See `Document::verifySelfSigned`.
-* @param {KeyPair} key_pair
-* @param {DIDUrl | string} method_query
-*/
-  signSelf(key_pair: KeyPair, method_query: DIDUrl | string): void;
-/**
-* Signs another DID document using the verification method specified by `method_query`.
-* The `method_query` may be the full `DIDUrl` of the method or just its fragment,
-* e.g. "#sign-0".
-*
-* `Document.signSelf` should be used in general, this throws an error if trying to operate
-* on the same document. This is intended for signing updates to a document where a sole
-* capability invocation method is rotated or replaced entirely.
-*
-* NOTE: does not validate whether the private key of the given `key_pair` corresponds to the
-* verification method. See {@link Document.verifyDocument}.
-* @param {Document} document
-* @param {KeyPair} key_pair
-* @param {DIDUrl | string} method_query
-*/
-  signDocument(document: Document, key_pair: KeyPair, method_query: DIDUrl | string): void;
-/**
-* Creates a signature for the given `Credential` with the specified DID Document
-* Verification Method.
-* @param {Credential} credential
-* @param {Uint8Array} privateKey
-* @param {DIDUrl | string} methodQuery
-* @param {ProofOptions} options
-* @returns {Credential}
-*/
-  signCredential(credential: Credential, privateKey: Uint8Array, methodQuery: DIDUrl | string, options: ProofOptions): Credential;
-/**
-* Creates a signature for the given `Presentation` with the specified DID Document
-* Verification Method.
-* @param {Presentation} presentation
-* @param {Uint8Array} privateKey
-* @param {DIDUrl | string} methodQuery
-* @param {ProofOptions} options
-* @returns {Presentation}
-*/
-  signPresentation(presentation: Presentation, privateKey: Uint8Array, methodQuery: DIDUrl | string, options: ProofOptions): Presentation;
-/**
-* Creates a signature for the given `data` with the specified DID Document
-* Verification Method.
-*
-* NOTE: use `signSelf` or `signDocument` for DID Documents.
-* @param {any} data
-* @param {Uint8Array} privateKey
-* @param {DIDUrl | string} methodQuery
-* @param {ProofOptions} options
-* @returns {any}
-*/
-  signData(data: any, privateKey: Uint8Array, methodQuery: DIDUrl | string, options: ProofOptions): any;
-/**
-* Verifies the authenticity of `data` using the target verification method.
-* @param {any} data
-* @param {VerifierOptions} options
-* @returns {boolean}
-*/
-  verifyData(data: any, options: VerifierOptions): boolean;
-/**
-* Verifies that the signature on the DID document `signed` was generated by a valid method from
-* this DID document.
-*
-* # Errors
-*
-* Fails if:
-* - The signature proof section is missing in the `signed` document.
-* - The method is not found in this document.
-* - An unsupported verification method is used.
-* - The signature verification operation fails.
-* @param {Document} signed
-*/
-  verifyDocument(signed: Document): void;
-/**
-* Verifies whether `document` is a valid root DID document according to the IOTA DID method
-* specification.
-*
-* It must be signed using a verification method with a public key whose BLAKE2b-256 hash matches
-* the DID tag.
-* @param {Document} document
-*/
-  static verifyRootDocument(document: Document): void;
-/**
-* Generate a `DiffMessage` between two DID Documents and sign it using the specified
-* `key` and `method`.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {Document} other
-* @param {string} message_id
-* @param {KeyPair} key
-* @param {DIDUrl | string} method_query
-* @returns {DiffMessage}
-*/
-  diff(other: Document, message_id: string, key: KeyPair, method_query: DIDUrl | string): DiffMessage;
-/**
-* Verifies the signature of the `diff` was created using a capability invocation method
-* in this DID Document.
-*
-* # Errors
-*
-* Fails if an unsupported verification method is used or the verification operation fails.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {DiffMessage} diff
-*/
-  verifyDiff(diff: DiffMessage): void;
-/**
-* Verifies a `DiffMessage` signature and attempts to merge the changes into `self`.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {DiffMessage} diff
-*/
-  mergeDiff(diff: DiffMessage): void;
-/**
-* Returns the Tangle index of the integration chain for this DID.
-*
-* This is simply the tag segment of the `DID`.
-* E.g.
-* For a document with DID: did:iota:1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI,
-* `doc.integration_index()` == "1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI"
-* @returns {string}
-*/
-  integrationIndex(): string;
-/**
-* Returns the Tangle index of the DID diff chain. This should only be called on documents
-* published on the integration chain.
-*
-* This is the Base58-btc encoded SHA-256 digest of the hex-encoded message id.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {string} message_id
-* @returns {string}
-*/
-  static diffIndex(message_id: string): string;
-/**
-* Returns a copy of the metadata associated with this document.
-*
-* NOTE: Copies all the metadata. See also `metadataCreated`, `metadataUpdated`,
-* `metadataPreviousMessageId`, `metadataProof` if only a subset of the metadata required.
-* @returns {DocumentMetadata}
-*/
-  metadata(): DocumentMetadata;
-/**
-* Returns a copy of the timestamp of when the DID document was created.
-* @returns {Timestamp | undefined}
-*/
-  metadataCreated(): Timestamp | undefined;
-/**
-* Sets the timestamp of when the DID document was created.
-* @param {Timestamp | undefined} timestamp
-*/
-  setMetadataCreated(timestamp: Timestamp | undefined): void;
-/**
-* Returns a copy of the timestamp of the last DID document update.
-* @returns {Timestamp | undefined}
-*/
-  metadataUpdated(): Timestamp | undefined;
-/**
-* Sets the timestamp of the last DID document update.
-* @param {Timestamp | undefined} timestamp
-*/
-  setMetadataUpdated(timestamp: Timestamp | undefined): void;
-/**
-* Returns a copy of the previous integration chain message id.
-* @returns {string}
-*/
-  metadataPreviousMessageId(): string;
-/**
-* Sets the previous integration chain message id.
-* @param {string} value
-*/
-  setMetadataPreviousMessageId(value: string): void;
-/**
-* Returns a copy of the proof.
-* @returns {Proof | undefined}
-*/
-  proof(): Proof | undefined;
-/**
-* If the document has a `RevocationBitmap` service identified by `fragment`,
-* revoke all credentials with a revocationBitmapIndex in `credentialIndices`.
-* @param {string} fragment
-* @param {number | number[]} credentialIndices
-*/
-  revokeCredentials(fragment: string, credentialIndices: number | number[]): void;
-/**
-* If the document has a `RevocationBitmap` service identified by `fragment`,
-* unrevoke all credentials with a revocationBitmapIndex in `credentialIndices`.
-* @param {string} fragment
-* @param {number | number[]} credentialIndices
-*/
-  unrevokeCredentials(fragment: string, credentialIndices: number | number[]): void;
-/**
-* Serializes a `Document` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Document` from a JSON object.
-* @param {any} json
-* @returns {Document}
-*/
-  static fromJSON(json: any): Document;
-/**
-* Deep clones the object.
-* @returns {Document}
-*/
-  clone(): Document;
-}
-/**
-* A DID Document's history and current state.
-*/
-export class DocumentHistory {
-  free(): void;
-/**
-* Returns an `Array` of integration chain `Documents`.
-*
-* NOTE: clones the data.
-* @returns {Array<ResolvedDocument>}
-*/
-  integrationChainData(): Array<ResolvedDocument>;
-/**
-* Returns an `Array` of message id strings for "spam" messages on the same index
-* as the integration chain.
-*
-* NOTE: clones the data.
-* @returns {Array<string>}
-*/
-  integrationChainSpam(): Array<string>;
-/**
-* Returns an `Array` of diff chain `DiffMessages`.
-*
-* NOTE: clones the data.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {Array<DiffMessage>}
-*/
-  diffChainData(): Array<DiffMessage>;
-/**
-* Returns an `Array` of message id strings for "spam" messages on the same index
-* as the diff chain.
-*
-* NOTE: clones the data.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {Array<string>}
-*/
-  diffChainSpam(): Array<string>;
-/**
-* Serializes `DocumentHistory` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes `DocumentHistory` from a JSON object.
-* @param {any} json
-* @returns {DocumentHistory}
-*/
-  static fromJSON(json: any): DocumentHistory;
-/**
-* Deep clones the object.
-* @returns {DocumentHistory}
-*/
-  clone(): DocumentHistory;
-}
-/**
-* Additional attributes related to an IOTA DID Document.
-*/
-export class DocumentMetadata {
-  free(): void;
-/**
-* Returns a copy of the timestamp of when the DID document was created.
-* @returns {Timestamp | undefined}
-*/
-  created(): Timestamp | undefined;
-/**
-* Returns a copy of the timestamp of the last DID document update.
-* @returns {Timestamp | undefined}
-*/
-  updated(): Timestamp | undefined;
-/**
-* Deep clones the object.
-* @returns {DocumentMetadata}
-*/
-  clone(): DocumentMetadata;
-/**
-*/
-  readonly previousMessageId: string;
-}
-/**
-* A span of time.
-*/
-export class Duration {
-  free(): void;
-/**
-* Create a new `Duration` with the given number of seconds.
-* @param {number} seconds
-* @returns {Duration}
-*/
-  static seconds(seconds: number): Duration;
-/**
-* Create a new `Duration` with the given number of minutes.
-* @param {number} minutes
-* @returns {Duration}
-*/
-  static minutes(minutes: number): Duration;
-/**
-* Create a new `Duration` with the given number of hours.
-* @param {number} hours
-* @returns {Duration}
-*/
-  static hours(hours: number): Duration;
-/**
-* Create a new `Duration` with the given number of days.
-* @param {number} days
-* @returns {Duration}
-*/
-  static days(days: number): Duration;
-/**
-* Create a new `Duration` with the given number of weeks.
-* @param {number} weeks
-* @returns {Duration}
-*/
-  static weeks(weeks: number): Duration;
-/**
-* Serializes a `Duration` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Duration` from a JSON object.
-* @param {any} json
-* @returns {Duration}
-*/
-  static fromJSON(json: any): Duration;
-}
-/**
-*/
-export class Ed25519 {
-  free(): void;
-/**
-* Length in bytes of an Ed25519 private key.
-* @returns {number}
-*/
-  static PRIVATE_KEY_LENGTH(): number;
-/**
-* Length in bytes of an Ed25519 public key.
-* @returns {number}
-*/
-  static PUBLIC_KEY_LENGTH(): number;
-/**
-* Length in bytes of an Ed25519 signature.
-* @returns {number}
-*/
-  static SIGNATURE_LENGTH(): number;
-/**
-* Computes an EdDSA signature using an Ed25519 private key.
-*
-* NOTE: this differs from {@link Document.signData} which uses JCS
-* to canonicalize JSON messages.
-*
-* The private key must be a 32-byte seed in compliance with [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-3.2).
-* Other implementations often use another format. See [this blog post](https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/) for further explanation.
-* @param {Uint8Array} message
-* @param {Uint8Array} privateKey
-* @returns {Uint8Array}
-*/
-  static sign(message: Uint8Array, privateKey: Uint8Array): Uint8Array;
-/**
-* Verifies an EdDSA signature against an Ed25519 public key.
-*
-* NOTE: this differs from {@link Document.verifyData} which uses JCS
-* to canonicalize JSON messages.
-* @param {Uint8Array} message
-* @param {Uint8Array} signature
-* @param {Uint8Array} publicKey
-*/
-  static verify(message: Uint8Array, signature: Uint8Array, publicKey: Uint8Array): void;
-}
-/**
-* The structure returned after encrypting data
-*/
-export class EncryptedData {
-  free(): void;
-/**
-* Returns a copy of the nonce
-* @returns {Uint8Array}
-*/
-  nonce(): Uint8Array;
-/**
-* Returns a copy of the associated data
-* @returns {Uint8Array}
-*/
-  associatedData(): Uint8Array;
-/**
-* Returns a copy of the ciphertext
-* @returns {Uint8Array}
-*/
-  ciphertext(): Uint8Array;
-/**
-* Returns a copy of the tag
-* @returns {Uint8Array}
-*/
-  tag(): Uint8Array;
-/**
-* Serializes `EncryptedData` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes `EncryptedData` from a JSON object.
-* @param {any} json_value
-* @returns {EncryptedData}
-*/
-  static fromJSON(json_value: any): EncryptedData;
-}
-/**
-* Supported content encryption algorithms.
-*/
-export class EncryptionAlgorithm {
-  free(): void;
-/**
-* AES GCM using 256-bit key.
-* @returns {EncryptionAlgorithm}
-*/
-  static A256GCM(): EncryptionAlgorithm;
-/**
-* Returns the length of the cipher's key.
-* @returns {number}
-*/
-  keyLength(): number;
-/**
-* Serializes `EncryptionAlgorithm` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes `EncryptionAlgorithm` from a JSON object.
-* @param {any} json_value
-* @returns {EncryptionAlgorithm}
-*/
-  static fromJSON(json_value: any): EncryptionAlgorithm;
-}
-/**
-*/
-export class ExplorerUrl {
-  free(): void;
-/**
-* Constructs a new Tangle explorer URL from a string.
-*
-* Use `ExplorerUrl::mainnet` or `ExplorerUrl::devnet` unless using a private Tangle
-* or local explorer.
-* @param {string} url
-* @returns {ExplorerUrl}
-*/
-  static parse(url: string): ExplorerUrl;
-/**
-* Returns the Tangle explorer URL for the mainnet.
-* @returns {ExplorerUrl}
-*/
-  static mainnet(): ExplorerUrl;
-/**
-* Returns the Tangle explorer URL for the devnet.
-* @returns {ExplorerUrl}
-*/
-  static devnet(): ExplorerUrl;
-/**
-* Returns the web explorer URL of the given `message_id`.
-*
-* E.g. https://explorer.iota.org/mainnet/message/{message_id}
-* @param {string} message_id
-* @returns {string}
-*/
-  messageUrl(message_id: string): string;
-/**
-* Returns the web identity resolver URL for the given DID.
-*
-* E.g. https://explorer.iota.org/mainnet/identity-resolver/{did}
-* @param {DID | string} did
-* @returns {string}
-*/
-  resolverUrl(did: DID | string): string;
-/**
-* @returns {string}
-*/
-  toString(): string;
-}
-/**
-*/
-export class IntegrationChainHistory {
-  free(): void;
-/**
-* Returns an `Array` of the integration chain `Documents`.
-*
-* NOTE: this clones the field.
-* @returns {Array<ResolvedDocument>}
-*/
-  chainData(): Array<ResolvedDocument>;
-/**
-* Returns an `Array` of `MessageIds` as strings.
-*
-* NOTE: this clones the field.
-* @returns {Array<string>}
-*/
-  spam(): Array<string>;
-/**
-* Serializes as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes from a JSON object.
-* @param {any} json
-* @returns {IntegrationChainHistory}
-*/
-  static fromJSON(json: any): IntegrationChainHistory;
-}
-/**
-* The storage location of a verification method key.
-*
-* A key is uniquely identified by the fragment and a hash of its public key.
-* Importantly, the fragment alone is insufficient to represent the storage location.
-* For example, when rotating a key, there will be two keys in storage for the
-* same identity with the same fragment. The `key_hash` disambiguates the keys in
-* situations like these.
-*
-* The string representation of that location can be obtained via `canonicalRepr`.
-*/
-export class KeyLocation {
-  free(): void;
-/**
-* Create a location from a `KeyType`, the fragment of a verification method
-* and the bytes of a public key.
-* @param {number} keyType
-* @param {string} fragment
-* @param {Uint8Array} publicKey
-*/
-  constructor(keyType: number, fragment: string, publicKey: Uint8Array);
-/**
-* Obtain the location of a verification method's key in storage.
-* @param {VerificationMethod} method
-* @returns {KeyLocation}
-*/
-  static fromVerificationMethod(method: VerificationMethod): KeyLocation;
-/**
-* Returns the canonical string representation of the location.
-*
-* This should be used as the representation for storage keys.
-* @returns {string}
-*/
-  canonical(): string;
-/**
-* Returns a copy of the key type of the key location.
-* @returns {number}
-*/
-  keyType(): number;
-/**
-* Serializes `KeyLocation` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a JSON object into a `KeyLocation`.
-* @param {any} json_value
-* @returns {KeyLocation}
-*/
-  static fromJSON(json_value: any): KeyLocation;
-/**
-* @returns {string}
-*/
-  toString(): string;
-}
-/**
-*/
-export class KeyPair {
-  free(): void;
-/**
-* Generates a new `KeyPair` object.
-* @param {number} type_
-*/
-  constructor(type_: number);
-/**
-* Parses a `KeyPair` object from the public/private keys.
-* @param {number} type_
-* @param {Uint8Array} public_key
-* @param {Uint8Array} private_key
-* @returns {KeyPair}
-*/
-  static fromKeys(type_: number, public_key: Uint8Array, private_key: Uint8Array): KeyPair;
-/**
-* Reconstructs a `KeyPair` from the bytes of a private key.
-*
-* The private key for `Ed25519` must be a 32-byte seed in compliance
-* with [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-3.2).
-* Other implementations often use another format. See [this blog post](https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/) for further explanation.
-* @param {number} keyType
-* @param {Uint8Array} privateKeyBytes
-* @returns {KeyPair}
-*/
-  static tryFromPrivateKeyBytes(keyType: number, privateKeyBytes: Uint8Array): KeyPair;
-/**
-* Returns the `KeyType` of the `KeyPair` object.
-* @returns {number}
-*/
-  type(): number;
-/**
-* Returns a copy of the public key as a `Uint8Array`.
-* @returns {Uint8Array}
-*/
-  public(): Uint8Array;
-/**
-* Returns a copy of the private key as a `Uint8Array`.
-* @returns {Uint8Array}
-*/
-  private(): Uint8Array;
-/**
-* Serializes a `KeyPair` object as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `KeyPair` object from a JSON object.
-* @param {any} json
-* @returns {KeyPair}
-*/
-  static fromJSON(json: any): KeyPair;
-/**
-* Deep clones the object.
-* @returns {KeyPair}
-*/
-  clone(): KeyPair;
-}
-/**
-*/
-export class MethodContent {
-  free(): void;
-/**
-* Generate and store a new Ed25519 keypair for a new `Ed25519VerificationKey2018` method.
-* @returns {MethodContent}
-*/
-  static GenerateEd25519(): MethodContent;
-/**
-* Store an existing Ed25519 private key and derive a public key from it for a new
-* `Ed25519VerificationKey2018` method.
-* @param {Uint8Array} privateKey
-* @returns {MethodContent}
-*/
-  static PrivateEd25519(privateKey: Uint8Array): MethodContent;
-/**
-* Insert an existing Ed25519 public key into a new `Ed25519VerificationKey2018` method,
-* without generating or storing a private key.
-*
-* NOTE: the method will be unable to be used to sign anything without a private key.
-* @param {Uint8Array} publicKey
-* @returns {MethodContent}
-*/
-  static PublicEd25519(publicKey: Uint8Array): MethodContent;
-/**
-* Generate and store a new X25519 keypair for a new `X25519KeyAgreementKey2019` method.
-* @returns {MethodContent}
-*/
-  static GenerateX25519(): MethodContent;
-/**
-* Store an existing X25519 private key and derive a public key from it for a new
-* `X25519KeyAgreementKey2019` method.
-* @param {Uint8Array} privateKey
-* @returns {MethodContent}
-*/
-  static PrivateX25519(privateKey: Uint8Array): MethodContent;
-/**
-* Insert an existing X25519 public key into a new `X25519KeyAgreementKey2019` method,
-* without generating or storing a private key.
-*
-* NOTE: the method will be unable to be used for key exchange without a private key.
-* @param {Uint8Array} publicKey
-* @returns {MethodContent}
-*/
-  static PublicX25519(publicKey: Uint8Array): MethodContent;
-/**
-* Serializes `MethodContent` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes `MethodContent` from a JSON object.
-* @param {any} json_value
-* @returns {MethodContent}
-*/
-  static fromJSON(json_value: any): MethodContent;
-}
-/**
-* Supported verification method data formats.
-*/
-export class MethodData {
-  free(): void;
-/**
-* Creates a new `MethodData` variant with Base58-BTC encoded content.
-* @param {Uint8Array} data
-* @returns {MethodData}
-*/
-  static newBase58(data: Uint8Array): MethodData;
-/**
-* Creates a new `MethodData` variant with Multibase-encoded content.
-* @param {Uint8Array} data
-* @returns {MethodData}
-*/
-  static newMultibase(data: Uint8Array): MethodData;
-/**
-* Returns a `Uint8Array` containing the decoded bytes of the `MethodData`.
-*
-* This is generally a public key identified by a `MethodData` value.
-*
-* ### Errors
-* Decoding can fail if `MethodData` has invalid content or cannot be
-* represented as a vector of bytes.
-* @returns {Uint8Array}
-*/
-  tryDecode(): Uint8Array;
-/**
-* Serializes a `MethodData` object as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `MethodData` object from a JSON object.
-* @param {any} json
-* @returns {MethodData}
-*/
-  static fromJSON(json: any): MethodData;
-/**
-* Deep clones the object.
-* @returns {MethodData}
-*/
-  clone(): MethodData;
-}
-/**
-* Supported verification method types.
-*/
-export class MethodScope {
-  free(): void;
-/**
-* @returns {MethodScope}
-*/
-  static VerificationMethod(): MethodScope;
-/**
-* @returns {MethodScope}
-*/
-  static Authentication(): MethodScope;
-/**
-* @returns {MethodScope}
-*/
-  static AssertionMethod(): MethodScope;
-/**
-* @returns {MethodScope}
-*/
-  static KeyAgreement(): MethodScope;
-/**
-* @returns {MethodScope}
-*/
-  static CapabilityDelegation(): MethodScope;
-/**
-* @returns {MethodScope}
-*/
-  static CapabilityInvocation(): MethodScope;
-/**
-* Returns the `MethodScope` as a string.
-* @returns {string}
-*/
-  toString(): string;
-/**
-* Serializes a `MethodScope` object as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `MethodScope` object from a JSON object.
-* @param {any} json
-* @returns {MethodScope}
-*/
-  static fromJSON(json: any): MethodScope;
-/**
-* Deep clones the object.
-* @returns {MethodScope}
-*/
-  clone(): MethodScope;
-}
-/**
-* Supported verification method types.
-*/
-export class MethodType {
-  free(): void;
-/**
-* @returns {MethodType}
-*/
-  static Ed25519VerificationKey2018(): MethodType;
-/**
-* @returns {MethodType}
-*/
-  static X25519KeyAgreementKey2019(): MethodType;
-/**
-* Serializes a `MethodType` object as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `MethodType` object from a JSON object.
-* @param {any} json
-* @returns {MethodType}
-*/
-  static fromJSON(json: any): MethodType;
-/**
-* Returns the `MethodType` as a string.
-* @returns {string}
-*/
-  toString(): string;
-/**
-* Deep clones the object.
-* @returns {MethodType}
-*/
-  clone(): MethodType;
-}
-/**
-*/
-export class Network {
-  free(): void;
-/**
-* Parses the provided string to a `Network`.
-*
-* Errors if the name is invalid.
-* @param {string} name
-* @returns {Network}
-*/
-  static tryFromName(name: string): Network;
-/**
-* @returns {Network}
-*/
-  static mainnet(): Network;
-/**
-* @returns {Network}
-*/
-  static devnet(): Network;
-/**
-* Returns a copy of the network name.
-* @returns {string}
-*/
-  name(): string;
-/**
-* Returns a copy of the node URL of the Tangle network.
-* @returns {string | undefined}
-*/
-  defaultNodeURL(): string | undefined;
-/**
-* @returns {string}
-*/
-  toString(): string;
-/**
-* Serializes a `Network` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Network` from a JSON object.
-* @param {any} json
-* @returns {Network}
-*/
-  static fromJSON(json: any): Network;
-/**
-* Deep clones the object.
-* @returns {Network}
-*/
-  clone(): Network;
-}
-/**
-*/
-export class Presentation {
-  free(): void;
-/**
-* Returns the base JSON-LD context.
-* @returns {string}
-*/
-  static BaseContext(): string;
-/**
-* Returns the base type.
-* @returns {string}
-*/
-  static BaseType(): string;
-/**
-* Constructs a new `Presentation`.
-* @param {IPresentation} values
-*/
-  constructor(values: IPresentation);
-/**
-* Returns a copy of the JSON-LD context(s) applicable to the `Presentation`.
-* @returns {Array<string | Record<string, any>>}
-*/
-  context(): Array<string | Record<string, any>>;
-/**
-* Returns a copy of the unique `URI` identifying the `Presentation`.
-* @returns {string | undefined}
-*/
-  id(): string | undefined;
-/**
-* Returns a copy of the URIs defining the type of the `Presentation`.
-* @returns {Array<string>}
-*/
-  type(): Array<string>;
-/**
-* Returns a copy of the {@link Credential}(s) expressing the claims of the `Presentation`.
-* @returns {Array<Credential>}
-*/
-  verifiableCredential(): Array<Credential>;
-/**
-* Returns a copy of the URI of the entity that generated the `Presentation`.
-* @returns {string | undefined}
-*/
-  holder(): string | undefined;
-/**
-* Returns a copy of the service(s) used to refresh an expired {@link Credential} in the `Presentation`.
-* @returns {Array<RefreshService>}
-*/
-  refreshService(): Array<RefreshService>;
-/**
-* Returns a copy of the terms-of-use specified by the `Presentation` holder
-* @returns {Array<Policy>}
-*/
-  termsOfUse(): Array<Policy>;
-/**
-* Returns a copy of the proof used to verify the `Presentation`.
-* @returns {Proof | undefined}
-*/
-  proof(): Proof | undefined;
-/**
-* Returns a copy of the miscellaneous properties on the `Presentation`.
-* @returns {Map<string, any>}
-*/
-  properties(): Map<string, any>;
-/**
-* Serializes a `Presentation` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Presentation` from a JSON object.
-* @param {any} json
-* @returns {Presentation}
-*/
-  static fromJSON(json: any): Presentation;
-/**
-* Deep clones the object.
-* @returns {Presentation}
-*/
-  clone(): Presentation;
-}
-/**
-* Options to declare validation criteria when validating presentation.
-*/
-export class PresentationValidationOptions {
-  free(): void;
-/**
-* Creates a new `PresentationValidationOptions` from the given fields.
-*
-* Throws an error if any of the options are invalid.
-* @param {IPresentationValidationOptions} options
-*/
-  constructor(options: IPresentationValidationOptions);
-/**
-* Creates a new `PresentationValidationOptions` with defaults.
-* @returns {PresentationValidationOptions}
-*/
-  static default(): PresentationValidationOptions;
-/**
-* Serializes a `PresentationValidationOptions` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `PresentationValidationOptions` from a JSON object.
-* @param {any} json
-* @returns {PresentationValidationOptions}
-*/
-  static fromJSON(json: any): PresentationValidationOptions;
-/**
-* Deep clones the object.
-* @returns {PresentationValidationOptions}
-*/
-  clone(): PresentationValidationOptions;
-}
-/**
-*/
-export class PresentationValidator {
-  free(): void;
-/**
-* Validate a `Presentation`.
-*
-* The following properties are validated according to `options`:
-* - the semantic structure of the presentation,
-* - the holder's signature,
-* - the relationship between the holder and the credential subjects,
-* - the signatures and some properties of the constituent credentials (see
-* `CredentialValidator::validate`).
-*
-* ### Warning
-* The lack of an error returned from this method is in of itself not enough to conclude that the presentation can be
-* trusted. This section contains more information on additional checks that should be carried out before and after
-* calling this method.
-*
-* #### The state of the supplied DID Documents.
-* The caller must ensure that the DID Documents in `holder` and `issuers` are up-to-date. The convenience methods
-* `Resolver::resolve_presentation_holder` and `Resolver::resolve_presentation_issuers`
-* can help extract the latest available states of these DID Documents.
-*
-* #### Properties that are not validated
-*  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:
-* `credentialStatus`, `type`, `credentialSchema`, `refreshService`, **and more**.
-* These should be manually checked after validation, according to your requirements.
-*
-* ### Errors
-* An error is returned whenever a validated condition is not satisfied.
-* @param {Presentation} presentation
-* @param {Document | ResolvedDocument} holder
-* @param {Array<Document> | Array<ResolvedDocument>} issuers
-* @param {PresentationValidationOptions} options
-* @param {number} fail_fast
-*/
-  static validate(presentation: Presentation, holder: Document | ResolvedDocument, issuers: Array<Document> | Array<ResolvedDocument>, options: PresentationValidationOptions, fail_fast: number): void;
-/**
-* Verify the presentation's signature using the resolved document of the holder.
-*
-* ### Warning
-* The caller must ensure that the DID Document of the holder is up-to-date.
-*
-* ### Errors
-* Fails if the `holder` does not match the `presentation`'s holder property.
-* Fails if signature verification against the holder document fails.
-* @param {Presentation} presentation
-* @param {Document | ResolvedDocument} holder
-* @param {VerifierOptions} options
-*/
-  static verifyPresentationSignature(presentation: Presentation, holder: Document | ResolvedDocument, options: VerifierOptions): void;
-/**
-* Validates the semantic structure of the `Presentation`.
-* @param {Presentation} presentation
-*/
-  static checkStructure(presentation: Presentation): void;
-}
-/**
-* A digital signature.
-*
-* For field definitions see: https://w3c-ccg.github.io/security-vocab/
-*/
-export class Proof {
-  free(): void;
-/**
-* Returns a copy of the proof type.
-* @returns {string}
-*/
-  type(): string;
-/**
-* Returns a copy of the proof value string.
-* @returns {string}
-*/
-  value(): string;
-/**
-* Returns a copy of the identifier of the DID method used to create this proof.
-* @returns {string}
-*/
-  verificationMethod(): string;
-/**
-* When the proof was generated.
-* @returns {Timestamp | undefined}
-*/
-  created(): Timestamp | undefined;
-/**
-* When the proof expires.
-* @returns {Timestamp | undefined}
-*/
-  expires(): Timestamp | undefined;
-/**
-* Challenge from a proof requester to mitigate replay attacks.
-* @returns {string | undefined}
-*/
-  challenge(): string | undefined;
-/**
-* Domain for which a proof is valid to mitigate replay attacks.
-* @returns {string | undefined}
-*/
-  domain(): string | undefined;
-/**
-* Purpose for which the proof was generated.
-* @returns {ProofPurpose | undefined}
-*/
-  purpose(): ProofPurpose | undefined;
-/**
-* Serializes a `Proof` to a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Proof` from a JSON object.
-* @param {any} json
-* @returns {Proof}
-*/
-  static fromJSON(json: any): Proof;
-/**
-* Deep clones the object.
-* @returns {Proof}
-*/
-  clone(): Proof;
-}
-/**
-* Holds additional options for creating signatures.
-* See `IProofOptions`.
-*/
-export class ProofOptions {
-  free(): void;
-/**
-* Creates a new `ProofOptions` from the given fields.
-*
-* Throws an error if any of the options are invalid.
-* @param {IProofOptions} options
-*/
-  constructor(options: IProofOptions);
-/**
-* Creates a new `ProofOptions` with default options.
-* @returns {ProofOptions}
-*/
-  static default(): ProofOptions;
-/**
-* Deep clones the object.
-* @returns {ProofOptions}
-*/
-  clone(): ProofOptions;
-}
-/**
-* Associates a purpose with a {@link Proof}.
-*
-* See https://w3c-ccg.github.io/security-vocab/#proofPurpose
-*/
-export class ProofPurpose {
-  free(): void;
-/**
-* Purpose is to assert a claim.
-* See https://www.w3.org/TR/did-core/#assertion
-* @returns {ProofPurpose}
-*/
-  static assertionMethod(): ProofPurpose;
-/**
-* Purpose is to authenticate the signer.
-* See https://www.w3.org/TR/did-core/#authentication
-* @returns {ProofPurpose}
-*/
-  static authentication(): ProofPurpose;
-/**
-* Serializes a `ProofPurpose` to a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `ProofPurpose` from a JSON object.
-* @param {any} json
-* @returns {ProofPurpose}
-*/
-  static fromJSON(json: any): ProofPurpose;
-/**
-* Deep clones the object.
-* @returns {ProofPurpose}
-*/
-  clone(): ProofPurpose;
-}
-/**
-*/
-export class Receipt {
-  free(): void;
-/**
-* Returns a copy of the associated IOTA Tangle `Network`.
-* @returns {Network}
-*/
-  network(): Network;
-/**
-* Returns a copy of the message `id`.
-* @returns {string}
-*/
-  messageId(): string;
-/**
-* Returns a copy of the message `network_id`.
-* @returns {string}
-*/
-  networkId(): string;
-/**
-* Returns a copy of the message `nonce`.
-* @returns {string}
-*/
-  nonce(): string;
-/**
-* Serializes a `Receipt` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Receipt` from a JSON object.
-* @param {any} json
-* @returns {Receipt}
-*/
-  static fromJSON(json: any): Receipt;
-/**
-* Deep clones the object.
-* @returns {Receipt}
-*/
-  clone(): Receipt;
-}
-/**
-* An IOTA DID document resolved from the Tangle. Represents an integration chain message possibly
-* merged with one or more `DiffMessages`.
-*/
-export class ResolvedDocument {
-  free(): void;
-/**
-* Attempts to merge changes from a `DiffMessage` into this document and
-* updates the `ResolvedDocument::diffMessageId`.
-*
-* If merging fails the document remains unmodified, otherwise this represents
-* the merged document state.
-*
-* See `Document::mergeDiff`.
-*
-* # Errors
-*
-* Fails if the merge operation or signature verification on the diff fails.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {DiffMessage} diff_message
-*/
-  mergeDiffMessage(diff_message: DiffMessage): void;
-/**
-* Returns a copy of the inner DID document.
-*
-* NOTE: If the `ResolvedDocument` is no longer needed after calling this method
-* then consider using `intoDocument()` for efficiency.
-* @returns {Document}
-*/
-  document(): Document;
-/**
-* Consumes this object and returns the inner DID document.
-*
-* NOTE: trying to use the `ResolvedDocument` after calling this will throw an error.
-* @returns {Document}
-*/
-  intoDocument(): Document;
-/**
-* Returns a copy of the diff chain message id.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @returns {string}
-*/
-  diffMessageId(): string;
-/**
-* Sets the diff chain message id.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {string} value
-*/
-  setDiffMessageId(value: string): void;
-/**
-* Returns a copy of the integration chain message id.
-* @returns {string}
-*/
-  integrationMessageId(): string;
-/**
-* Sets the integration chain message id.
-* @param {string} value
-*/
-  setIntegrationMessageId(value: string): void;
-/**
-* Serializes a `Document` object as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Document` object from a JSON object.
-* @param {any} json
-* @returns {ResolvedDocument}
-*/
-  static fromJSON(json: any): ResolvedDocument;
-/**
-* Deep clones the object.
-* @returns {ResolvedDocument}
-*/
-  clone(): ResolvedDocument;
-}
-/**
-*/
-export class Resolver {
-  free(): void;
-/**
-* Constructs a new `Resolver` with a default `Client` for
-* the `Mainnet`.
-*/
-  constructor();
-/**
-* Returns a {@link ResolverBuilder} to construct a new `Resolver`.
-* @returns {ResolverBuilder}
-*/
-  static builder(): ResolverBuilder;
-/**
-* Returns the `Client` corresponding to the given network name if one exists.
-* @param {string} network_name
-* @returns {Client | undefined}
-*/
-  getClient(network_name: string): Client | undefined;
-/**
-* Fetches the `Document` of the given `DID`.
-* @param {DID | string} did
-* @returns {Promise<ResolvedDocument>}
-*/
-  resolve(did: DID | string): Promise<ResolvedDocument>;
-/**
-* Fetches the `DocumentHistory` of the given `DID`.
-* @param {DID | string} did
-* @returns {Promise<DocumentHistory>}
-*/
-  resolveHistory(did: DID | string): Promise<DocumentHistory>;
-/**
-* Returns the `DiffChainHistory` of a diff chain starting from a `Document` on the
-* integration chain.
-*
-* NOTE: the document must have been published to the Tangle and have a valid message id.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-* @param {ResolvedDocument} document
-* @returns {Promise<DiffChainHistory>}
-*/
-  resolveDiffHistory(document: ResolvedDocument): Promise<DiffChainHistory>;
-/**
-* Fetches the DID Document of the issuer on a `Credential`.
-*
-* ### Errors
-*
-* Errors if the issuer URL is not a valid `DID` or document resolution fails.
-* @param {Credential} credential
-* @returns {Promise<ResolvedDocument>}
-*/
-  resolveCredentialIssuer(credential: Credential): Promise<ResolvedDocument>;
-/**
-* Fetches all DID Documents of `Credential` issuers contained in a `Presentation`.
-* Issuer documents are returned in arbitrary order.
-*
-* ### Errors
-*
-* Errors if any issuer URL is not a valid `DID` or document resolution fails.
-* @param {Presentation} presentation
-* @returns {Promise<Array<ResolvedDocument>>}
-*/
-  resolvePresentationIssuers(presentation: Presentation): Promise<Array<ResolvedDocument>>;
-/**
-* Fetches the DID Document of the holder of a `Presentation`.
-*
-* ### Errors
-*
-* Errors if the holder URL is missing, is not a valid `DID`, or document resolution fails.
-* @param {Presentation} presentation
-* @returns {Promise<ResolvedDocument>}
-*/
-  resolvePresentationHolder(presentation: Presentation): Promise<ResolvedDocument>;
-/**
-* Verifies a `Presentation`.
-*
-* ### Important
-* See `PresentationValidator::validate` for information about which properties get
-* validated and what is expected of the optional arguments `holder` and `issuer`.
-*
-* ### Resolution
-* The DID Documents for the `holder` and `issuers` are optionally resolved if not given.
-* If you already have up-to-date versions of these DID Documents, you may want
-* to use `PresentationValidator::validate`.
-* See also `Resolver::resolvePresentationIssuers` and `Resolver::resolvePresentationHolder`.
-*
-* ### Errors
-* Errors from resolving the holder and issuer DID Documents, if not provided, will be returned immediately.
-* Otherwise, errors from validating the presentation and its credentials will be returned
-* according to the `fail_fast` parameter.
-* @param {Presentation} presentation
-* @param {PresentationValidationOptions} options
-* @param {number} fail_fast
-* @param {ResolvedDocument | undefined} holder
-* @param {Array<ResolvedDocument> | undefined} issuers
-* @returns {Promise<void>}
-*/
-  verifyPresentation(presentation: Presentation, options: PresentationValidationOptions, fail_fast: number, holder?: ResolvedDocument, issuers?: Array<ResolvedDocument>): Promise<void>;
-}
-/**
-* Builder for configuring [`Clients`][Client] when constructing a [`Resolver`].
-*/
-export class ResolverBuilder {
-  free(): void;
-/**
-* Constructs a new `ResolverBuilder` with no `Clients` configured.
-*/
-  constructor();
-/**
-* Inserts a `Client`.
-*
-* NOTE: replaces any previous `Client` or `Config` with the same network name.
-* @param {Client} client
-* @returns {ResolverBuilder}
-*/
-  client(client: Client): ResolverBuilder;
-/**
-* Inserts a `Config` used to create a `Client`.
-*
-* NOTE: replaces any previous `Client` or `Config` with the same network name.
-* @param {IClientConfig} config
-* @returns {ResolverBuilder}
-*/
-  clientConfig(config: IClientConfig): ResolverBuilder;
-/**
-* Constructs a new [`Resolver`] based on the builder configuration.
-* @returns {Promise<Resolver>}
-*/
-  build(): Promise<Resolver>;
-}
-/**
-* A compressed bitmap for managing credential revocation.
-*/
-export class RevocationBitmap {
-  free(): void;
-/**
-* Creates a new `RevocationBitmap` instance.
-*/
-  constructor();
-/**
-* The name of the service type.
-* @returns {string}
-*/
-  static type(): string;
-/**
-* Returns `true` if the credential at the given `index` is revoked.
-* @param {number} index
-* @returns {boolean}
-*/
-  isRevoked(index: number): boolean;
-/**
-* Mark the given index as revoked.
-*
-* Returns true if the index was absent from the set.
-* @param {number} index
-* @returns {boolean}
-*/
-  revoke(index: number): boolean;
-/**
-* Mark the index as not revoked.
-*
-* Returns true if the index was present in the set.
-* @param {number} index
-* @returns {boolean}
-*/
-  unrevoke(index: number): boolean;
-/**
-* Returns the number of revoked credentials.
-* @returns {number}
-*/
-  len(): number;
-/**
-* Return the bitmap as a data url embedded in a service endpoint.
-* @returns {string | string[] | Map<string, string[]>}
-*/
-  toEndpoint(): string | string[] | Map<string, string[]>;
-/**
-* Construct a `RevocationBitmap` from a data `url`.
-* @param {string | string[] | Map<string, string[]>} endpoint
-* @returns {RevocationBitmap}
-*/
-  static fromEndpoint(endpoint: string | string[] | Map<string, string[]>): RevocationBitmap;
-}
-/**
-* A DID Document Service used to enable trusted interactions associated
-* with a DID subject.
-*
-* See: https://www.w3.org/TR/did-core/#services
-*/
-export class Service {
-  free(): void;
-/**
-* @param {IService} service
-*/
-  constructor(service: IService);
-/**
-* Returns a copy of the `Service` id.
-* @returns {DIDUrl}
-*/
-  id(): DIDUrl;
-/**
-* Returns a copy of the `Service` type.
-* @returns {string}
-*/
-  type(): string;
-/**
-* Returns a copy of the `Service` endpoint.
-* @returns {string | string[] | Map<string, string[]>}
-*/
-  serviceEndpoint(): string | string[] | Map<string, string[]>;
-/**
-* Returns a copy of the custom properties on the `Service`.
-* @returns {Map<string, any>}
-*/
-  properties(): Map<string, any>;
-/**
-* Serializes a `Service` object as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Service` object from a JSON object.
-* @param {any} value
-* @returns {Service}
-*/
-  static fromJSON(value: any): Service;
-/**
-* Deep clones the object.
-* @returns {Service}
-*/
-  clone(): Service;
-}
-/**
-*/
-export class Signature {
-  free(): void;
-/**
-* Creates a new `Signature`.
-* @param {Uint8Array} data
-*/
-  constructor(data: Uint8Array);
-/**
-* Returns a copy of the signature as a `UInt8Array`.
-* @returns {Uint8Array}
-*/
-  asBytes(): Uint8Array;
-/**
-* Serializes a `Signature` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a JSON object as `Signature`.
-* @param {any} json_value
-* @returns {Signature}
-*/
-  static fromJSON(json_value: any): Signature;
-}
-/**
-* A test suite for the `Storage` interface.
-*
-* This module contains a set of tests that a correct storage implementation
-* should pass. Note that not every edge case is tested.
-*
-* Tests usually rely on multiple interface methods being implemented, so they should only
-* be run on a fully implemented version. That's why there is not a single test case for every
-* interface method.
-*/
-export class StorageTestSuite {
-  free(): void;
-/**
-* @param {Storage} storage
-* @returns {Promise<void>}
-*/
-  static didCreateGenerateKeyTest(storage: Storage): Promise<void>;
-/**
-* @param {Storage} storage
-* @returns {Promise<void>}
-*/
-  static didCreatePrivateKeyTest(storage: Storage): Promise<void>;
-/**
-* @param {Storage} storage
-* @returns {Promise<void>}
-*/
-  static didListTest(storage: Storage): Promise<void>;
-/**
-* @param {Storage} storage
-* @returns {Promise<void>}
-*/
-  static didPurgeTest(storage: Storage): Promise<void>;
-/**
-* @param {Storage} storage
-* @returns {Promise<void>}
-*/
-  static keyGenerateTest(storage: Storage): Promise<void>;
-/**
-* @param {Storage} storage
-* @returns {Promise<void>}
-*/
-  static keyDeleteTest(storage: Storage): Promise<void>;
-/**
-* @param {Storage} storage
-* @returns {Promise<void>}
-*/
-  static keyInsertTest(storage: Storage): Promise<void>;
-/**
-* @param {Storage} storage
-* @returns {Promise<void>}
-*/
-  static keySignEd25519Test(storage: Storage): Promise<void>;
-/**
-* @param {Storage} alice_storage
-* @param {Storage} bob_storage
-* @returns {Promise<void>}
-*/
-  static encryptionTest(alice_storage: Storage, bob_storage: Storage): Promise<void>;
-}
-/**
-*/
-export class Timestamp {
-  free(): void;
-/**
-* Parses a `Timestamp` from the provided input string.
-* @param {string} input
-* @returns {Timestamp}
-*/
-  static parse(input: string): Timestamp;
-/**
-* Creates a new `Timestamp` with the current date and time.
-* @returns {Timestamp}
-*/
-  static nowUTC(): Timestamp;
-/**
-* Returns the `Timestamp` as an RFC 3339 `String`.
-* @returns {string}
-*/
-  toRFC3339(): string;
-/**
-* Computes `self + duration`
-*
-* Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).
-* @param {Duration} duration
-* @returns {Timestamp | undefined}
-*/
-  checkedAdd(duration: Duration): Timestamp | undefined;
-/**
-* Computes `self - duration`
-*
-* Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).
-* @param {Duration} duration
-* @returns {Timestamp | undefined}
-*/
-  checkedSub(duration: Duration): Timestamp | undefined;
-/**
-* Serializes a `Timestamp` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `Timestamp` from a JSON object.
-* @param {any} json
-* @returns {Timestamp}
-*/
-  static fromJSON(json: any): Timestamp;
-}
-/**
-*/
-export class VerificationMethod {
-  free(): void;
-/**
-* Creates a new `VerificationMethod` object from the given `did` and public key.
-* @param {DID} did
-* @param {number} key_type
-* @param {Uint8Array} public_key
-* @param {string} fragment
-*/
-  constructor(did: DID, key_type: number, public_key: Uint8Array, fragment: string);
-/**
-* Returns a copy of the `id` `DIDUrl` of the `VerificationMethod` object.
-* @returns {DIDUrl}
-*/
-  id(): DIDUrl;
-/**
-* Returns a copy of the `controller` `DID` of the `VerificationMethod` object.
-* @returns {DID}
-*/
-  controller(): DID;
-/**
-* Sets the `controller` `DID` of the `VerificationMethod` object.
-* @param {DID} did
-*/
-  SetController(did: DID): void;
-/**
-* Returns a copy of the `VerificationMethod` type.
-* @returns {MethodType}
-*/
-  type(): MethodType;
-/**
-* Returns a copy of the `VerificationMethod` public key data.
-* @returns {MethodData}
-*/
-  data(): MethodData;
-/**
-* Serializes a `VerificationMethod` object as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `VerificationMethod` object from a JSON object.
-* @param {any} value
-* @returns {VerificationMethod}
-*/
-  static fromJSON(value: any): VerificationMethod;
-/**
-* Deep clones the object.
-* @returns {VerificationMethod}
-*/
-  clone(): VerificationMethod;
-}
-/**
-* Holds additional proof verification options.
-* See `IVerifierOptions`.
-*/
-export class VerifierOptions {
-  free(): void;
-/**
-* Creates a new `VerifierOptions` from the given fields.
-*
-* Throws an error if any of the options are invalid.
-* @param {IVerifierOptions} options
-*/
-  constructor(options: IVerifierOptions);
-/**
-* Creates a new `VerifierOptions` with default options.
-* @returns {VerifierOptions}
-*/
-  static default(): VerifierOptions;
-/**
-* Serializes a `VerifierOptions` as a JSON object.
-* @returns {any}
-*/
-  toJSON(): any;
-/**
-* Deserializes a `VerifierOptions` from a JSON object.
-* @param {any} json
-* @returns {VerifierOptions}
-*/
-  static fromJSON(json: any): VerifierOptions;
-/**
-* Deep clones the object.
-* @returns {VerifierOptions}
-*/
-  clone(): VerifierOptions;
-}
-/**
-* An implementation of `X25519` Elliptic-curve Diffie-Hellman (ECDH) cryptographic key exchange.
-*/
-export class X25519 {
-  free(): void;
-/**
-* Length in bytes of an X25519 private key.
-* @returns {number}
-*/
-  static PRIVATE_KEY_LENGTH(): number;
-/**
-* Length in bytes of an X25519 public key.
-* @returns {number}
-*/
-  static PUBLIC_KEY_LENGTH(): number;
-/**
-* Performs Diffie-Hellman key exchange using the private key of the first party with the
-* public key of the second party, resulting in a shared secret.
-* @param {Uint8Array} privateKey
-* @param {Uint8Array} publicKey
-* @returns {Uint8Array}
-*/
-  static keyExchange(privateKey: Uint8Array, publicKey: Uint8Array): Uint8Array;
-/**
-* Transforms an `Ed25519` private key to an `X25519` private key.
-*
-* This is possible because Ed25519 is birationally equivalent to Curve25519 used by X25519.
-* @param {Uint8Array} privateKey
-* @returns {Uint8Array}
-*/
-  static Ed25519toX25519Private(privateKey: Uint8Array): Uint8Array;
-/**
-* Transforms an `Ed25519` public key to an `X25519` public key.
-*
-* This is possible because Ed25519 is birationally equivalent to Curve25519 used by X25519.
-* @param {Uint8Array} publicKey
-* @returns {Uint8Array}
-*/
-  static Ed25519toX25519Public(publicKey: Uint8Array): Uint8Array;
-}
-
-export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;
-
-export interface InitOutput {
-  readonly memory: WebAssembly.Memory;
-  readonly __wbg_methodcontent_free: (a: number) => void;
-  readonly methodcontent_GenerateEd25519: () => number;
-  readonly methodcontent_PrivateEd25519: (a: number, b: number) => number;
-  readonly methodcontent_PublicEd25519: (a: number, b: number) => number;
-  readonly methodcontent_GenerateX25519: () => number;
-  readonly methodcontent_PrivateX25519: (a: number, b: number) => number;
-  readonly methodcontent_PublicX25519: (a: number, b: number) => number;
-  readonly methodcontent_toJSON: (a: number, b: number) => void;
-  readonly methodcontent_fromJSON: (a: number, b: number) => void;
-  readonly account_attachMethodRelationships: (a: number, b: number, c: number) => void;
-  readonly account_createMethod: (a: number, b: number, c: number) => void;
-  readonly account_detachMethodRelationships: (a: number, b: number, c: number) => void;
-  readonly __wbg_timestamp_free: (a: number) => void;
-  readonly timestamp_parse: (a: number, b: number, c: number) => void;
-  readonly timestamp_nowUTC: () => number;
-  readonly timestamp_toRFC3339: (a: number, b: number) => void;
-  readonly timestamp_checkedAdd: (a: number, b: number) => number;
-  readonly timestamp_checkedSub: (a: number, b: number) => number;
-  readonly timestamp_toJSON: (a: number, b: number) => void;
-  readonly timestamp_fromJSON: (a: number, b: number) => void;
-  readonly __wbg_duration_free: (a: number) => void;
-  readonly duration_seconds: (a: number) => number;
-  readonly duration_minutes: (a: number) => number;
-  readonly duration_hours: (a: number) => number;
-  readonly duration_days: (a: number) => number;
-  readonly duration_weeks: (a: number) => number;
-  readonly duration_toJSON: (a: number, b: number) => void;
-  readonly duration_fromJSON: (a: number, b: number) => void;
-  readonly __wbg_keypair_free: (a: number) => void;
-  readonly keypair_new: (a: number, b: number) => void;
-  readonly keypair_fromKeys: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
-  readonly keypair_tryFromPrivateKeyBytes: (a: number, b: number, c: number, d: number) => void;
-  readonly keypair_type: (a: number) => number;
-  readonly keypair_public: (a: number, b: number) => void;
-  readonly keypair_private: (a: number, b: number) => void;
-  readonly keypair_toJSON: (a: number, b: number) => void;
-  readonly keypair_fromJSON: (a: number, b: number) => void;
-  readonly keypair_clone: (a: number) => number;
-  readonly __wbg_verifieroptions_free: (a: number) => void;
-  readonly verifieroptions_new: (a: number, b: number) => void;
-  readonly verifieroptions_default: () => number;
-  readonly verifieroptions_toJSON: (a: number, b: number) => void;
-  readonly verifieroptions_fromJSON: (a: number, b: number) => void;
-  readonly verifieroptions_clone: (a: number) => number;
-  readonly __wbg_chainstate_free: (a: number) => void;
-  readonly chainstate_toJSON: (a: number, b: number) => void;
-  readonly chainstate_fromJSON: (a: number, b: number) => void;
-  readonly __wbg_documenthistory_free: (a: number) => void;
-  readonly documenthistory_integrationChainData: (a: number) => number;
-  readonly documenthistory_integrationChainSpam: (a: number) => number;
-  readonly documenthistory_diffChainData: (a: number) => number;
-  readonly documenthistory_diffChainSpam: (a: number) => number;
-  readonly documenthistory_toJSON: (a: number, b: number) => void;
-  readonly documenthistory_fromJSON: (a: number, b: number) => void;
-  readonly documenthistory_clone: (a: number) => number;
-  readonly __wbg_integrationchainhistory_free: (a: number) => void;
-  readonly __wbg_diffchainhistory_free: (a: number) => void;
-  readonly integrationchainhistory_chainData: (a: number) => number;
-  readonly diffchainhistory_chainData: (a: number) => number;
-  readonly integrationchainhistory_spam: (a: number) => number;
-  readonly integrationchainhistory_toJSON: (a: number, b: number) => void;
-  readonly integrationchainhistory_fromJSON: (a: number, b: number) => void;
-  readonly diffchainhistory_spam: (a: number) => number;
-  readonly diffchainhistory_toJSON: (a: number, b: number) => void;
-  readonly diffchainhistory_fromJSON: (a: number, b: number) => void;
-  readonly __wbg_credentialvalidator_free: (a: number) => void;
-  readonly credentialvalidator_validate: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly credentialvalidator_checkStructure: (a: number, b: number) => void;
-  readonly credentialvalidator_checkExpiresOnOrAfter: (a: number, b: number, c: number) => void;
-  readonly credentialvalidator_checkIssuedOnOrBefore: (a: number, b: number, c: number) => void;
-  readonly credentialvalidator_verifySignature: (a: number, b: number, c: number, d: number) => void;
-  readonly credentialvalidator_check_subject_holder_relationship: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly credentialvalidator_checkStatus: (a: number, b: number, c: number, d: number) => void;
-  readonly __wbg_methoddata_free: (a: number) => void;
-  readonly methoddata_newBase58: (a: number, b: number) => number;
-  readonly methoddata_newMultibase: (a: number, b: number) => number;
-  readonly methoddata_tryDecode: (a: number, b: number) => void;
-  readonly methoddata_toJSON: (a: number, b: number) => void;
-  readonly methoddata_fromJSON: (a: number, b: number) => void;
-  readonly methoddata_clone: (a: number) => number;
-  readonly __wbg_account_free: (a: number) => void;
-  readonly account_did: (a: number) => number;
-  readonly account_autopublish: (a: number) => number;
-  readonly account_autosave: (a: number) => number;
-  readonly account_document: (a: number) => number;
-  readonly account_resolveIdentity: (a: number) => number;
-  readonly account_deleteIdentity: (a: number) => number;
-  readonly account_publish: (a: number, b: number) => number;
-  readonly account_createSignedCredential: (a: number, b: number, c: number, d: number, e: number) => number;
-  readonly account_createSignedDocument: (a: number, b: number, c: number, d: number, e: number) => number;
-  readonly account_createSignedPresentation: (a: number, b: number, c: number, d: number, e: number) => number;
-  readonly account_createSignedData: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
-  readonly account_updateDocumentUnchecked: (a: number, b: number) => number;
-  readonly account_fetchDocument: (a: number) => number;
-  readonly account_revokeCredentials: (a: number, b: number, c: number, d: number) => number;
-  readonly account_unrevokeCredentials: (a: number, b: number, c: number, d: number) => number;
-  readonly account_encryptData: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => number;
-  readonly account_decryptData: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
-  readonly __wbg_didurl_free: (a: number) => void;
-  readonly didurl_parse: (a: number, b: number, c: number) => void;
-  readonly didurl_did: (a: number) => number;
-  readonly didurl_urlStr: (a: number, b: number) => void;
-  readonly didurl_fragment: (a: number, b: number) => void;
-  readonly didurl_setFragment: (a: number, b: number, c: number, d: number) => void;
-  readonly didurl_path: (a: number, b: number) => void;
-  readonly didurl_setPath: (a: number, b: number, c: number, d: number) => void;
-  readonly didurl_query: (a: number, b: number) => void;
-  readonly didurl_setQuery: (a: number, b: number, c: number, d: number) => void;
-  readonly didurl_join: (a: number, b: number, c: number, d: number) => void;
-  readonly didurl_toString: (a: number, b: number) => void;
-  readonly didurl_toJSON: (a: number, b: number) => void;
-  readonly didurl_clone: (a: number) => number;
-  readonly __wbg_diffmessage_free: (a: number) => void;
-  readonly diffmessage_id: (a: number) => number;
-  readonly diffmessage_did: (a: number) => number;
-  readonly diffmessage_diff: (a: number, b: number) => void;
-  readonly diffmessage_messageId: (a: number, b: number) => void;
-  readonly diffmessage_setMessageId: (a: number, b: number, c: number, d: number) => void;
-  readonly diffmessage_previousMessageId: (a: number, b: number) => void;
-  readonly diffmessage_setPreviousMessageId: (a: number, b: number, c: number, d: number) => void;
-  readonly diffmessage_proof: (a: number) => number;
-  readonly diffmessage_merge: (a: number, b: number, c: number) => void;
-  readonly diffmessage_toJSON: (a: number, b: number) => void;
-  readonly diffmessage_fromJSON: (a: number, b: number) => void;
-  readonly diffmessage_clone: (a: number) => number;
-  readonly __wbg_resolver_free: (a: number) => void;
-  readonly resolver_new: (a: number) => void;
-  readonly resolver_builder: () => number;
-  readonly resolver_getClient: (a: number, b: number, c: number) => number;
-  readonly resolver_resolve: (a: number, b: number, c: number) => void;
-  readonly resolver_resolveHistory: (a: number, b: number, c: number) => void;
-  readonly resolver_resolveDiffHistory: (a: number, b: number, c: number) => void;
-  readonly resolver_resolveCredentialIssuer: (a: number, b: number, c: number) => void;
-  readonly resolver_resolvePresentationIssuers: (a: number, b: number, c: number) => void;
-  readonly resolver_resolvePresentationHolder: (a: number, b: number, c: number) => void;
-  readonly resolver_verifyPresentation: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
-  readonly __wbg_resolverbuilder_free: (a: number) => void;
-  readonly resolverbuilder_new: () => number;
-  readonly resolverbuilder_client: (a: number, b: number) => number;
-  readonly resolverbuilder_clientConfig: (a: number, b: number, c: number) => void;
-  readonly resolverbuilder_build: (a: number) => number;
-  readonly __wbg_autosave_free: (a: number) => void;
-  readonly autosave_never: () => number;
-  readonly autosave_every: () => number;
-  readonly autosave_batch: (a: number) => number;
-  readonly autosave_toJSON: (a: number, b: number) => void;
-  readonly autosave_fromJSON: (a: number, b: number) => void;
-  readonly __wbg_encrypteddata_free: (a: number) => void;
-  readonly encrypteddata_nonce: (a: number, b: number) => void;
-  readonly encrypteddata_associatedData: (a: number, b: number) => void;
-  readonly encrypteddata_ciphertext: (a: number, b: number) => void;
-  readonly encrypteddata_tag: (a: number, b: number) => void;
-  readonly encrypteddata_toJSON: (a: number, b: number) => void;
-  readonly encrypteddata_fromJSON: (a: number, b: number) => void;
-  readonly __wbg_accountbuilder_free: (a: number) => void;
-  readonly accountbuilder_new: (a: number, b: number) => void;
-  readonly accountbuilder_loadIdentity: (a: number, b: number, c: number) => void;
-  readonly accountbuilder_createIdentity: (a: number, b: number, c: number) => void;
-  readonly __wbg_did_free: (a: number) => void;
-  readonly did_new: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly did_parse: (a: number, b: number, c: number) => void;
-  readonly did_network: (a: number, b: number) => void;
-  readonly did_network_name: (a: number, b: number) => void;
-  readonly did_tag: (a: number, b: number) => void;
-  readonly did_join: (a: number, b: number, c: number, d: number) => void;
-  readonly did_toUrl: (a: number) => number;
-  readonly did_intoUrl: (a: number) => number;
-  readonly did_toString: (a: number, b: number) => void;
-  readonly did_fromJSON: (a: number, b: number) => void;
-  readonly did_toJSON: (a: number) => number;
-  readonly did_clone: (a: number) => number;
-  readonly __wbg_methodtype_free: (a: number) => void;
-  readonly methodtype_Ed25519VerificationKey2018: () => number;
-  readonly methodtype_X25519KeyAgreementKey2019: () => number;
-  readonly methodtype_toJSON: (a: number, b: number) => void;
-  readonly methodtype_fromJSON: (a: number, b: number) => void;
-  readonly methodtype_toString: (a: number, b: number) => void;
-  readonly methodtype_clone: (a: number) => number;
-  readonly account_setAlsoKnownAs: (a: number, b: number, c: number) => void;
-  readonly __wbg_proofpurpose_free: (a: number) => void;
-  readonly proofpurpose_assertionMethod: () => number;
-  readonly proofpurpose_authentication: () => number;
-  readonly proofpurpose_toJSON: (a: number, b: number) => void;
-  readonly proofpurpose_fromJSON: (a: number, b: number) => void;
-  readonly proofpurpose_clone: (a: number) => number;
-  readonly __wbg_documentmetadata_free: (a: number) => void;
-  readonly documentmetadata_created: (a: number) => number;
-  readonly documentmetadata_updated: (a: number) => number;
-  readonly documentmetadata_previous_message_id: (a: number, b: number) => void;
-  readonly documentmetadata_clone: (a: number) => number;
-  readonly __wbg_verificationmethod_free: (a: number) => void;
-  readonly verificationmethod_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
-  readonly verificationmethod_id: (a: number) => number;
-  readonly verificationmethod_controller: (a: number) => number;
-  readonly verificationmethod_SetController: (a: number, b: number) => void;
-  readonly verificationmethod_type: (a: number) => number;
-  readonly verificationmethod_data: (a: number) => number;
-  readonly verificationmethod_toJSON: (a: number, b: number) => void;
-  readonly verificationmethod_fromJSON: (a: number, b: number) => void;
-  readonly verificationmethod_clone: (a: number) => number;
-  readonly __wbg_cekalgorithm_free: (a: number) => void;
-  readonly cekalgorithm_EcdhEs: (a: number) => number;
-  readonly cekalgorithm_EcdhEsA256Kw: (a: number) => number;
-  readonly cekalgorithm_toJSON: (a: number, b: number) => void;
-  readonly cekalgorithm_fromJSON: (a: number, b: number) => void;
-  readonly account_deleteMethod: (a: number, b: number, c: number) => void;
-  readonly account_deleteService: (a: number, b: number, c: number) => void;
-  readonly account_setController: (a: number, b: number, c: number) => void;
-  readonly __wbg_ed25519_free: (a: number) => void;
-  readonly ed25519_PRIVATE_KEY_LENGTH: () => number;
-  readonly ed25519_PUBLIC_KEY_LENGTH: () => number;
-  readonly ed25519_SIGNATURE_LENGTH: () => number;
-  readonly ed25519_sign: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly ed25519_verify: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
-  readonly __wbg_proofoptions_free: (a: number) => void;
-  readonly proofoptions_new: (a: number, b: number) => void;
-  readonly proofoptions_default: () => number;
-  readonly proofoptions_clone: (a: number) => number;
-  readonly __wbg_storagetestsuite_free: (a: number) => void;
-  readonly storagetestsuite_didCreateGenerateKeyTest: (a: number) => number;
-  readonly storagetestsuite_didCreatePrivateKeyTest: (a: number) => number;
-  readonly storagetestsuite_didListTest: (a: number) => number;
-  readonly storagetestsuite_didPurgeTest: (a: number) => number;
-  readonly storagetestsuite_keyGenerateTest: (a: number) => number;
-  readonly storagetestsuite_keyDeleteTest: (a: number) => number;
-  readonly storagetestsuite_keyInsertTest: (a: number) => number;
-  readonly storagetestsuite_keySignEd25519Test: (a: number) => number;
-  readonly storagetestsuite_encryptionTest: (a: number, b: number) => number;
-  readonly __wbg_encryptionalgorithm_free: (a: number) => void;
-  readonly encryptionalgorithm_A256GCM: () => number;
-  readonly encryptionalgorithm_keyLength: (a: number) => number;
-  readonly encryptionalgorithm_toJSON: (a: number, b: number) => void;
-  readonly encryptionalgorithm_fromJSON: (a: number, b: number) => void;
-  readonly __wbg_proof_free: (a: number) => void;
-  readonly proof_type: (a: number, b: number) => void;
-  readonly proof_value: (a: number, b: number) => void;
-  readonly proof_verificationMethod: (a: number, b: number) => void;
-  readonly proof_created: (a: number) => number;
-  readonly proof_expires: (a: number) => number;
-  readonly proof_challenge: (a: number, b: number) => void;
-  readonly proof_domain: (a: number, b: number) => void;
-  readonly proof_purpose: (a: number) => number;
-  readonly proof_toJSON: (a: number, b: number) => void;
-  readonly proof_fromJSON: (a: number, b: number) => void;
-  readonly proof_clone: (a: number) => number;
-  readonly __wbg_x25519_free: (a: number) => void;
-  readonly x25519_PRIVATE_KEY_LENGTH: () => number;
-  readonly x25519_PUBLIC_KEY_LENGTH: () => number;
-  readonly x25519_keyExchange: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly x25519_Ed25519toX25519Private: (a: number, b: number, c: number) => void;
-  readonly x25519_Ed25519toX25519Public: (a: number, b: number, c: number) => void;
-  readonly __wbg_document_free: (a: number) => void;
-  readonly document_new: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
-  readonly document_fromVerificationMethod: (a: number, b: number) => void;
-  readonly document_isSigningMethodType: (a: number) => number;
-  readonly document_id: (a: number) => number;
-  readonly document_setController: (a: number, b: number, c: number) => void;
-  readonly document_controller: (a: number) => number;
-  readonly document_setAlsoKnownAs: (a: number, b: number, c: number) => void;
-  readonly document_alsoKnownAs: (a: number) => number;
-  readonly document_setPropertyUnchecked: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly document_properties: (a: number, b: number) => void;
-  readonly document_service: (a: number) => number;
-  readonly document_insertService: (a: number, b: number) => number;
-  readonly document_removeService: (a: number, b: number) => number;
-  readonly document_methods: (a: number) => number;
-  readonly document_insertMethod: (a: number, b: number, c: number, d: number) => void;
-  readonly document_removeMethod: (a: number, b: number, c: number) => void;
-  readonly document_defaultSigningMethod: (a: number, b: number) => void;
-  readonly document_resolveMethod: (a: number, b: number, c: number, d: number) => void;
-  readonly document_resolveSigningMethod: (a: number, b: number, c: number) => void;
-  readonly document_attachMethodRelationship: (a: number, b: number, c: number, d: number) => void;
-  readonly document_detachMethodRelationship: (a: number, b: number, c: number, d: number) => void;
-  readonly document_signSelf: (a: number, b: number, c: number, d: number) => void;
-  readonly document_signDocument: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly document_signCredential: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
-  readonly document_signPresentation: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
-  readonly document_signData: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
-  readonly document_verifyData: (a: number, b: number, c: number, d: number) => void;
-  readonly document_verifyDocument: (a: number, b: number, c: number) => void;
-  readonly document_verifyRootDocument: (a: number, b: number) => void;
-  readonly document_diff: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
-  readonly document_verifyDiff: (a: number, b: number, c: number) => void;
-  readonly document_mergeDiff: (a: number, b: number, c: number) => void;
-  readonly document_integrationIndex: (a: number, b: number) => void;
-  readonly document_diffIndex: (a: number, b: number, c: number) => void;
-  readonly document_metadata: (a: number) => number;
-  readonly document_metadataCreated: (a: number) => number;
-  readonly document_setMetadataCreated: (a: number, b: number, c: number) => void;
-  readonly document_metadataUpdated: (a: number) => number;
-  readonly document_setMetadataUpdated: (a: number, b: number, c: number) => void;
-  readonly document_metadataPreviousMessageId: (a: number, b: number) => void;
-  readonly document_setMetadataPreviousMessageId: (a: number, b: number, c: number, d: number) => void;
-  readonly document_proof: (a: number) => number;
-  readonly document_revokeCredentials: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly document_unrevokeCredentials: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly document_toJSON: (a: number, b: number) => void;
-  readonly document_fromJSON: (a: number, b: number) => void;
-  readonly document_clone: (a: number) => number;
-  readonly __wbg_methodscope_free: (a: number) => void;
-  readonly methodscope_VerificationMethod: () => number;
-  readonly methodscope_Authentication: () => number;
-  readonly methodscope_AssertionMethod: () => number;
-  readonly methodscope_KeyAgreement: () => number;
-  readonly methodscope_CapabilityDelegation: () => number;
-  readonly methodscope_CapabilityInvocation: () => number;
-  readonly methodscope_toString: (a: number, b: number) => void;
-  readonly methodscope_toJSON: (a: number, b: number) => void;
-  readonly methodscope_fromJSON: (a: number, b: number) => void;
-  readonly methodscope_clone: (a: number) => number;
-  readonly __wbg_credential_free: (a: number) => void;
-  readonly credential_BaseContext: (a: number) => void;
-  readonly credential_BaseType: (a: number) => void;
-  readonly credential_new: (a: number, b: number) => void;
-  readonly credential_context: (a: number, b: number) => void;
-  readonly credential_id: (a: number, b: number) => void;
-  readonly credential_type: (a: number) => number;
-  readonly credential_credentialSubject: (a: number, b: number) => void;
-  readonly credential_issuer: (a: number, b: number) => void;
-  readonly credential_issuanceDate: (a: number) => number;
-  readonly credential_expirationDate: (a: number) => number;
-  readonly credential_credentialStatus: (a: number, b: number) => void;
-  readonly credential_credentialSchema: (a: number, b: number) => void;
-  readonly credential_refreshService: (a: number, b: number) => void;
-  readonly credential_termsOfUse: (a: number, b: number) => void;
-  readonly credential_evidence: (a: number, b: number) => void;
-  readonly credential_nonTransferable: (a: number) => number;
-  readonly credential_proof: (a: number) => number;
-  readonly credential_properties: (a: number, b: number) => void;
-  readonly credential_toJSON: (a: number, b: number) => void;
-  readonly credential_fromJSON: (a: number, b: number) => void;
-  readonly credential_clone: (a: number) => number;
-  readonly __wbg_resolveddocument_free: (a: number) => void;
-  readonly resolveddocument_mergeDiffMessage: (a: number, b: number, c: number) => void;
-  readonly resolveddocument_document: (a: number) => number;
-  readonly resolveddocument_intoDocument: (a: number) => number;
-  readonly resolveddocument_diffMessageId: (a: number, b: number) => void;
-  readonly resolveddocument_setDiffMessageId: (a: number, b: number, c: number, d: number) => void;
-  readonly resolveddocument_integrationMessageId: (a: number, b: number) => void;
-  readonly resolveddocument_setIntegrationMessageId: (a: number, b: number, c: number, d: number) => void;
-  readonly resolveddocument_toJSON: (a: number, b: number) => void;
-  readonly resolveddocument_fromJSON: (a: number, b: number) => void;
-  readonly resolveddocument_clone: (a: number) => number;
-  readonly __wbg_client_free: (a: number) => void;
-  readonly client_new: (a: number) => void;
-  readonly client_fromConfig: (a: number, b: number) => void;
-  readonly client_network: (a: number) => number;
-  readonly client_publishDocument: (a: number, b: number, c: number) => void;
-  readonly client_publishDiff: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly client_publishJSON: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly client_publishJsonWithRetry: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
-  readonly client_isMessageIncluded: (a: number, b: number, c: number, d: number) => void;
-  readonly client_resolve: (a: number, b: number, c: number) => void;
-  readonly client_resolveHistory: (a: number, b: number, c: number) => void;
-  readonly client_resolveDiffHistory: (a: number, b: number, c: number) => void;
-  readonly __wbg_signature_free: (a: number) => void;
-  readonly signature_new: (a: number, b: number) => number;
-  readonly signature_asBytes: (a: number, b: number) => void;
-  readonly signature_toJSON: (a: number, b: number) => void;
-  readonly signature_fromJSON: (a: number, b: number) => void;
-  readonly __wbg_credentialvalidationoptions_free: (a: number) => void;
-  readonly credentialvalidationoptions_new: (a: number, b: number) => void;
-  readonly credentialvalidationoptions_default: () => number;
-  readonly credentialvalidationoptions_toJSON: (a: number, b: number) => void;
-  readonly credentialvalidationoptions_fromJSON: (a: number, b: number) => void;
-  readonly credentialvalidationoptions_clone: (a: number) => number;
-  readonly __wbg_presentationvalidationoptions_free: (a: number) => void;
-  readonly presentationvalidationoptions_new: (a: number, b: number) => void;
-  readonly presentationvalidationoptions_default: () => number;
-  readonly presentationvalidationoptions_toJSON: (a: number, b: number) => void;
-  readonly presentationvalidationoptions_fromJSON: (a: number, b: number) => void;
-  readonly presentationvalidationoptions_clone: (a: number) => number;
-  readonly __wbg_service_free: (a: number) => void;
-  readonly service_new: (a: number, b: number) => void;
-  readonly service_id: (a: number) => number;
-  readonly service_type: (a: number, b: number) => void;
-  readonly service_serviceEndpoint: (a: number) => number;
-  readonly service_properties: (a: number, b: number) => void;
-  readonly service_toJSON: (a: number, b: number) => void;
-  readonly service_fromJSON: (a: number, b: number) => void;
-  readonly service_clone: (a: number) => number;
-  readonly __wbg_revocationbitmap_free: (a: number) => void;
-  readonly revocationbitmap_new: () => number;
-  readonly revocationbitmap_type: (a: number) => void;
-  readonly revocationbitmap_isRevoked: (a: number, b: number) => number;
-  readonly revocationbitmap_revoke: (a: number, b: number) => number;
-  readonly revocationbitmap_unrevoke: (a: number, b: number) => number;
-  readonly revocationbitmap_len: (a: number, b: number) => void;
-  readonly revocationbitmap_toEndpoint: (a: number, b: number) => void;
-  readonly revocationbitmap_fromEndpoint: (a: number, b: number) => void;
-  readonly __wbg_receipt_free: (a: number) => void;
-  readonly receipt_network: (a: number) => number;
-  readonly receipt_messageId: (a: number, b: number) => void;
-  readonly receipt_networkId: (a: number, b: number) => void;
-  readonly receipt_nonce: (a: number, b: number) => void;
-  readonly receipt_toJSON: (a: number, b: number) => void;
-  readonly receipt_fromJSON: (a: number, b: number) => void;
-  readonly receipt_clone: (a: number) => number;
-  readonly __wbg_keylocation_free: (a: number) => void;
-  readonly keylocation_new: (a: number, b: number, c: number, d: number, e: number) => number;
-  readonly keylocation_fromVerificationMethod: (a: number, b: number) => void;
-  readonly keylocation_canonical: (a: number, b: number) => void;
-  readonly keylocation_keyType: (a: number) => number;
-  readonly keylocation_toJSON: (a: number, b: number) => void;
-  readonly keylocation_fromJSON: (a: number, b: number) => void;
-  readonly keylocation_toString: (a: number, b: number) => void;
-  readonly account_createService: (a: number, b: number, c: number) => void;
-  readonly __wbg_presentationvalidator_free: (a: number) => void;
-  readonly presentationvalidator_validate: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
-  readonly presentationvalidator_verifyPresentationSignature: (a: number, b: number, c: number, d: number) => void;
-  readonly presentationvalidator_checkStructure: (a: number, b: number) => void;
-  readonly __wbg_agreementinfo_free: (a: number) => void;
-  readonly agreementinfo_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
-  readonly agreementinfo_apu: (a: number, b: number) => void;
-  readonly agreementinfo_apv: (a: number, b: number) => void;
-  readonly agreementinfo_pubInfo: (a: number, b: number) => void;
-  readonly agreementinfo_privInfo: (a: number, b: number) => void;
-  readonly agreementinfo_toJSON: (a: number, b: number) => void;
-  readonly agreementinfo_fromJSON: (a: number, b: number) => void;
-  readonly __wbg_presentation_free: (a: number) => void;
-  readonly presentation_BaseContext: (a: number) => void;
-  readonly presentation_BaseType: (a: number) => void;
-  readonly presentation_new: (a: number, b: number) => void;
-  readonly presentation_context: (a: number, b: number) => void;
-  readonly presentation_id: (a: number, b: number) => void;
-  readonly presentation_type: (a: number) => number;
-  readonly presentation_verifiableCredential: (a: number) => number;
-  readonly presentation_holder: (a: number, b: number) => void;
-  readonly presentation_refreshService: (a: number, b: number) => void;
-  readonly presentation_termsOfUse: (a: number, b: number) => void;
-  readonly presentation_proof: (a: number) => number;
-  readonly presentation_properties: (a: number, b: number) => void;
-  readonly presentation_toJSON: (a: number, b: number) => void;
-  readonly presentation_fromJSON: (a: number, b: number) => void;
-  readonly presentation_clone: (a: number) => number;
-  readonly __wbg_explorerurl_free: (a: number) => void;
-  readonly explorerurl_parse: (a: number, b: number, c: number) => void;
-  readonly explorerurl_mainnet: () => number;
-  readonly explorerurl_devnet: () => number;
-  readonly explorerurl_messageUrl: (a: number, b: number, c: number, d: number) => void;
-  readonly explorerurl_resolverUrl: (a: number, b: number, c: number) => void;
-  readonly explorerurl_toString: (a: number, b: number) => void;
-  readonly __wbg_network_free: (a: number) => void;
-  readonly network_tryFromName: (a: number, b: number, c: number) => void;
-  readonly network_mainnet: () => number;
-  readonly network_devnet: () => number;
-  readonly network_name: (a: number, b: number) => void;
-  readonly network_defaultNodeURL: (a: number, b: number) => void;
-  readonly network_toString: (a: number, b: number) => void;
-  readonly network_toJSON: (a: number, b: number) => void;
-  readonly network_fromJSON: (a: number, b: number) => void;
-  readonly network_clone: (a: number) => number;
-  readonly start: () => void;
-  readonly BrotliDecoderCreateInstance: (a: number, b: number, c: number) => number;
-  readonly BrotliDecoderSetParameter: (a: number, b: number, c: number) => void;
-  readonly BrotliDecoderDecompressPrealloc: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number) => void;
-  readonly BrotliDecoderDecompressWithReturnInfo: (a: number, b: number, c: number, d: number, e: number) => void;
-  readonly BrotliDecoderDecompress: (a: number, b: number, c: number, d: number) => number;
-  readonly BrotliDecoderDecompressStream: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
-  readonly BrotliDecoderDecompressStreaming: (a: number, b: number, c: number, d: number, e: number) => number;
-  readonly BrotliDecoderMallocU8: (a: number, b: number) => number;
-  readonly BrotliDecoderFreeU8: (a: number, b: number, c: number) => void;
-  readonly BrotliDecoderMallocUsize: (a: number, b: number) => number;
-  readonly BrotliDecoderFreeUsize: (a: number, b: number, c: number) => void;
-  readonly BrotliDecoderDestroyInstance: (a: number) => void;
-  readonly BrotliDecoderHasMoreOutput: (a: number) => number;
-  readonly BrotliDecoderTakeOutput: (a: number, b: number) => number;
-  readonly BrotliDecoderIsUsed: (a: number) => number;
-  readonly BrotliDecoderIsFinished: (a: number) => number;
-  readonly BrotliDecoderGetErrorCode: (a: number) => number;
-  readonly BrotliDecoderGetErrorString: (a: number) => number;
-  readonly BrotliDecoderErrorString: (a: number) => number;
-  readonly BrotliDecoderVersion: () => number;
-  readonly __wbindgen_malloc: (a: number) => number;
-  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
-  readonly __wbindgen_export_2: WebAssembly.Table;
-  readonly _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hdcd0b8367bd8bfe2: (a: number, b: number, c: number) => void;
-  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4fe003293c171f86: (a: number, b: number) => void;
-  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
-  readonly __wbindgen_free: (a: number, b: number) => void;
-  readonly __wbindgen_exn_store: (a: number) => void;
-  readonly wasm_bindgen__convert__closures__invoke2_mut__hd12e749677640a32: (a: number, b: number, c: number, d: number) => void;
-  readonly __wbindgen_start: () => void;
-}
-
-/**
-* Synchronously compiles the given `bytes` and instantiates the WebAssembly module.
-*
-* @param {BufferSource} bytes
-*
-* @returns {InitOutput}
-*/
-export function initSync(bytes: BufferSource): InitOutput;
-
-/**
-* Loads the Wasm file so the lib can be used, relative path to Wasm file
-* @param {string | undefined} path
-*/
-export function init (path?: string): Promise<void>;
diff --git a/node_modules/@iota/identity-wasm/web/identity_wasm.js b/node_modules/@iota/identity-wasm/web/identity_wasm.js
deleted file mode 100644
index 644f615..0000000
--- a/node_modules/@iota/identity-wasm/web/identity_wasm.js
+++ /dev/null
@@ -1,9275 +0,0 @@
-
-let wasm;
-
-const heap = new Array(32).fill(undefined);
-
-heap.push(undefined, null, true, false);
-
-function getObject(idx) { return heap[idx]; }
-
-let heap_next = heap.length;
-
-function dropObject(idx) {
-    if (idx < 36) return;
-    heap[idx] = heap_next;
-    heap_next = idx;
-}
-
-function takeObject(idx) {
-    const ret = getObject(idx);
-    dropObject(idx);
-    return ret;
-}
-
-const cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });
-
-cachedTextDecoder.decode();
-
-let cachedUint8Memory0;
-function getUint8Memory0() {
-    if (cachedUint8Memory0.byteLength === 0) {
-        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
-    }
-    return cachedUint8Memory0;
-}
-
-function getStringFromWasm0(ptr, len) {
-    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
-}
-
-function addHeapObject(obj) {
-    if (heap_next === heap.length) heap.push(heap.length + 1);
-    const idx = heap_next;
-    heap_next = heap[idx];
-
-    heap[idx] = obj;
-    return idx;
-}
-
-let WASM_VECTOR_LEN = 0;
-
-const cachedTextEncoder = new TextEncoder('utf-8');
-
-const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
-    ? function (arg, view) {
-    return cachedTextEncoder.encodeInto(arg, view);
-}
-    : function (arg, view) {
-    const buf = cachedTextEncoder.encode(arg);
-    view.set(buf);
-    return {
-        read: arg.length,
-        written: buf.length
-    };
-});
-
-function passStringToWasm0(arg, malloc, realloc) {
-
-    if (realloc === undefined) {
-        const buf = cachedTextEncoder.encode(arg);
-        const ptr = malloc(buf.length);
-        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
-        WASM_VECTOR_LEN = buf.length;
-        return ptr;
-    }
-
-    let len = arg.length;
-    let ptr = malloc(len);
-
-    const mem = getUint8Memory0();
-
-    let offset = 0;
-
-    for (; offset < len; offset++) {
-        const code = arg.charCodeAt(offset);
-        if (code > 0x7F) break;
-        mem[ptr + offset] = code;
-    }
-
-    if (offset !== len) {
-        if (offset !== 0) {
-            arg = arg.slice(offset);
-        }
-        ptr = realloc(ptr, len, len = offset + arg.length * 3);
-        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
-        const ret = encodeString(arg, view);
-
-        offset += ret.written;
-    }
-
-    WASM_VECTOR_LEN = offset;
-    return ptr;
-}
-
-let cachedInt32Memory0;
-function getInt32Memory0() {
-    if (cachedInt32Memory0.byteLength === 0) {
-        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
-    }
-    return cachedInt32Memory0;
-}
-
-function isLikeNone(x) {
-    return x === undefined || x === null;
-}
-
-function debugString(val) {
-    // primitive types
-    const type = typeof val;
-    if (type == 'number' || type == 'boolean' || val == null) {
-        return  `${val}`;
-    }
-    if (type == 'string') {
-        return `"${val}"`;
-    }
-    if (type == 'symbol') {
-        const description = val.description;
-        if (description == null) {
-            return 'Symbol';
-        } else {
-            return `Symbol(${description})`;
-        }
-    }
-    if (type == 'function') {
-        const name = val.name;
-        if (typeof name == 'string' && name.length > 0) {
-            return `Function(${name})`;
-        } else {
-            return 'Function';
-        }
-    }
-    // objects
-    if (Array.isArray(val)) {
-        const length = val.length;
-        let debug = '[';
-        if (length > 0) {
-            debug += debugString(val[0]);
-        }
-        for(let i = 1; i < length; i++) {
-            debug += ', ' + debugString(val[i]);
-        }
-        debug += ']';
-        return debug;
-    }
-    // Test for built-in
-    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
-    let className;
-    if (builtInMatches.length > 1) {
-        className = builtInMatches[1];
-    } else {
-        // Failed to match the standard '[object ClassName]'
-        return toString.call(val);
-    }
-    if (className == 'Object') {
-        // we're a user defined class or Object
-        // JSON.stringify avoids problems with cycles, and is generally much
-        // easier than looping through ownProperties of `val`.
-        try {
-            return 'Object(' + JSON.stringify(val) + ')';
-        } catch (_) {
-            return 'Object';
-        }
-    }
-    // errors
-    if (val instanceof Error) {
-        return `${val.name}: ${val.message}\n${val.stack}`;
-    }
-    // TODO we could test for more things here, like `Set`s and `Map`s.
-    return className;
-}
-
-const CLOSURE_DTORS = new FinalizationRegistry(state => {
-    wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b)
-});
-
-function makeMutClosure(arg0, arg1, dtor, f) {
-    const state = { a: arg0, b: arg1, cnt: 1, dtor };
-    const real = (...args) => {
-        // First up with a closure we increment the internal reference
-        // count. This ensures that the Rust closure environment won't
-        // be deallocated while we're invoking it.
-        state.cnt++;
-        const a = state.a;
-        state.a = 0;
-        try {
-            return f(a, state.b, ...args);
-        } finally {
-            if (--state.cnt === 0) {
-                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);
-                CLOSURE_DTORS.unregister(state)
-            } else {
-                state.a = a;
-            }
-        }
-    };
-    real.original = state;
-    CLOSURE_DTORS.register(real, state, state);
-    return real;
-}
-function __wbg_adapter_34(arg0, arg1, arg2) {
-    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hdcd0b8367bd8bfe2(arg0, arg1, addHeapObject(arg2));
-}
-
-function __wbg_adapter_37(arg0, arg1) {
-    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4fe003293c171f86(arg0, arg1);
-}
-
-function passArray8ToWasm0(arg, malloc) {
-    const ptr = malloc(arg.length * 1);
-    getUint8Memory0().set(arg, ptr / 1);
-    WASM_VECTOR_LEN = arg.length;
-    return ptr;
-}
-
-let stack_pointer = 32;
-
-function addBorrowedObject(obj) {
-    if (stack_pointer == 1) throw new Error('out of js stack');
-    heap[--stack_pointer] = obj;
-    return stack_pointer;
-}
-
-function _assertClass(instance, klass) {
-    if (!(instance instanceof klass)) {
-        throw new Error(`expected instance of ${klass.name}`);
-    }
-    return instance.ptr;
-}
-
-function getArrayU8FromWasm0(ptr, len) {
-    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
-}
-/**
-* Initializes the console error panic hook for better error messages
-*/
-export function start() {
-    wasm.start();
-}
-
-function handleError(f, args) {
-    try {
-        return f.apply(this, args);
-    } catch (e) {
-        wasm.__wbindgen_exn_store(addHeapObject(e));
-    }
-}
-
-function notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }
-function __wbg_adapter_655(arg0, arg1, arg2, arg3) {
-    wasm.wasm_bindgen__convert__closures__invoke2_mut__hd12e749677640a32(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));
-}
-
-/**
-*/
-export const DIDMessageEncoding = Object.freeze({ Json:0,"0":"Json",JsonBrotli:1,"1":"JsonBrotli", });
-/**
-* Controls validation behaviour when checking whether or not a credential has been revoked by its
-* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status).
-*/
-export const StatusCheck = Object.freeze({
-/**
-* Validate the status if supported, reject any unsupported
-* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.
-*
-* Only `RevocationBitmap2022` is currently supported.
-*
-* This is the default.
-*/
-Strict:0,"0":"Strict",
-/**
-* Validate the status if supported, skip any unsupported
-* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.
-*/
-SkipUnsupported:1,"1":"SkipUnsupported",
-/**
-* Skip all status checks.
-*/
-SkipAll:2,"2":"SkipAll", });
-/**
-* Declares how credential subjects must relate to the presentation holder during validation.
-* See `PresentationValidationOptions::subject_holder_relationship`.
-*
-* See also the [Subject-Holder Relationship](https://www.w3.org/TR/vc-data-model/#subject-holder-relationships) section of the specification.
-*/
-export const SubjectHolderRelationship = Object.freeze({
-/**
-* The holder must always match the subject on all credentials, regardless of their [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property.
-* This variant is the default used if no other variant is specified when constructing a new
-* `PresentationValidationOptions`.
-*/
-AlwaysSubject:0,"0":"AlwaysSubject",
-/**
-* The holder must match the subject only for credentials where the [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property is `true`.
-*/
-SubjectOnNonTransferable:1,"1":"SubjectOnNonTransferable",
-/**
-* The holder is not required to have any kind of relationship to any credential subject.
-*/
-Any:2,"2":"Any", });
-/**
-* Declares when validation should return if an error occurs.
-*/
-export const FailFast = Object.freeze({
-/**
-* Return all errors that occur during validation.
-*/
-AllErrors:0,"0":"AllErrors",
-/**
-* Return after the first error occurs.
-*/
-FirstError:1,"1":"FirstError", });
-/**
-*/
-export const KeyType = Object.freeze({ Ed25519:1,"1":"Ed25519",X25519:2,"2":"X25519", });
-/**
-*/
-export const MethodRelationship = Object.freeze({ Authentication:0,"0":"Authentication",AssertionMethod:1,"1":"AssertionMethod",KeyAgreement:2,"2":"KeyAgreement",CapabilityDelegation:3,"3":"CapabilityDelegation",CapabilityInvocation:4,"4":"CapabilityInvocation", });
-
-const AccountFinalization = new FinalizationRegistry(ptr => wasm.__wbg_account_free(ptr));
-/**
-* An account manages one identity.
-*
-* It handles private keys, writing to storage and
-* publishing to the Tangle.
-*/
-export class Account {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Account.prototype);
-        obj.ptr = ptr;
-        AccountFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        AccountFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_account_free(ptr);
-    }
-    /**
-    * Attach one or more verification relationships to a method.
-    *
-    * Note: the method must exist and be in the set of verification methods;
-    * it cannot be an embedded method.
-    * @param {AttachMethodRelationshipOptions} options
-    * @returns {Promise<void>}
-    */
-    attachMethodRelationships(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.account_attachMethodRelationships(retptr, this.ptr, addBorrowedObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Adds a new verification method to the DID document.
-    * @param {CreateMethodOptions} options
-    * @returns {Promise<void>}
-    */
-    createMethod(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.account_createMethod(retptr, this.ptr, addBorrowedObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Detaches the given relationship from the given method, if the method exists.
-    * @param {DetachMethodRelationshipOptions} options
-    * @returns {Promise<void>}
-    */
-    detachMethodRelationships(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.account_detachMethodRelationships(retptr, this.ptr, addBorrowedObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Returns the {@link DID} of the managed identity.
-    * @returns {DID}
-    */
-    did() {
-        const ret = wasm.account_did(this.ptr);
-        return DID.__wrap(ret);
-    }
-    /**
-    * Returns whether auto-publish is enabled.
-    * @returns {boolean}
-    */
-    autopublish() {
-        const ret = wasm.account_autopublish(this.ptr);
-        return ret !== 0;
-    }
-    /**
-    * Returns the auto-save configuration value.
-    * @returns {AutoSave}
-    */
-    autosave() {
-        const ret = wasm.account_autosave(this.ptr);
-        return AutoSave.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the document managed by the `Account`.
-    *
-    * Note: the returned document only has a valid signature after publishing an integration chain update.
-    * In general, for use cases where the signature is required, it is advisable to resolve the
-    * document from the Tangle.
-    * @returns {Document}
-    */
-    document() {
-        const ret = wasm.account_document(this.ptr);
-        return Document.__wrap(ret);
-    }
-    /**
-    * Resolves the DID Document associated with this `Account` from the Tangle.
-    * @returns {Promise<ResolvedDocument>}
-    */
-    resolveIdentity() {
-        const ret = wasm.account_resolveIdentity(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Removes the identity from the local storage entirely.
-    *
-    * Note: This will remove all associated document updates and key material - recovery is NOT POSSIBLE!
-    * @returns {Promise<void>}
-    */
-    deleteIdentity() {
-        const ptr = this.__destroy_into_raw();
-        const ret = wasm.account_deleteIdentity(ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Push all unpublished changes to the tangle in a single message.
-    * @param {PublishOptions | undefined} publish_options
-    * @returns {Promise<void>}
-    */
-    publish(publish_options) {
-        const ret = wasm.account_publish(this.ptr, isLikeNone(publish_options) ? 0 : addHeapObject(publish_options));
-        return takeObject(ret);
-    }
-    /**
-    * Signs a {@link Credential} with the key specified by `fragment`.
-    * @param {string} fragment
-    * @param {Credential} credential
-    * @param {ProofOptions} options
-    * @returns {Promise<Credential>}
-    */
-    createSignedCredential(fragment, credential, options) {
-        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        _assertClass(credential, Credential);
-        _assertClass(options, ProofOptions);
-        const ret = wasm.account_createSignedCredential(this.ptr, ptr0, len0, credential.ptr, options.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Signs a {@link Document} with the key specified by `fragment`.
-    * @param {string} fragment
-    * @param {Document} document
-    * @param {ProofOptions} options
-    * @returns {Promise<Document>}
-    */
-    createSignedDocument(fragment, document, options) {
-        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        _assertClass(document, Document);
-        _assertClass(options, ProofOptions);
-        const ret = wasm.account_createSignedDocument(this.ptr, ptr0, len0, document.ptr, options.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Signs a {@link Presentation} the key specified by `fragment`.
-    * @param {string} fragment
-    * @param {Presentation} presentation
-    * @param {ProofOptions} options
-    * @returns {Promise<Presentation>}
-    */
-    createSignedPresentation(fragment, presentation, options) {
-        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        _assertClass(presentation, Presentation);
-        _assertClass(options, ProofOptions);
-        const ret = wasm.account_createSignedPresentation(this.ptr, ptr0, len0, presentation.ptr, options.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Signs arbitrary `data` with the key specified by `fragment`.
-    * @param {string} fragment
-    * @param {any} data
-    * @param {ProofOptions} options
-    * @returns {Promise<any>}
-    */
-    createSignedData(fragment, data, options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            _assertClass(options, ProofOptions);
-            wasm.account_createSignedData(retptr, this.ptr, ptr0, len0, addBorrowedObject(data), options.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Overwrites the {@link Document} this account manages, **without doing any validation**.
-    *
-    * ### WARNING
-    *
-    * This method is dangerous and can easily corrupt the internal state,
-    * potentially making the identity unusable. Only call this if you fully
-    * understand the implications!
-    * @param {Document} document
-    * @returns {Promise<void>}
-    */
-    updateDocumentUnchecked(document) {
-        _assertClass(document, Document);
-        const ret = wasm.account_updateDocumentUnchecked(this.ptr, document.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Fetches the latest changes from the tangle and **overwrites** the local document.
-    *
-    * If a DID is managed from distributed accounts, this should be called before making changes
-    * to the identity, to avoid publishing updates that would be ignored.
-    * @returns {Promise<void>}
-    */
-    fetchDocument() {
-        const ret = wasm.account_fetchDocument(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * If the document has a `RevocationBitmap` service identified by `fragment`,
-    * revoke all credentials with a `revocationBitmapIndex` in `credentialIndices`.
-    * @param {string} fragment
-    * @param {number | number[]} credentialIndices
-    * @returns {Promise<void>}
-    */
-    revokeCredentials(fragment, credentialIndices) {
-        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.account_revokeCredentials(this.ptr, ptr0, len0, addHeapObject(credentialIndices));
-        return takeObject(ret);
-    }
-    /**
-    * If the document has a `RevocationBitmap` service identified by `fragment`,
-    * unrevoke all credentials with a `revocationBitmapIndex` in `credentialIndices`.
-    * @param {string} fragment
-    * @param {number | number[]} credentialIndices
-    * @returns {Promise<void>}
-    */
-    unrevokeCredentials(fragment, credentialIndices) {
-        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.account_unrevokeCredentials(this.ptr, ptr0, len0, addHeapObject(credentialIndices));
-        return takeObject(ret);
-    }
-    /**
-    * Encrypts the given `plaintext` with the specified `encryption_algorithm` and `cek_algorithm`.
-    *
-    * Returns an [`EncryptedData`] instance.
-    * @param {Uint8Array} plaintext
-    * @param {Uint8Array} associated_data
-    * @param {EncryptionAlgorithm} encryption_algorithm
-    * @param {CekAlgorithm} cek_algorithm
-    * @param {Uint8Array} public_key
-    * @returns {Promise<EncryptedData>}
-    */
-    encryptData(plaintext, associated_data, encryption_algorithm, cek_algorithm, public_key) {
-        const ptr0 = passArray8ToWasm0(plaintext, wasm.__wbindgen_malloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ptr1 = passArray8ToWasm0(associated_data, wasm.__wbindgen_malloc);
-        const len1 = WASM_VECTOR_LEN;
-        _assertClass(encryption_algorithm, EncryptionAlgorithm);
-        _assertClass(cek_algorithm, CekAlgorithm);
-        const ptr2 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);
-        const len2 = WASM_VECTOR_LEN;
-        const ret = wasm.account_encryptData(this.ptr, ptr0, len0, ptr1, len1, encryption_algorithm.ptr, cek_algorithm.ptr, ptr2, len2);
-        return takeObject(ret);
-    }
-    /**
-    * Decrypts the given `data` with the key identified by `fragment` using the given `encryption_algorithm` and
-    * `cek_algorithm`.
-    *
-    * Returns the decrypted text.
-    * @param {EncryptedData} data
-    * @param {EncryptionAlgorithm} encryption_algorithm
-    * @param {CekAlgorithm} cek_algorithm
-    * @param {string} fragment
-    * @returns {Promise<Uint8Array>}
-    */
-    decryptData(data, encryption_algorithm, cek_algorithm, fragment) {
-        _assertClass(data, EncryptedData);
-        _assertClass(encryption_algorithm, EncryptionAlgorithm);
-        _assertClass(cek_algorithm, CekAlgorithm);
-        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.account_decryptData(this.ptr, data.ptr, encryption_algorithm.ptr, cek_algorithm.ptr, ptr0, len0);
-        return takeObject(ret);
-    }
-    /**
-    * Sets the `alsoKnownAs` property in the DID document.
-    * @param {SetAlsoKnownAsOptions} options
-    * @returns {Promise<void>}
-    */
-    setAlsoKnownAs(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.account_setAlsoKnownAs(retptr, this.ptr, addBorrowedObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deletes a verification method if the method exists.
-    * @param {DeleteMethodOptions} options
-    * @returns {Promise<void>}
-    */
-    deleteMethod(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.account_deleteMethod(retptr, this.ptr, addBorrowedObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deletes a Service if it exists.
-    * @param {DeleteServiceOptions} options
-    * @returns {Promise<void>}
-    */
-    deleteService(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.account_deleteService(retptr, this.ptr, addBorrowedObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Sets the controllers of the DID document.
-    * @param {SetControllerOptions} options
-    * @returns {Promise<void>}
-    */
-    setController(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.account_setController(retptr, this.ptr, addBorrowedObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Adds a new Service to the DID Document.
-    * @param {CreateServiceOptions} options
-    * @returns {Promise<void>}
-    */
-    createService(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.account_createService(retptr, this.ptr, addBorrowedObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-}
-
-const AccountBuilderFinalization = new FinalizationRegistry(ptr => wasm.__wbg_accountbuilder_free(ptr));
-/**
-* An [`Account`] builder for easy account configuration.
-*
-* To reduce memory usage, accounts created from the same builder share the same `Storage`
-* used to store identities, and the same {@link Client} used to publish identities to the Tangle.
-*
-* The configuration on the other hand is cloned, and therefore unique for each built account.
-* This means a builder can be reconfigured in-between account creations, without affecting
-* the configuration of previously built accounts.
-*/
-export class AccountBuilder {
-
-    static __wrap(ptr) {
-        const obj = Object.create(AccountBuilder.prototype);
-        obj.ptr = ptr;
-        AccountBuilderFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        AccountBuilderFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_accountbuilder_free(ptr);
-    }
-    /**
-    * Creates a new `AccountBuilder`.
-    * @param {AccountBuilderOptions | undefined} options
-    */
-    constructor(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.accountbuilder_new(retptr, isLikeNone(options) ? 0 : addHeapObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return AccountBuilder.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Loads an existing identity with the specified `did` using the current builder configuration.
-    * The identity must exist in the configured `Storage`.
-    * @param {DID} did
-    * @returns {Promise<Account>}
-    */
-    loadIdentity(did) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(did, DID);
-            wasm.accountbuilder_loadIdentity(retptr, this.ptr, did.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Creates a new identity based on the builder configuration and returns
-    * an {@link Account} object to manage it.
-    *
-    * The identity is stored locally in the `Storage`. The DID network is automatically determined
-    * by the {@link Client} used to publish it.
-    *
-    * @See {@link IdentitySetup} to customize the identity creation.
-    * @param {IdentitySetup | undefined} identity_setup
-    * @returns {Promise<Account>}
-    */
-    createIdentity(identity_setup) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.accountbuilder_createIdentity(retptr, this.ptr, isLikeNone(identity_setup) ? 0 : addHeapObject(identity_setup));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const AgreementInfoFinalization = new FinalizationRegistry(ptr => wasm.__wbg_agreementinfo_free(ptr));
-/**
-* Agreement information used as the input for the concat KDF.
-*/
-export class AgreementInfo {
-
-    static __wrap(ptr) {
-        const obj = Object.create(AgreementInfo.prototype);
-        obj.ptr = ptr;
-        AgreementInfoFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        AgreementInfoFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_agreementinfo_free(ptr);
-    }
-    /**
-    * Creates an `AgreementInfo` Object.
-    * @param {Uint8Array} apu
-    * @param {Uint8Array} apv
-    * @param {Uint8Array} pub_info
-    * @param {Uint8Array} priv_info
-    */
-    constructor(apu, apv, pub_info, priv_info) {
-        const ptr0 = passArray8ToWasm0(apu, wasm.__wbindgen_malloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ptr1 = passArray8ToWasm0(apv, wasm.__wbindgen_malloc);
-        const len1 = WASM_VECTOR_LEN;
-        const ptr2 = passArray8ToWasm0(pub_info, wasm.__wbindgen_malloc);
-        const len2 = WASM_VECTOR_LEN;
-        const ptr3 = passArray8ToWasm0(priv_info, wasm.__wbindgen_malloc);
-        const len3 = WASM_VECTOR_LEN;
-        const ret = wasm.agreementinfo_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
-        return AgreementInfo.__wrap(ret);
-    }
-    /**
-    * Returns a copy of `apu'
-    * @returns {Uint8Array}
-    */
-    apu() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.agreementinfo_apu(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of `apv'
-    * @returns {Uint8Array}
-    */
-    apv() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.agreementinfo_apv(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of `pubInfo'
-    * @returns {Uint8Array}
-    */
-    pubInfo() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.agreementinfo_pubInfo(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of `privInfo'
-    * @returns {Uint8Array}
-    */
-    privInfo() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.agreementinfo_privInfo(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes `AgreementInfo` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.agreementinfo_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes `AgreementInfo` from a JSON object.
-    * @param {any} json_value
-    * @returns {AgreementInfo}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.agreementinfo_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return AgreementInfo.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const AutoSaveFinalization = new FinalizationRegistry(ptr => wasm.__wbg_autosave_free(ptr));
-/**
-*/
-export class AutoSave {
-
-    static __wrap(ptr) {
-        const obj = Object.create(AutoSave.prototype);
-        obj.ptr = ptr;
-        AutoSaveFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        AutoSaveFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_autosave_free(ptr);
-    }
-    /**
-    * Never save.
-    * @returns {AutoSave}
-    */
-    static never() {
-        const ret = wasm.autosave_never();
-        return AutoSave.__wrap(ret);
-    }
-    /**
-    * Save after every action.
-    * @returns {AutoSave}
-    */
-    static every() {
-        const ret = wasm.autosave_every();
-        return AutoSave.__wrap(ret);
-    }
-    /**
-    * Save after every N actions.
-    * @param {number} number_of_actions
-    * @returns {AutoSave}
-    */
-    static batch(number_of_actions) {
-        const ret = wasm.autosave_batch(number_of_actions);
-        return AutoSave.__wrap(ret);
-    }
-    /**
-    * Serializes `AutoSave` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.autosave_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes `AutoSave` from a JSON object.
-    * @param {any} json_value
-    * @returns {AutoSave}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.autosave_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return AutoSave.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const CekAlgorithmFinalization = new FinalizationRegistry(ptr => wasm.__wbg_cekalgorithm_free(ptr));
-/**
-* Supported algorithms used to determine and potentially encrypt the content encryption key (CEK).
-*/
-export class CekAlgorithm {
-
-    static __wrap(ptr) {
-        const obj = Object.create(CekAlgorithm.prototype);
-        obj.ptr = ptr;
-        CekAlgorithmFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        CekAlgorithmFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_cekalgorithm_free(ptr);
-    }
-    /**
-    * Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF.
-    * @param {AgreementInfo} agreement
-    * @returns {CekAlgorithm}
-    */
-    static EcdhEs(agreement) {
-        _assertClass(agreement, AgreementInfo);
-        const ret = wasm.cekalgorithm_EcdhEs(agreement.ptr);
-        return CekAlgorithm.__wrap(ret);
-    }
-    /**
-    * Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF.
-    * @param {AgreementInfo} agreement
-    * @returns {CekAlgorithm}
-    */
-    static EcdhEsA256Kw(agreement) {
-        _assertClass(agreement, AgreementInfo);
-        const ret = wasm.cekalgorithm_EcdhEsA256Kw(agreement.ptr);
-        return CekAlgorithm.__wrap(ret);
-    }
-    /**
-    * Serializes `CekAlgorithm` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.cekalgorithm_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes `CekAlgorithm` from a JSON object.
-    * @param {any} json_value
-    * @returns {CekAlgorithm}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.cekalgorithm_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return CekAlgorithm.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const ChainStateFinalization = new FinalizationRegistry(ptr => wasm.__wbg_chainstate_free(ptr));
-/**
-*/
-export class ChainState {
-
-    static __wrap(ptr) {
-        const obj = Object.create(ChainState.prototype);
-        obj.ptr = ptr;
-        ChainStateFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ChainStateFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_chainstate_free(ptr);
-    }
-    /**
-    * Serializes a `ChainState` object as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.chainstate_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a JSON object as `ChainState`.
-    * @param {any} json_value
-    * @returns {ChainState}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.chainstate_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return ChainState.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const ClientFinalization = new FinalizationRegistry(ptr => wasm.__wbg_client_free(ptr));
-/**
-*/
-export class Client {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Client.prototype);
-        obj.ptr = ptr;
-        ClientFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ClientFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_client_free(ptr);
-    }
-    /**
-    * Creates a new `Client` with default settings.
-    */
-    constructor() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.client_new(retptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Client.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Creates a new `Client` with the given settings.
-    * @param {IClientConfig} config
-    * @returns {Promise<Client>}
-    */
-    static fromConfig(config) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.client_fromConfig(retptr, addHeapObject(config));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the `Client` Tangle network.
-    * @returns {Network}
-    */
-    network() {
-        const ret = wasm.client_network(this.ptr);
-        return Network.__wrap(ret);
-    }
-    /**
-    * Publishes a {@link Document} to the Tangle.
-    * @param {Document} document
-    * @returns {Promise<Receipt>}
-    */
-    publishDocument(document) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(document, Document);
-            wasm.client_publishDocument(retptr, this.ptr, document.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Publishes a `DiffMessage` to the Tangle.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {string} message_id
-    * @param {DiffMessage} diff
-    * @returns {Promise<Receipt>}
-    */
-    publishDiff(message_id, diff) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            _assertClass(diff, DiffMessage);
-            wasm.client_publishDiff(retptr, this.ptr, ptr0, len0, diff.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Publishes arbitrary JSON data to the specified index on the Tangle.
-    * @param {string} index
-    * @param {any} data
-    * @returns {Promise<Receipt>}
-    */
-    publishJSON(index, data) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(index, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.client_publishJSON(retptr, this.ptr, ptr0, len0, addBorrowedObject(data));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Publishes arbitrary JSON data to the specified index on the Tangle.
-    * Retries (promotes or reattaches) the message until it’s included (referenced by a milestone).
-    * Default interval is 5 seconds and max attempts is 40.
-    * @param {string} index
-    * @param {any} data
-    * @param {number | undefined} interval
-    * @param {number | undefined} max_attempts
-    * @returns {Promise<any>}
-    */
-    publishJsonWithRetry(index, data, interval, max_attempts) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(index, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.client_publishJsonWithRetry(retptr, this.ptr, ptr0, len0, addBorrowedObject(data), !isLikeNone(interval), isLikeNone(interval) ? 0 : interval, !isLikeNone(max_attempts), isLikeNone(max_attempts) ? 0 : max_attempts);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Checks if a message is confirmed by a milestone.
-    * @param {string} messageId
-    * @returns {Promise<boolean>}
-    */
-    isMessageIncluded(messageId) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(messageId, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.client_isMessageIncluded(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Fetch the DID document specified by the given `DID`.
-    * @param {DID | string} did
-    * @returns {Promise<ResolvedDocument>}
-    */
-    resolve(did) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.client_resolve(retptr, this.ptr, addHeapObject(did));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the message history of the given DID.
-    * @param {DID | string} did
-    * @returns {Promise<DocumentHistory>}
-    */
-    resolveHistory(did) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.client_resolveHistory(retptr, this.ptr, addHeapObject(did));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the `DiffChainHistory` of a diff chain starting from a document on the
-    * integration chain.
-    *
-    * NOTE: the document must have been published to the tangle and have a valid message id and
-    * capability invocation method.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {ResolvedDocument} document
-    * @returns {Promise<DiffChainHistory>}
-    */
-    resolveDiffHistory(document) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(document, ResolvedDocument);
-            wasm.client_resolveDiffHistory(retptr, this.ptr, document.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const CredentialFinalization = new FinalizationRegistry(ptr => wasm.__wbg_credential_free(ptr));
-/**
-*/
-export class Credential {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Credential.prototype);
-        obj.ptr = ptr;
-        CredentialFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        CredentialFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_credential_free(ptr);
-    }
-    /**
-    * Returns the base JSON-LD context.
-    * @returns {string}
-    */
-    static BaseContext() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_BaseContext(retptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            var ptr0 = r0;
-            var len0 = r1;
-            if (r3) {
-                ptr0 = 0; len0 = 0;
-                throw takeObject(r2);
-            }
-            return getStringFromWasm0(ptr0, len0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(ptr0, len0);
-        }
-    }
-    /**
-    * Returns the base type.
-    * @returns {string}
-    */
-    static BaseType() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_BaseType(retptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Constructs a new `Credential`.
-    * @param {ICredential} values
-    */
-    constructor(values) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_new(retptr, addHeapObject(values));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Credential.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the JSON-LD context(s) applicable to the `Credential`.
-    * @returns {Array<string | Record<string, any>>}
-    */
-    context() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_context(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the unique `URI` identifying the `Credential` .
-    * @returns {string | undefined}
-    */
-    id() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_id(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            let v0;
-            if (r0 !== 0) {
-                v0 = getStringFromWasm0(r0, r1).slice();
-                wasm.__wbindgen_free(r0, r1 * 1);
-            }
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the URIs defining the type of the `Credential`.
-    * @returns {Array<string>}
-    */
-    type() {
-        const ret = wasm.credential_type(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Returns a copy of the `Credential` subject(s).
-    * @returns {Array<Subject>}
-    */
-    credentialSubject() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_credentialSubject(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the issuer of the `Credential`.
-    * @returns {string | Issuer}
-    */
-    issuer() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_issuer(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the timestamp of when the `Credential` becomes valid.
-    * @returns {Timestamp}
-    */
-    issuanceDate() {
-        const ret = wasm.credential_issuanceDate(this.ptr);
-        return Timestamp.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the timestamp of when the `Credential` should no longer be considered valid.
-    * @returns {Timestamp | undefined}
-    */
-    expirationDate() {
-        const ret = wasm.credential_expirationDate(this.ptr);
-        return ret === 0 ? undefined : Timestamp.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the information used to determine the current status of the `Credential`.
-    * @returns {Array<Status>}
-    */
-    credentialStatus() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_credentialStatus(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the information used to assist in the enforcement of a specific `Credential` structure.
-    * @returns {Array<Schema>}
-    */
-    credentialSchema() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_credentialSchema(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the service(s) used to refresh an expired `Credential`.
-    * @returns {Array<RefreshService>}
-    */
-    refreshService() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_refreshService(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the terms-of-use specified by the `Credential` issuer.
-    * @returns {Array<Policy>}
-    */
-    termsOfUse() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_termsOfUse(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the human-readable evidence used to support the claims within the `Credential`.
-    * @returns {Array<Evidence>}
-    */
-    evidence() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_evidence(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns whether or not the `Credential` must only be contained within a {@link Presentation}
-    * with a proof issued from the `Credential` subject.
-    * @returns {boolean | undefined}
-    */
-    nonTransferable() {
-        const ret = wasm.credential_nonTransferable(this.ptr);
-        return ret === 0xFFFFFF ? undefined : ret !== 0;
-    }
-    /**
-    * Returns a copy of the proof used to verify the `Credential`.
-    * @returns {Proof | undefined}
-    */
-    proof() {
-        const ret = wasm.credential_proof(this.ptr);
-        return ret === 0 ? undefined : Proof.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the miscellaneous properties on the `Credential`.
-    * @returns {Map<string, any>}
-    */
-    properties() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_properties(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `Credential` to a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Credential` from a JSON object.
-    * @param {any} json
-    * @returns {Credential}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credential_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Credential.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {Credential}
-    */
-    clone() {
-        const ret = wasm.credential_clone(this.ptr);
-        return Credential.__wrap(ret);
-    }
-}
-
-const CredentialValidationOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_credentialvalidationoptions_free(ptr));
-/**
-* Options to declare validation criteria when validating credentials.
-*/
-export class CredentialValidationOptions {
-
-    static __wrap(ptr) {
-        const obj = Object.create(CredentialValidationOptions.prototype);
-        obj.ptr = ptr;
-        CredentialValidationOptionsFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        CredentialValidationOptionsFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_credentialvalidationoptions_free(ptr);
-    }
-    /**
-    * Creates a new `CredentialValidationOptions` from the given fields.
-    *
-    * Throws an error if any of the options are invalid.
-    * @param {ICredentialValidationOptions} options
-    */
-    constructor(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credentialvalidationoptions_new(retptr, addHeapObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return CredentialValidationOptions.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Creates a new `CredentialValidationOptions` with defaults.
-    * @returns {CredentialValidationOptions}
-    */
-    static default() {
-        const ret = wasm.credentialvalidationoptions_default();
-        return CredentialValidationOptions.__wrap(ret);
-    }
-    /**
-    * Serializes a `CredentialValidationOptions` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credentialvalidationoptions_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `CredentialValidationOptions` from a JSON object.
-    * @param {any} json
-    * @returns {CredentialValidationOptions}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.credentialvalidationoptions_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return CredentialValidationOptions.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {CredentialValidationOptions}
-    */
-    clone() {
-        const ret = wasm.credentialvalidationoptions_clone(this.ptr);
-        return CredentialValidationOptions.__wrap(ret);
-    }
-}
-
-const CredentialValidatorFinalization = new FinalizationRegistry(ptr => wasm.__wbg_credentialvalidator_free(ptr));
-/**
-*/
-export class CredentialValidator {
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        CredentialValidatorFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_credentialvalidator_free(ptr);
-    }
-    /**
-    * Validates a `Credential`.
-    *
-    * The following properties are validated according to `options`:
-    * - the issuer's signature,
-    * - the expiration date,
-    * - the issuance date,
-    * - the semantic structure.
-    *
-    * ### Warning
-    * The lack of an error returned from this method is in of itself not enough to conclude that the credential can be
-    * trusted. This section contains more information on additional checks that should be carried out before and after
-    * calling this method.
-    *
-    * #### The state of the issuer's DID Document
-    * The caller must ensure that `issuer` represents an up-to-date DID Document. The convenience method
-    * `Resolver::resolveCredentialIssuer` can help extract the latest available state of the issuer's DID Document.
-    *
-    * #### Properties that are not validated
-    *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:
-    * `credentialStatus`, `type`, `credentialSchema`, `refreshService`, **and more**.
-    * These should be manually checked after validation, according to your requirements.
-    *
-    * ### Errors
-    * An error is returned whenever a validated condition is not satisfied.
-    * @param {Credential} credential
-    * @param {Document | ResolvedDocument} issuer
-    * @param {CredentialValidationOptions} options
-    * @param {number} fail_fast
-    */
-    static validate(credential, issuer, options, fail_fast) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(credential, Credential);
-            _assertClass(options, CredentialValidationOptions);
-            wasm.credentialvalidator_validate(retptr, credential.ptr, addBorrowedObject(issuer), options.ptr, fail_fast);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Validates the semantic structure of the `Credential`.
-    *
-    * ### Warning
-    * This does not validate against the credential's schema nor the structure of the subject claims.
-    * @param {Credential} credential
-    */
-    static checkStructure(credential) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(credential, Credential);
-            wasm.credentialvalidator_checkStructure(retptr, credential.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Validate that the credential expires on or after the specified timestamp.
-    * @param {Credential} credential
-    * @param {Timestamp} timestamp
-    */
-    static checkExpiresOnOrAfter(credential, timestamp) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(credential, Credential);
-            _assertClass(timestamp, Timestamp);
-            wasm.credentialvalidator_checkExpiresOnOrAfter(retptr, credential.ptr, timestamp.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Validate that the credential is issued on or before the specified timestamp.
-    * @param {Credential} credential
-    * @param {Timestamp} timestamp
-    */
-    static checkIssuedOnOrBefore(credential, timestamp) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(credential, Credential);
-            _assertClass(timestamp, Timestamp);
-            wasm.credentialvalidator_checkIssuedOnOrBefore(retptr, credential.ptr, timestamp.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Verify the signature using the DID Document of a trusted issuer.
-    *
-    * # Warning
-    * The caller must ensure that the DID Documents of the trusted issuers are up-to-date.
-    * ### Errors
-    * This method immediately returns an error if
-    * the credential issuer' url cannot be parsed to a DID belonging to one of the trusted issuers. Otherwise an attempt
-    * to verify the credential's signature will be made and an error is returned upon failure.
-    * @param {Credential} credential
-    * @param {Array<Document> | Array<ResolvedDocument>} trusted_issuers
-    * @param {VerifierOptions} options
-    */
-    static verifySignature(credential, trusted_issuers, options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(credential, Credential);
-            _assertClass(options, VerifierOptions);
-            wasm.credentialvalidator_verifySignature(retptr, credential.ptr, addBorrowedObject(trusted_issuers), options.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Validate that the relationship between the `holder` and the credential subjects is in accordance with
-    * `relationship`. The `holder_url` parameter is expected to be the URL of the holder.
-    * @param {Credential} credential
-    * @param {string} holder_url
-    * @param {number} relationship
-    */
-    static check_subject_holder_relationship(credential, holder_url, relationship) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(credential, Credential);
-            const ptr0 = passStringToWasm0(holder_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.credentialvalidator_check_subject_holder_relationship(retptr, credential.ptr, ptr0, len0, relationship);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Checks whether the credential status has been revoked.
-    *
-    * Only supports `BitmapRevocation2022`.
-    * @param {Credential} credential
-    * @param {Array<Document> | Array<ResolvedDocument>} trustedIssuers
-    * @param {number} statusCheck
-    */
-    static checkStatus(credential, trustedIssuers, statusCheck) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(credential, Credential);
-            wasm.credentialvalidator_checkStatus(retptr, credential.ptr, addBorrowedObject(trustedIssuers), statusCheck);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-}
-
-const DIDFinalization = new FinalizationRegistry(ptr => wasm.__wbg_did_free(ptr));
-/**
-* @typicalname did
-*/
-export class DID {
-
-    static __wrap(ptr) {
-        const obj = Object.create(DID.prototype);
-        obj.ptr = ptr;
-        DIDFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-            networkName: this.networkName,
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        DIDFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_did_free(ptr);
-    }
-    /**
-    * Creates a new `DID` from a public key.
-    * @param {Uint8Array} public_key
-    * @param {string | undefined} network
-    */
-    constructor(public_key, network) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            var ptr1 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            var len1 = WASM_VECTOR_LEN;
-            wasm.did_new(retptr, ptr0, len0, ptr1, len1);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DID.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Parses a `DID` from the input string.
-    * @param {string} input
-    * @returns {DID}
-    */
-    static parse(input) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.did_parse(retptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DID.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the IOTA tangle network of the `DID`.
-    * @returns {Network}
-    */
-    network() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.did_network(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Network.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the IOTA tangle network of the `DID`.
-    */
-    get networkName() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.did_network_name(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns a copy of the unique tag of the `DID`.
-    * @returns {string}
-    */
-    tag() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.did_tag(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Construct a new `DIDUrl` by joining with a relative DID Url string.
-    * @param {string} segment
-    * @returns {DIDUrl}
-    */
-    join(segment) {
-        try {
-            const ptr = this.__destroy_into_raw();
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.did_join(retptr, ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DIDUrl.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Clones the `DID` into a `DIDUrl`.
-    * @returns {DIDUrl}
-    */
-    toUrl() {
-        const ret = wasm.did_toUrl(this.ptr);
-        return DIDUrl.__wrap(ret);
-    }
-    /**
-    * Converts the `DID` into a `DIDUrl`.
-    * @returns {DIDUrl}
-    */
-    intoUrl() {
-        const ptr = this.__destroy_into_raw();
-        const ret = wasm.did_intoUrl(ptr);
-        return DIDUrl.__wrap(ret);
-    }
-    /**
-    * Returns the `DID` as a string.
-    * @returns {string}
-    */
-    toString() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.did_toString(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Deserializes a JSON object as `DID`.
-    * @param {any} json_value
-    * @returns {DID}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.did_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DID.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `DID` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        const ret = wasm.did_toJSON(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Deep clones the object.
-    * @returns {DID}
-    */
-    clone() {
-        const ret = wasm.did_clone(this.ptr);
-        return DID.__wrap(ret);
-    }
-}
-
-const DIDUrlFinalization = new FinalizationRegistry(ptr => wasm.__wbg_didurl_free(ptr));
-/**
-* @typicalname didUrl
-*/
-export class DIDUrl {
-
-    static __wrap(ptr) {
-        const obj = Object.create(DIDUrl.prototype);
-        obj.ptr = ptr;
-        DIDUrlFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        DIDUrlFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_didurl_free(ptr);
-    }
-    /**
-    * Parses a `DIDUrl` from the input string.
-    * @param {string} input
-    * @returns {DIDUrl}
-    */
-    static parse(input) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.didurl_parse(retptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DIDUrl.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Return a copy of the `DID` section of the `DIDUrl`.
-    * @returns {DID}
-    */
-    did() {
-        const ret = wasm.didurl_did(this.ptr);
-        return DID.__wrap(ret);
-    }
-    /**
-    * Return a copy of the relative DID Url as a string, including only the path, query, and fragment.
-    * @returns {string}
-    */
-    urlStr() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.didurl_urlStr(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns a copy of the `DIDUrl` method fragment, if any. Excludes the leading '#'.
-    * @returns {string | undefined}
-    */
-    fragment() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.didurl_fragment(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            let v0;
-            if (r0 !== 0) {
-                v0 = getStringFromWasm0(r0, r1).slice();
-                wasm.__wbindgen_free(r0, r1 * 1);
-            }
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Sets the `fragment` component of the `DIDUrl`.
-    * @param {string | undefined} value
-    */
-    setFragment(value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            var len0 = WASM_VECTOR_LEN;
-            wasm.didurl_setFragment(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the `DIDUrl` path.
-    * @returns {string | undefined}
-    */
-    path() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.didurl_path(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            let v0;
-            if (r0 !== 0) {
-                v0 = getStringFromWasm0(r0, r1).slice();
-                wasm.__wbindgen_free(r0, r1 * 1);
-            }
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Sets the `path` component of the `DIDUrl`.
-    * @param {string | undefined} value
-    */
-    setPath(value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            var len0 = WASM_VECTOR_LEN;
-            wasm.didurl_setPath(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the `DIDUrl` method query, if any. Excludes the leading '?'.
-    * @returns {string | undefined}
-    */
-    query() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.didurl_query(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            let v0;
-            if (r0 !== 0) {
-                v0 = getStringFromWasm0(r0, r1).slice();
-                wasm.__wbindgen_free(r0, r1 * 1);
-            }
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Sets the `query` component of the `DIDUrl`.
-    * @param {string | undefined} value
-    */
-    setQuery(value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            var len0 = WASM_VECTOR_LEN;
-            wasm.didurl_setQuery(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Append a string representing a path, query, and/or fragment, returning a new `DIDUrl`.
-    *
-    * Must begin with a valid delimiter character: '/', '?', '#'. Overwrites the existing URL
-    * segment and any following segments in order of path, query, then fragment.
-    *
-    * I.e.
-    * - joining a path will clear the query and fragment.
-    * - joining a query will clear the fragment.
-    * - joining a fragment will only overwrite the fragment.
-    * @param {string} segment
-    * @returns {DIDUrl}
-    */
-    join(segment) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.didurl_join(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DIDUrl.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the `DIDUrl` as a string.
-    * @returns {string}
-    */
-    toString() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.didurl_toString(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Serializes a `DIDUrl` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.didurl_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {DIDUrl}
-    */
-    clone() {
-        const ret = wasm.didurl_clone(this.ptr);
-        return DIDUrl.__wrap(ret);
-    }
-}
-
-const DiffChainHistoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_diffchainhistory_free(ptr));
-/**
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-*/
-export class DiffChainHistory {
-
-    static __wrap(ptr) {
-        const obj = Object.create(DiffChainHistory.prototype);
-        obj.ptr = ptr;
-        DiffChainHistoryFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        DiffChainHistoryFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_diffchainhistory_free(ptr);
-    }
-    /**
-    * Returns an `Array` of the diff chain `DiffMessages`.
-    *
-    * NOTE: this clones the field.
-    * @returns {Array<DiffMessage>}
-    */
-    chainData() {
-        const ret = wasm.diffchainhistory_chainData(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Returns an `Array` of `MessageIds` as strings.
-    *
-    * NOTE: this clones the field.
-    * @returns {Array<string>}
-    */
-    spam() {
-        const ret = wasm.diffchainhistory_spam(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Serializes as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.diffchainhistory_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes from a JSON object.
-    * @param {any} json
-    * @returns {DiffChainHistory}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.diffchainhistory_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DiffChainHistory.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-}
-
-const DiffMessageFinalization = new FinalizationRegistry(ptr => wasm.__wbg_diffmessage_free(ptr));
-/**
-* Defines the difference between two DID `Document`s' JSON representations.
-*
-* @deprecated since 0.5.0, diff chain features are slated for removal.
-*/
-export class DiffMessage {
-
-    static __wrap(ptr) {
-        const obj = Object.create(DiffMessage.prototype);
-        obj.ptr = ptr;
-        DiffMessageFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        DiffMessageFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_diffmessage_free(ptr);
-    }
-    /**
-    * Returns the DID of the associated DID Document.
-    *
-    * NOTE: clones the data.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {DID}
-    */
-    id() {
-        const ret = wasm.diffmessage_id(this.ptr);
-        return DID.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the DID of the associated DID Document.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {DID}
-    */
-    did() {
-        const ret = wasm.diffmessage_did(this.ptr);
-        return DID.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the raw contents of the DID Document diff as a JSON string.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {string}
-    */
-    diff() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.diffmessage_diff(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            var ptr0 = r0;
-            var len0 = r1;
-            if (r3) {
-                ptr0 = 0; len0 = 0;
-                throw takeObject(r2);
-            }
-            return getStringFromWasm0(ptr0, len0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(ptr0, len0);
-        }
-    }
-    /**
-    * Returns a copy of the message_id of the DID Document diff.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {string}
-    */
-    messageId() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.diffmessage_messageId(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Sets the message_id of the DID Document diff.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {string} message_id
-    */
-    setMessageId(message_id) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.diffmessage_setMessageId(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the Tangle message id of the previous DID Document diff.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {string}
-    */
-    previousMessageId() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.diffmessage_previousMessageId(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Sets the Tangle message id of the previous DID Document diff.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {string} message_id
-    */
-    setPreviousMessageId(message_id) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.diffmessage_setPreviousMessageId(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the proof.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {Proof | undefined}
-    */
-    proof() {
-        const ret = wasm.diffmessage_proof(this.ptr);
-        return ret === 0 ? undefined : Proof.__wrap(ret);
-    }
-    /**
-    * Returns a new DID Document which is the result of merging `self`
-    * with the given Document.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {Document} document
-    * @returns {Document}
-    */
-    merge(document) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(document, Document);
-            wasm.diffmessage_merge(retptr, this.ptr, document.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Document.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `DiffMessage` as a JSON object.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.diffmessage_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `DiffMessage` from a JSON object.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {any} json
-    * @returns {DiffMessage}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.diffmessage_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DiffMessage.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {DiffMessage}
-    */
-    clone() {
-        const ret = wasm.diffmessage_clone(this.ptr);
-        return DiffMessage.__wrap(ret);
-    }
-}
-
-const DocumentFinalization = new FinalizationRegistry(ptr => wasm.__wbg_document_free(ptr));
-/**
-*/
-export class Document {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Document.prototype);
-        obj.ptr = ptr;
-        DocumentFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        DocumentFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_document_free(ptr);
-    }
-    /**
-    * Creates a new DID Document from the given `KeyPair`, network, and verification method
-    * fragment name.
-    *
-    * The DID Document will be pre-populated with a single verification method
-    * derived from the provided `KeyPair` embedded as a capability invocation
-    * verification relationship. This method will have the DID URL fragment
-    * `#sign-0` by default and can be easily retrieved with `Document::defaultSigningMethod`.
-    *
-    * NOTE: the generated document is unsigned, see `Document::signSelf`.
-    *
-    * Arguments:
-    *
-    * * keypair: the initial verification method is derived from the public key with this keypair.
-    * * network: Tangle network to use for the DID, default `Network::mainnet`.
-    * * fragment: name of the initial verification method, default "sign-0".
-    * @param {KeyPair} keypair
-    * @param {string | undefined} network
-    * @param {string | undefined} fragment
-    */
-    constructor(keypair, network, fragment) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(keypair, KeyPair);
-            var ptr0 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            var len0 = WASM_VECTOR_LEN;
-            var ptr1 = isLikeNone(fragment) ? 0 : passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            var len1 = WASM_VECTOR_LEN;
-            wasm.document_new(retptr, keypair.ptr, ptr0, len0, ptr1, len1);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Document.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Creates a new DID Document from the given `VerificationMethod`.
-    *
-    * NOTE: the generated document is unsigned, see `Document::signSelf`.
-    * @param {VerificationMethod} method
-    * @returns {Document}
-    */
-    static fromVerificationMethod(method) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(method, VerificationMethod);
-            wasm.document_fromVerificationMethod(retptr, method.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Document.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns whether the given {@link MethodType} can be used to sign document updates.
-    * @param {MethodType} method_type
-    * @returns {boolean}
-    */
-    static isSigningMethodType(method_type) {
-        _assertClass(method_type, MethodType);
-        const ret = wasm.document_isSigningMethodType(method_type.ptr);
-        return ret !== 0;
-    }
-    /**
-    * Returns a copy of the DID Document `id`.
-    * @returns {DID}
-    */
-    id() {
-        const ret = wasm.document_id(this.ptr);
-        return DID.__wrap(ret);
-    }
-    /**
-    * Sets the controllers of the DID Document.
-    *
-    * Note: Duplicates will be ignored.
-    * Use `null` to remove all controllers.
-    * @param {DID | DID[] | null} controllers
-    */
-    setController(controllers) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_setController(retptr, this.ptr, addBorrowedObject(controllers));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Returns a list of document controllers.
-    * @returns {DID[]}
-    */
-    controller() {
-        const ret = wasm.document_controller(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Sets the `alsoKnownAs` property in the DID document.
-    * @param {string | string[] | null} urls
-    */
-    setAlsoKnownAs(urls) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_setAlsoKnownAs(retptr, this.ptr, addBorrowedObject(urls));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Returns a set of the document's `alsoKnownAs`.
-    * @returns {Array<string>}
-    */
-    alsoKnownAs() {
-        const ret = wasm.document_alsoKnownAs(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Adds a custom property to the DID Document.
-    * If the value is set to `null`, the custom property will be removed.
-    *
-    * ### WARNING
-    * This method can overwrite existing properties like `id` and result in an invalid document.
-    * @param {string} key
-    * @param {any} value
-    */
-    setPropertyUnchecked(key, value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.document_setPropertyUnchecked(retptr, this.ptr, ptr0, len0, addBorrowedObject(value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Returns a copy of the custom DID Document properties.
-    * @returns {Map<string, any>}
-    */
-    properties() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_properties(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Return a set of all {@link Service Services} in the document.
-    * @returns {Service[]}
-    */
-    service() {
-        const ret = wasm.document_service(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Add a new {@link Service} to the document.
-    *
-    * Returns `true` if the service was added.
-    * @param {Service} service
-    * @returns {boolean}
-    */
-    insertService(service) {
-        _assertClass(service, Service);
-        const ret = wasm.document_insertService(this.ptr, service.ptr);
-        return ret !== 0;
-    }
-    /**
-    * Remove a {@link Service} identified by the given {@link DIDUrl} from the document.
-    *
-    * Returns `true` if a service was removed.
-    * @param {DIDUrl} did
-    * @returns {boolean}
-    */
-    removeService(did) {
-        _assertClass(did, DIDUrl);
-        const ret = wasm.document_removeService(this.ptr, did.ptr);
-        return ret !== 0;
-    }
-    /**
-    * Returns a list of all {@link VerificationMethod} in the DID Document.
-    * @returns {VerificationMethod[]}
-    */
-    methods() {
-        const ret = wasm.document_methods(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Adds a new Verification Method to the DID Document.
-    * @param {VerificationMethod} method
-    * @param {MethodScope} scope
-    */
-    insertMethod(method, scope) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(method, VerificationMethod);
-            _assertClass(scope, MethodScope);
-            wasm.document_insertMethod(retptr, this.ptr, method.ptr, scope.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Removes all references to the specified Verification Method.
-    * @param {DIDUrl} did
-    */
-    removeMethod(did) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(did, DIDUrl);
-            wasm.document_removeMethod(retptr, this.ptr, did.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the first `VerificationMethod` with a capability invocation relationship
-    * capable of signing this DID document.
-    *
-    * Throws an error if no signing method is present.
-    * @returns {VerificationMethod}
-    */
-    defaultSigningMethod() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_defaultSigningMethod(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return VerificationMethod.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the first `VerificationMethod` with an `id` property
-    * matching the provided `query`.
-    *
-    * Throws an error if the method is not found.
-    * @param {DIDUrl | string} query
-    * @param {MethodScope | undefined} scope
-    * @returns {VerificationMethod | undefined}
-    */
-    resolveMethod(query, scope) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_resolveMethod(retptr, this.ptr, addBorrowedObject(query), isLikeNone(scope) ? 0 : addHeapObject(scope));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return r0 === 0 ? undefined : VerificationMethod.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Attempts to resolve the given method query into a method capable of signing a document update.
-    * @param {DIDUrl | string} query
-    * @returns {VerificationMethod}
-    */
-    resolveSigningMethod(query) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_resolveSigningMethod(retptr, this.ptr, addBorrowedObject(query));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return VerificationMethod.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Attaches the relationship to the given method, if the method exists.
-    *
-    * Note: The method needs to be in the set of verification methods,
-    * so it cannot be an embedded one.
-    * @param {DIDUrl} did_url
-    * @param {number} relationship
-    * @returns {boolean}
-    */
-    attachMethodRelationship(did_url, relationship) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(did_url, DIDUrl);
-            wasm.document_attachMethodRelationship(retptr, this.ptr, did_url.ptr, relationship);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return r0 !== 0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Detaches the given relationship from the given method, if the method exists.
-    * @param {DIDUrl} did_url
-    * @param {number} relationship
-    * @returns {boolean}
-    */
-    detachMethodRelationship(did_url, relationship) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(did_url, DIDUrl);
-            wasm.document_detachMethodRelationship(retptr, this.ptr, did_url.ptr, relationship);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return r0 !== 0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Signs the DID document with the verification method specified by `method_query`.
-    * The `method_query` may be the full `DIDUrl` of the method or just its fragment,
-    * e.g. "#sign-0".
-    *
-    * NOTE: does not validate whether the private key of the given `key_pair` corresponds to the
-    * verification method. See `Document::verifySelfSigned`.
-    * @param {KeyPair} key_pair
-    * @param {DIDUrl | string} method_query
-    */
-    signSelf(key_pair, method_query) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(key_pair, KeyPair);
-            wasm.document_signSelf(retptr, this.ptr, key_pair.ptr, addBorrowedObject(method_query));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Signs another DID document using the verification method specified by `method_query`.
-    * The `method_query` may be the full `DIDUrl` of the method or just its fragment,
-    * e.g. "#sign-0".
-    *
-    * `Document.signSelf` should be used in general, this throws an error if trying to operate
-    * on the same document. This is intended for signing updates to a document where a sole
-    * capability invocation method is rotated or replaced entirely.
-    *
-    * NOTE: does not validate whether the private key of the given `key_pair` corresponds to the
-    * verification method. See {@link Document.verifyDocument}.
-    * @param {Document} document
-    * @param {KeyPair} key_pair
-    * @param {DIDUrl | string} method_query
-    */
-    signDocument(document, key_pair, method_query) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(document, Document);
-            _assertClass(key_pair, KeyPair);
-            wasm.document_signDocument(retptr, this.ptr, document.ptr, key_pair.ptr, addBorrowedObject(method_query));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Creates a signature for the given `Credential` with the specified DID Document
-    * Verification Method.
-    * @param {Credential} credential
-    * @param {Uint8Array} privateKey
-    * @param {DIDUrl | string} methodQuery
-    * @param {ProofOptions} options
-    * @returns {Credential}
-    */
-    signCredential(credential, privateKey, methodQuery, options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(credential, Credential);
-            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            _assertClass(options, ProofOptions);
-            wasm.document_signCredential(retptr, this.ptr, credential.ptr, ptr0, len0, addBorrowedObject(methodQuery), options.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Credential.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Creates a signature for the given `Presentation` with the specified DID Document
-    * Verification Method.
-    * @param {Presentation} presentation
-    * @param {Uint8Array} privateKey
-    * @param {DIDUrl | string} methodQuery
-    * @param {ProofOptions} options
-    * @returns {Presentation}
-    */
-    signPresentation(presentation, privateKey, methodQuery, options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(presentation, Presentation);
-            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            _assertClass(options, ProofOptions);
-            wasm.document_signPresentation(retptr, this.ptr, presentation.ptr, ptr0, len0, addBorrowedObject(methodQuery), options.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Presentation.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Creates a signature for the given `data` with the specified DID Document
-    * Verification Method.
-    *
-    * NOTE: use `signSelf` or `signDocument` for DID Documents.
-    * @param {any} data
-    * @param {Uint8Array} privateKey
-    * @param {DIDUrl | string} methodQuery
-    * @param {ProofOptions} options
-    * @returns {any}
-    */
-    signData(data, privateKey, methodQuery, options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            _assertClass(options, ProofOptions);
-            wasm.document_signData(retptr, this.ptr, addBorrowedObject(data), ptr0, len0, addBorrowedObject(methodQuery), options.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Verifies the authenticity of `data` using the target verification method.
-    * @param {any} data
-    * @param {VerifierOptions} options
-    * @returns {boolean}
-    */
-    verifyData(data, options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(options, VerifierOptions);
-            wasm.document_verifyData(retptr, this.ptr, addBorrowedObject(data), options.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return r0 !== 0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Verifies that the signature on the DID document `signed` was generated by a valid method from
-    * this DID document.
-    *
-    * # Errors
-    *
-    * Fails if:
-    * - The signature proof section is missing in the `signed` document.
-    * - The method is not found in this document.
-    * - An unsupported verification method is used.
-    * - The signature verification operation fails.
-    * @param {Document} signed
-    */
-    verifyDocument(signed) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(signed, Document);
-            wasm.document_verifyDocument(retptr, this.ptr, signed.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Verifies whether `document` is a valid root DID document according to the IOTA DID method
-    * specification.
-    *
-    * It must be signed using a verification method with a public key whose BLAKE2b-256 hash matches
-    * the DID tag.
-    * @param {Document} document
-    */
-    static verifyRootDocument(document) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(document, Document);
-            wasm.document_verifyRootDocument(retptr, document.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Generate a `DiffMessage` between two DID Documents and sign it using the specified
-    * `key` and `method`.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {Document} other
-    * @param {string} message_id
-    * @param {KeyPair} key
-    * @param {DIDUrl | string} method_query
-    * @returns {DiffMessage}
-    */
-    diff(other, message_id, key, method_query) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(other, Document);
-            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            _assertClass(key, KeyPair);
-            wasm.document_diff(retptr, this.ptr, other.ptr, ptr0, len0, key.ptr, addBorrowedObject(method_query));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DiffMessage.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Verifies the signature of the `diff` was created using a capability invocation method
-    * in this DID Document.
-    *
-    * # Errors
-    *
-    * Fails if an unsupported verification method is used or the verification operation fails.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {DiffMessage} diff
-    */
-    verifyDiff(diff) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(diff, DiffMessage);
-            wasm.document_verifyDiff(retptr, this.ptr, diff.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Verifies a `DiffMessage` signature and attempts to merge the changes into `self`.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {DiffMessage} diff
-    */
-    mergeDiff(diff) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(diff, DiffMessage);
-            wasm.document_mergeDiff(retptr, this.ptr, diff.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the Tangle index of the integration chain for this DID.
-    *
-    * This is simply the tag segment of the `DID`.
-    * E.g.
-    * For a document with DID: did:iota:1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI,
-    * `doc.integration_index()` == "1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI"
-    * @returns {string}
-    */
-    integrationIndex() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_integrationIndex(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns the Tangle index of the DID diff chain. This should only be called on documents
-    * published on the integration chain.
-    *
-    * This is the Base58-btc encoded SHA-256 digest of the hex-encoded message id.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {string} message_id
-    * @returns {string}
-    */
-    static diffIndex(message_id) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.document_diffIndex(retptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            var ptr1 = r0;
-            var len1 = r1;
-            if (r3) {
-                ptr1 = 0; len1 = 0;
-                throw takeObject(r2);
-            }
-            return getStringFromWasm0(ptr1, len1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(ptr1, len1);
-        }
-    }
-    /**
-    * Returns a copy of the metadata associated with this document.
-    *
-    * NOTE: Copies all the metadata. See also `metadataCreated`, `metadataUpdated`,
-    * `metadataPreviousMessageId`, `metadataProof` if only a subset of the metadata required.
-    * @returns {DocumentMetadata}
-    */
-    metadata() {
-        const ret = wasm.document_metadata(this.ptr);
-        return DocumentMetadata.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the timestamp of when the DID document was created.
-    * @returns {Timestamp | undefined}
-    */
-    metadataCreated() {
-        const ret = wasm.document_metadataCreated(this.ptr);
-        return ret === 0 ? undefined : Timestamp.__wrap(ret);
-    }
-    /**
-    * Sets the timestamp of when the DID document was created.
-    * @param {Timestamp | undefined} timestamp
-    */
-    setMetadataCreated(timestamp) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_setMetadataCreated(retptr, this.ptr, addHeapObject(timestamp));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the timestamp of the last DID document update.
-    * @returns {Timestamp | undefined}
-    */
-    metadataUpdated() {
-        const ret = wasm.document_metadataUpdated(this.ptr);
-        return ret === 0 ? undefined : Timestamp.__wrap(ret);
-    }
-    /**
-    * Sets the timestamp of the last DID document update.
-    * @param {Timestamp | undefined} timestamp
-    */
-    setMetadataUpdated(timestamp) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_setMetadataUpdated(retptr, this.ptr, addHeapObject(timestamp));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the previous integration chain message id.
-    * @returns {string}
-    */
-    metadataPreviousMessageId() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_metadataPreviousMessageId(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Sets the previous integration chain message id.
-    * @param {string} value
-    */
-    setMetadataPreviousMessageId(value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.document_setMetadataPreviousMessageId(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the proof.
-    * @returns {Proof | undefined}
-    */
-    proof() {
-        const ret = wasm.document_proof(this.ptr);
-        return ret === 0 ? undefined : Proof.__wrap(ret);
-    }
-    /**
-    * If the document has a `RevocationBitmap` service identified by `fragment`,
-    * revoke all credentials with a revocationBitmapIndex in `credentialIndices`.
-    * @param {string} fragment
-    * @param {number | number[]} credentialIndices
-    */
-    revokeCredentials(fragment, credentialIndices) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.document_revokeCredentials(retptr, this.ptr, ptr0, len0, addHeapObject(credentialIndices));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * If the document has a `RevocationBitmap` service identified by `fragment`,
-    * unrevoke all credentials with a revocationBitmapIndex in `credentialIndices`.
-    * @param {string} fragment
-    * @param {number | number[]} credentialIndices
-    */
-    unrevokeCredentials(fragment, credentialIndices) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.document_unrevokeCredentials(retptr, this.ptr, ptr0, len0, addHeapObject(credentialIndices));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `Document` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Document` from a JSON object.
-    * @param {any} json
-    * @returns {Document}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.document_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Document.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {Document}
-    */
-    clone() {
-        const ret = wasm.document_clone(this.ptr);
-        return Document.__wrap(ret);
-    }
-}
-
-const DocumentHistoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_documenthistory_free(ptr));
-/**
-* A DID Document's history and current state.
-*/
-export class DocumentHistory {
-
-    static __wrap(ptr) {
-        const obj = Object.create(DocumentHistory.prototype);
-        obj.ptr = ptr;
-        DocumentHistoryFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        DocumentHistoryFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_documenthistory_free(ptr);
-    }
-    /**
-    * Returns an `Array` of integration chain `Documents`.
-    *
-    * NOTE: clones the data.
-    * @returns {Array<ResolvedDocument>}
-    */
-    integrationChainData() {
-        const ret = wasm.documenthistory_integrationChainData(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Returns an `Array` of message id strings for "spam" messages on the same index
-    * as the integration chain.
-    *
-    * NOTE: clones the data.
-    * @returns {Array<string>}
-    */
-    integrationChainSpam() {
-        const ret = wasm.documenthistory_integrationChainSpam(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Returns an `Array` of diff chain `DiffMessages`.
-    *
-    * NOTE: clones the data.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {Array<DiffMessage>}
-    */
-    diffChainData() {
-        const ret = wasm.documenthistory_diffChainData(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Returns an `Array` of message id strings for "spam" messages on the same index
-    * as the diff chain.
-    *
-    * NOTE: clones the data.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {Array<string>}
-    */
-    diffChainSpam() {
-        const ret = wasm.documenthistory_diffChainSpam(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Serializes `DocumentHistory` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.documenthistory_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes `DocumentHistory` from a JSON object.
-    * @param {any} json
-    * @returns {DocumentHistory}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.documenthistory_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return DocumentHistory.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {DocumentHistory}
-    */
-    clone() {
-        const ret = wasm.documenthistory_clone(this.ptr);
-        return DocumentHistory.__wrap(ret);
-    }
-}
-
-const DocumentMetadataFinalization = new FinalizationRegistry(ptr => wasm.__wbg_documentmetadata_free(ptr));
-/**
-* Additional attributes related to an IOTA DID Document.
-*/
-export class DocumentMetadata {
-
-    static __wrap(ptr) {
-        const obj = Object.create(DocumentMetadata.prototype);
-        obj.ptr = ptr;
-        DocumentMetadataFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-            previousMessageId: this.previousMessageId,
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        DocumentMetadataFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_documentmetadata_free(ptr);
-    }
-    /**
-    * Returns a copy of the timestamp of when the DID document was created.
-    * @returns {Timestamp | undefined}
-    */
-    created() {
-        const ret = wasm.documentmetadata_created(this.ptr);
-        return ret === 0 ? undefined : Timestamp.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the timestamp of the last DID document update.
-    * @returns {Timestamp | undefined}
-    */
-    updated() {
-        const ret = wasm.documentmetadata_updated(this.ptr);
-        return ret === 0 ? undefined : Timestamp.__wrap(ret);
-    }
-    /**
-    */
-    get previousMessageId() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.documentmetadata_previous_message_id(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {DocumentMetadata}
-    */
-    clone() {
-        const ret = wasm.documentmetadata_clone(this.ptr);
-        return DocumentMetadata.__wrap(ret);
-    }
-}
-
-const DurationFinalization = new FinalizationRegistry(ptr => wasm.__wbg_duration_free(ptr));
-/**
-* A span of time.
-*/
-export class Duration {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Duration.prototype);
-        obj.ptr = ptr;
-        DurationFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        DurationFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_duration_free(ptr);
-    }
-    /**
-    * Create a new `Duration` with the given number of seconds.
-    * @param {number} seconds
-    * @returns {Duration}
-    */
-    static seconds(seconds) {
-        const ret = wasm.duration_seconds(seconds);
-        return Duration.__wrap(ret);
-    }
-    /**
-    * Create a new `Duration` with the given number of minutes.
-    * @param {number} minutes
-    * @returns {Duration}
-    */
-    static minutes(minutes) {
-        const ret = wasm.duration_minutes(minutes);
-        return Duration.__wrap(ret);
-    }
-    /**
-    * Create a new `Duration` with the given number of hours.
-    * @param {number} hours
-    * @returns {Duration}
-    */
-    static hours(hours) {
-        const ret = wasm.duration_hours(hours);
-        return Duration.__wrap(ret);
-    }
-    /**
-    * Create a new `Duration` with the given number of days.
-    * @param {number} days
-    * @returns {Duration}
-    */
-    static days(days) {
-        const ret = wasm.duration_days(days);
-        return Duration.__wrap(ret);
-    }
-    /**
-    * Create a new `Duration` with the given number of weeks.
-    * @param {number} weeks
-    * @returns {Duration}
-    */
-    static weeks(weeks) {
-        const ret = wasm.duration_weeks(weeks);
-        return Duration.__wrap(ret);
-    }
-    /**
-    * Serializes a `Duration` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.duration_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Duration` from a JSON object.
-    * @param {any} json
-    * @returns {Duration}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.duration_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Duration.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-}
-
-const Ed25519Finalization = new FinalizationRegistry(ptr => wasm.__wbg_ed25519_free(ptr));
-/**
-*/
-export class Ed25519 {
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        Ed25519Finalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_ed25519_free(ptr);
-    }
-    /**
-    * Length in bytes of an Ed25519 private key.
-    * @returns {number}
-    */
-    static PRIVATE_KEY_LENGTH() {
-        const ret = wasm.ed25519_PRIVATE_KEY_LENGTH();
-        return ret >>> 0;
-    }
-    /**
-    * Length in bytes of an Ed25519 public key.
-    * @returns {number}
-    */
-    static PUBLIC_KEY_LENGTH() {
-        const ret = wasm.ed25519_PUBLIC_KEY_LENGTH();
-        return ret >>> 0;
-    }
-    /**
-    * Length in bytes of an Ed25519 signature.
-    * @returns {number}
-    */
-    static SIGNATURE_LENGTH() {
-        const ret = wasm.ed25519_SIGNATURE_LENGTH();
-        return ret >>> 0;
-    }
-    /**
-    * Computes an EdDSA signature using an Ed25519 private key.
-    *
-    * NOTE: this differs from {@link Document.signData} which uses JCS
-    * to canonicalize JSON messages.
-    *
-    * The private key must be a 32-byte seed in compliance with [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-3.2).
-    * Other implementations often use another format. See [this blog post](https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/) for further explanation.
-    * @param {Uint8Array} message
-    * @param {Uint8Array} privateKey
-    * @returns {Uint8Array}
-    */
-    static sign(message, privateKey) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            const ptr1 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);
-            const len1 = WASM_VECTOR_LEN;
-            wasm.ed25519_sign(retptr, ptr0, len0, ptr1, len1);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            if (r3) {
-                throw takeObject(r2);
-            }
-            var v2 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v2;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Verifies an EdDSA signature against an Ed25519 public key.
-    *
-    * NOTE: this differs from {@link Document.verifyData} which uses JCS
-    * to canonicalize JSON messages.
-    * @param {Uint8Array} message
-    * @param {Uint8Array} signature
-    * @param {Uint8Array} publicKey
-    */
-    static verify(message, signature, publicKey) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            const ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);
-            const len1 = WASM_VECTOR_LEN;
-            const ptr2 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);
-            const len2 = WASM_VECTOR_LEN;
-            wasm.ed25519_verify(retptr, ptr0, len0, ptr1, len1, ptr2, len2);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const EncryptedDataFinalization = new FinalizationRegistry(ptr => wasm.__wbg_encrypteddata_free(ptr));
-/**
-* The structure returned after encrypting data
-*/
-export class EncryptedData {
-
-    static __wrap(ptr) {
-        const obj = Object.create(EncryptedData.prototype);
-        obj.ptr = ptr;
-        EncryptedDataFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        EncryptedDataFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_encrypteddata_free(ptr);
-    }
-    /**
-    * Returns a copy of the nonce
-    * @returns {Uint8Array}
-    */
-    nonce() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.encrypteddata_nonce(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the associated data
-    * @returns {Uint8Array}
-    */
-    associatedData() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.encrypteddata_associatedData(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the ciphertext
-    * @returns {Uint8Array}
-    */
-    ciphertext() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.encrypteddata_ciphertext(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the tag
-    * @returns {Uint8Array}
-    */
-    tag() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.encrypteddata_tag(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes `EncryptedData` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.encrypteddata_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes `EncryptedData` from a JSON object.
-    * @param {any} json_value
-    * @returns {EncryptedData}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.encrypteddata_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return EncryptedData.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const EncryptionAlgorithmFinalization = new FinalizationRegistry(ptr => wasm.__wbg_encryptionalgorithm_free(ptr));
-/**
-* Supported content encryption algorithms.
-*/
-export class EncryptionAlgorithm {
-
-    static __wrap(ptr) {
-        const obj = Object.create(EncryptionAlgorithm.prototype);
-        obj.ptr = ptr;
-        EncryptionAlgorithmFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        EncryptionAlgorithmFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_encryptionalgorithm_free(ptr);
-    }
-    /**
-    * AES GCM using 256-bit key.
-    * @returns {EncryptionAlgorithm}
-    */
-    static A256GCM() {
-        const ret = wasm.encryptionalgorithm_A256GCM();
-        return EncryptionAlgorithm.__wrap(ret);
-    }
-    /**
-    * Returns the length of the cipher's key.
-    * @returns {number}
-    */
-    keyLength() {
-        const ret = wasm.encryptionalgorithm_keyLength(this.ptr);
-        return ret >>> 0;
-    }
-    /**
-    * Serializes `EncryptionAlgorithm` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.encryptionalgorithm_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes `EncryptionAlgorithm` from a JSON object.
-    * @param {any} json_value
-    * @returns {EncryptionAlgorithm}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.encryptionalgorithm_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return EncryptionAlgorithm.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const ExplorerUrlFinalization = new FinalizationRegistry(ptr => wasm.__wbg_explorerurl_free(ptr));
-/**
-*/
-export class ExplorerUrl {
-
-    static __wrap(ptr) {
-        const obj = Object.create(ExplorerUrl.prototype);
-        obj.ptr = ptr;
-        ExplorerUrlFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ExplorerUrlFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_explorerurl_free(ptr);
-    }
-    /**
-    * Constructs a new Tangle explorer URL from a string.
-    *
-    * Use `ExplorerUrl::mainnet` or `ExplorerUrl::devnet` unless using a private Tangle
-    * or local explorer.
-    * @param {string} url
-    * @returns {ExplorerUrl}
-    */
-    static parse(url) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.explorerurl_parse(retptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return ExplorerUrl.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the Tangle explorer URL for the mainnet.
-    * @returns {ExplorerUrl}
-    */
-    static mainnet() {
-        const ret = wasm.explorerurl_mainnet();
-        return ExplorerUrl.__wrap(ret);
-    }
-    /**
-    * Returns the Tangle explorer URL for the devnet.
-    * @returns {ExplorerUrl}
-    */
-    static devnet() {
-        const ret = wasm.explorerurl_devnet();
-        return ExplorerUrl.__wrap(ret);
-    }
-    /**
-    * Returns the web explorer URL of the given `message_id`.
-    *
-    * E.g. https://explorer.iota.org/mainnet/message/{message_id}
-    * @param {string} message_id
-    * @returns {string}
-    */
-    messageUrl(message_id) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.explorerurl_messageUrl(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            var ptr1 = r0;
-            var len1 = r1;
-            if (r3) {
-                ptr1 = 0; len1 = 0;
-                throw takeObject(r2);
-            }
-            return getStringFromWasm0(ptr1, len1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(ptr1, len1);
-        }
-    }
-    /**
-    * Returns the web identity resolver URL for the given DID.
-    *
-    * E.g. https://explorer.iota.org/mainnet/identity-resolver/{did}
-    * @param {DID | string} did
-    * @returns {string}
-    */
-    resolverUrl(did) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.explorerurl_resolverUrl(retptr, this.ptr, addHeapObject(did));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            var ptr0 = r0;
-            var len0 = r1;
-            if (r3) {
-                ptr0 = 0; len0 = 0;
-                throw takeObject(r2);
-            }
-            return getStringFromWasm0(ptr0, len0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(ptr0, len0);
-        }
-    }
-    /**
-    * @returns {string}
-    */
-    toString() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.explorerurl_toString(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-}
-
-const IntegrationChainHistoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_integrationchainhistory_free(ptr));
-/**
-*/
-export class IntegrationChainHistory {
-
-    static __wrap(ptr) {
-        const obj = Object.create(IntegrationChainHistory.prototype);
-        obj.ptr = ptr;
-        IntegrationChainHistoryFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        IntegrationChainHistoryFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_integrationchainhistory_free(ptr);
-    }
-    /**
-    * Returns an `Array` of the integration chain `Documents`.
-    *
-    * NOTE: this clones the field.
-    * @returns {Array<ResolvedDocument>}
-    */
-    chainData() {
-        const ret = wasm.integrationchainhistory_chainData(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Returns an `Array` of `MessageIds` as strings.
-    *
-    * NOTE: this clones the field.
-    * @returns {Array<string>}
-    */
-    spam() {
-        const ret = wasm.integrationchainhistory_spam(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Serializes as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.integrationchainhistory_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes from a JSON object.
-    * @param {any} json
-    * @returns {IntegrationChainHistory}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.integrationchainhistory_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return IntegrationChainHistory.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-}
-
-const KeyLocationFinalization = new FinalizationRegistry(ptr => wasm.__wbg_keylocation_free(ptr));
-/**
-* The storage location of a verification method key.
-*
-* A key is uniquely identified by the fragment and a hash of its public key.
-* Importantly, the fragment alone is insufficient to represent the storage location.
-* For example, when rotating a key, there will be two keys in storage for the
-* same identity with the same fragment. The `key_hash` disambiguates the keys in
-* situations like these.
-*
-* The string representation of that location can be obtained via `canonicalRepr`.
-*/
-export class KeyLocation {
-
-    static __wrap(ptr) {
-        const obj = Object.create(KeyLocation.prototype);
-        obj.ptr = ptr;
-        KeyLocationFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        KeyLocationFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_keylocation_free(ptr);
-    }
-    /**
-    * Create a location from a `KeyType`, the fragment of a verification method
-    * and the bytes of a public key.
-    * @param {number} keyType
-    * @param {string} fragment
-    * @param {Uint8Array} publicKey
-    */
-    constructor(keyType, fragment, publicKey) {
-        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ptr1 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);
-        const len1 = WASM_VECTOR_LEN;
-        const ret = wasm.keylocation_new(keyType, ptr0, len0, ptr1, len1);
-        return KeyLocation.__wrap(ret);
-    }
-    /**
-    * Obtain the location of a verification method's key in storage.
-    * @param {VerificationMethod} method
-    * @returns {KeyLocation}
-    */
-    static fromVerificationMethod(method) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(method, VerificationMethod);
-            wasm.keylocation_fromVerificationMethod(retptr, method.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return KeyLocation.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the canonical string representation of the location.
-    *
-    * This should be used as the representation for storage keys.
-    * @returns {string}
-    */
-    canonical() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.keylocation_canonical(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns a copy of the key type of the key location.
-    * @returns {number}
-    */
-    keyType() {
-        const ret = wasm.keylocation_keyType(this.ptr);
-        return ret >>> 0;
-    }
-    /**
-    * Serializes `KeyLocation` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.keylocation_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a JSON object into a `KeyLocation`.
-    * @param {any} json_value
-    * @returns {KeyLocation}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.keylocation_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return KeyLocation.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * @returns {string}
-    */
-    toString() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.keylocation_toString(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-}
-
-const KeyPairFinalization = new FinalizationRegistry(ptr => wasm.__wbg_keypair_free(ptr));
-/**
-*/
-export class KeyPair {
-
-    static __wrap(ptr) {
-        const obj = Object.create(KeyPair.prototype);
-        obj.ptr = ptr;
-        KeyPairFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        KeyPairFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_keypair_free(ptr);
-    }
-    /**
-    * Generates a new `KeyPair` object.
-    * @param {number} type_
-    */
-    constructor(type_) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.keypair_new(retptr, type_);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return KeyPair.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Parses a `KeyPair` object from the public/private keys.
-    * @param {number} type_
-    * @param {Uint8Array} public_key
-    * @param {Uint8Array} private_key
-    * @returns {KeyPair}
-    */
-    static fromKeys(type_, public_key, private_key) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            const ptr1 = passArray8ToWasm0(private_key, wasm.__wbindgen_malloc);
-            const len1 = WASM_VECTOR_LEN;
-            wasm.keypair_fromKeys(retptr, type_, ptr0, len0, ptr1, len1);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return KeyPair.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Reconstructs a `KeyPair` from the bytes of a private key.
-    *
-    * The private key for `Ed25519` must be a 32-byte seed in compliance
-    * with [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-3.2).
-    * Other implementations often use another format. See [this blog post](https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/) for further explanation.
-    * @param {number} keyType
-    * @param {Uint8Array} privateKeyBytes
-    * @returns {KeyPair}
-    */
-    static tryFromPrivateKeyBytes(keyType, privateKeyBytes) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passArray8ToWasm0(privateKeyBytes, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.keypair_tryFromPrivateKeyBytes(retptr, keyType, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return KeyPair.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the `KeyType` of the `KeyPair` object.
-    * @returns {number}
-    */
-    type() {
-        const ret = wasm.keypair_type(this.ptr);
-        return ret >>> 0;
-    }
-    /**
-    * Returns a copy of the public key as a `Uint8Array`.
-    * @returns {Uint8Array}
-    */
-    public() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.keypair_public(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the private key as a `Uint8Array`.
-    * @returns {Uint8Array}
-    */
-    private() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.keypair_private(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `KeyPair` object as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.keypair_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `KeyPair` object from a JSON object.
-    * @param {any} json
-    * @returns {KeyPair}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.keypair_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return KeyPair.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {KeyPair}
-    */
-    clone() {
-        const ret = wasm.keypair_clone(this.ptr);
-        return KeyPair.__wrap(ret);
-    }
-}
-
-const MethodContentFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methodcontent_free(ptr));
-/**
-*/
-export class MethodContent {
-
-    static __wrap(ptr) {
-        const obj = Object.create(MethodContent.prototype);
-        obj.ptr = ptr;
-        MethodContentFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        MethodContentFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_methodcontent_free(ptr);
-    }
-    /**
-    * Generate and store a new Ed25519 keypair for a new `Ed25519VerificationKey2018` method.
-    * @returns {MethodContent}
-    */
-    static GenerateEd25519() {
-        const ret = wasm.methodcontent_GenerateEd25519();
-        return MethodContent.__wrap(ret);
-    }
-    /**
-    * Store an existing Ed25519 private key and derive a public key from it for a new
-    * `Ed25519VerificationKey2018` method.
-    * @param {Uint8Array} privateKey
-    * @returns {MethodContent}
-    */
-    static PrivateEd25519(privateKey) {
-        const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.methodcontent_PrivateEd25519(ptr0, len0);
-        return MethodContent.__wrap(ret);
-    }
-    /**
-    * Insert an existing Ed25519 public key into a new `Ed25519VerificationKey2018` method,
-    * without generating or storing a private key.
-    *
-    * NOTE: the method will be unable to be used to sign anything without a private key.
-    * @param {Uint8Array} publicKey
-    * @returns {MethodContent}
-    */
-    static PublicEd25519(publicKey) {
-        const ptr0 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.methodcontent_PublicEd25519(ptr0, len0);
-        return MethodContent.__wrap(ret);
-    }
-    /**
-    * Generate and store a new X25519 keypair for a new `X25519KeyAgreementKey2019` method.
-    * @returns {MethodContent}
-    */
-    static GenerateX25519() {
-        const ret = wasm.methodcontent_GenerateX25519();
-        return MethodContent.__wrap(ret);
-    }
-    /**
-    * Store an existing X25519 private key and derive a public key from it for a new
-    * `X25519KeyAgreementKey2019` method.
-    * @param {Uint8Array} privateKey
-    * @returns {MethodContent}
-    */
-    static PrivateX25519(privateKey) {
-        const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.methodcontent_PrivateX25519(ptr0, len0);
-        return MethodContent.__wrap(ret);
-    }
-    /**
-    * Insert an existing X25519 public key into a new `X25519KeyAgreementKey2019` method,
-    * without generating or storing a private key.
-    *
-    * NOTE: the method will be unable to be used for key exchange without a private key.
-    * @param {Uint8Array} publicKey
-    * @returns {MethodContent}
-    */
-    static PublicX25519(publicKey) {
-        const ptr0 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.methodcontent_PublicX25519(ptr0, len0);
-        return MethodContent.__wrap(ret);
-    }
-    /**
-    * Serializes `MethodContent` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methodcontent_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes `MethodContent` from a JSON object.
-    * @param {any} json_value
-    * @returns {MethodContent}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methodcontent_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return MethodContent.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const MethodDataFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methoddata_free(ptr));
-/**
-* Supported verification method data formats.
-*/
-export class MethodData {
-
-    static __wrap(ptr) {
-        const obj = Object.create(MethodData.prototype);
-        obj.ptr = ptr;
-        MethodDataFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        MethodDataFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_methoddata_free(ptr);
-    }
-    /**
-    * Creates a new `MethodData` variant with Base58-BTC encoded content.
-    * @param {Uint8Array} data
-    * @returns {MethodData}
-    */
-    static newBase58(data) {
-        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.methoddata_newBase58(ptr0, len0);
-        return MethodData.__wrap(ret);
-    }
-    /**
-    * Creates a new `MethodData` variant with Multibase-encoded content.
-    * @param {Uint8Array} data
-    * @returns {MethodData}
-    */
-    static newMultibase(data) {
-        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.methoddata_newMultibase(ptr0, len0);
-        return MethodData.__wrap(ret);
-    }
-    /**
-    * Returns a `Uint8Array` containing the decoded bytes of the `MethodData`.
-    *
-    * This is generally a public key identified by a `MethodData` value.
-    *
-    * ### Errors
-    * Decoding can fail if `MethodData` has invalid content or cannot be
-    * represented as a vector of bytes.
-    * @returns {Uint8Array}
-    */
-    tryDecode() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methoddata_tryDecode(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            if (r3) {
-                throw takeObject(r2);
-            }
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `MethodData` object as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methoddata_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `MethodData` object from a JSON object.
-    * @param {any} json
-    * @returns {MethodData}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methoddata_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return MethodData.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {MethodData}
-    */
-    clone() {
-        const ret = wasm.methoddata_clone(this.ptr);
-        return MethodData.__wrap(ret);
-    }
-}
-
-const MethodScopeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methodscope_free(ptr));
-/**
-* Supported verification method types.
-*/
-export class MethodScope {
-
-    static __wrap(ptr) {
-        const obj = Object.create(MethodScope.prototype);
-        obj.ptr = ptr;
-        MethodScopeFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        MethodScopeFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_methodscope_free(ptr);
-    }
-    /**
-    * @returns {MethodScope}
-    */
-    static VerificationMethod() {
-        const ret = wasm.methodscope_VerificationMethod();
-        return MethodScope.__wrap(ret);
-    }
-    /**
-    * @returns {MethodScope}
-    */
-    static Authentication() {
-        const ret = wasm.methodscope_Authentication();
-        return MethodScope.__wrap(ret);
-    }
-    /**
-    * @returns {MethodScope}
-    */
-    static AssertionMethod() {
-        const ret = wasm.methodscope_AssertionMethod();
-        return MethodScope.__wrap(ret);
-    }
-    /**
-    * @returns {MethodScope}
-    */
-    static KeyAgreement() {
-        const ret = wasm.methodscope_KeyAgreement();
-        return MethodScope.__wrap(ret);
-    }
-    /**
-    * @returns {MethodScope}
-    */
-    static CapabilityDelegation() {
-        const ret = wasm.methodscope_CapabilityDelegation();
-        return MethodScope.__wrap(ret);
-    }
-    /**
-    * @returns {MethodScope}
-    */
-    static CapabilityInvocation() {
-        const ret = wasm.methodscope_CapabilityInvocation();
-        return MethodScope.__wrap(ret);
-    }
-    /**
-    * Returns the `MethodScope` as a string.
-    * @returns {string}
-    */
-    toString() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methodscope_toString(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Serializes a `MethodScope` object as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methodscope_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `MethodScope` object from a JSON object.
-    * @param {any} json
-    * @returns {MethodScope}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methodscope_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return MethodScope.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {MethodScope}
-    */
-    clone() {
-        const ret = wasm.methodscope_clone(this.ptr);
-        return MethodScope.__wrap(ret);
-    }
-}
-
-const MethodTypeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methodtype_free(ptr));
-/**
-* Supported verification method types.
-*/
-export class MethodType {
-
-    static __wrap(ptr) {
-        const obj = Object.create(MethodType.prototype);
-        obj.ptr = ptr;
-        MethodTypeFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        MethodTypeFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_methodtype_free(ptr);
-    }
-    /**
-    * @returns {MethodType}
-    */
-    static Ed25519VerificationKey2018() {
-        const ret = wasm.methodtype_Ed25519VerificationKey2018();
-        return MethodType.__wrap(ret);
-    }
-    /**
-    * @returns {MethodType}
-    */
-    static X25519KeyAgreementKey2019() {
-        const ret = wasm.methodtype_X25519KeyAgreementKey2019();
-        return MethodType.__wrap(ret);
-    }
-    /**
-    * Serializes a `MethodType` object as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methodtype_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `MethodType` object from a JSON object.
-    * @param {any} json
-    * @returns {MethodType}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methodtype_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return MethodType.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Returns the `MethodType` as a string.
-    * @returns {string}
-    */
-    toString() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.methodtype_toString(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {MethodType}
-    */
-    clone() {
-        const ret = wasm.methodtype_clone(this.ptr);
-        return MethodType.__wrap(ret);
-    }
-}
-
-const NetworkFinalization = new FinalizationRegistry(ptr => wasm.__wbg_network_free(ptr));
-/**
-*/
-export class Network {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Network.prototype);
-        obj.ptr = ptr;
-        NetworkFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        NetworkFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_network_free(ptr);
-    }
-    /**
-    * Parses the provided string to a `Network`.
-    *
-    * Errors if the name is invalid.
-    * @param {string} name
-    * @returns {Network}
-    */
-    static tryFromName(name) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.network_tryFromName(retptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Network.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * @returns {Network}
-    */
-    static mainnet() {
-        const ret = wasm.network_mainnet();
-        return Network.__wrap(ret);
-    }
-    /**
-    * @returns {Network}
-    */
-    static devnet() {
-        const ret = wasm.network_devnet();
-        return Network.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the network name.
-    * @returns {string}
-    */
-    name() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.network_name(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns a copy of the node URL of the Tangle network.
-    * @returns {string | undefined}
-    */
-    defaultNodeURL() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.network_defaultNodeURL(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            let v0;
-            if (r0 !== 0) {
-                v0 = getStringFromWasm0(r0, r1).slice();
-                wasm.__wbindgen_free(r0, r1 * 1);
-            }
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * @returns {string}
-    */
-    toString() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.network_toString(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Serializes a `Network` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.network_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Network` from a JSON object.
-    * @param {any} json
-    * @returns {Network}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.network_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Network.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {Network}
-    */
-    clone() {
-        const ret = wasm.network_clone(this.ptr);
-        return Network.__wrap(ret);
-    }
-}
-
-const PresentationFinalization = new FinalizationRegistry(ptr => wasm.__wbg_presentation_free(ptr));
-/**
-*/
-export class Presentation {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Presentation.prototype);
-        obj.ptr = ptr;
-        PresentationFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        PresentationFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_presentation_free(ptr);
-    }
-    /**
-    * Returns the base JSON-LD context.
-    * @returns {string}
-    */
-    static BaseContext() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_BaseContext(retptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            var ptr0 = r0;
-            var len0 = r1;
-            if (r3) {
-                ptr0 = 0; len0 = 0;
-                throw takeObject(r2);
-            }
-            return getStringFromWasm0(ptr0, len0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(ptr0, len0);
-        }
-    }
-    /**
-    * Returns the base type.
-    * @returns {string}
-    */
-    static BaseType() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_BaseType(retptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Constructs a new `Presentation`.
-    * @param {IPresentation} values
-    */
-    constructor(values) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_new(retptr, addHeapObject(values));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Presentation.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the JSON-LD context(s) applicable to the `Presentation`.
-    * @returns {Array<string | Record<string, any>>}
-    */
-    context() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_context(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the unique `URI` identifying the `Presentation`.
-    * @returns {string | undefined}
-    */
-    id() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_id(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            let v0;
-            if (r0 !== 0) {
-                v0 = getStringFromWasm0(r0, r1).slice();
-                wasm.__wbindgen_free(r0, r1 * 1);
-            }
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the URIs defining the type of the `Presentation`.
-    * @returns {Array<string>}
-    */
-    type() {
-        const ret = wasm.presentation_type(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Returns a copy of the {@link Credential}(s) expressing the claims of the `Presentation`.
-    * @returns {Array<Credential>}
-    */
-    verifiableCredential() {
-        const ret = wasm.presentation_verifiableCredential(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Returns a copy of the URI of the entity that generated the `Presentation`.
-    * @returns {string | undefined}
-    */
-    holder() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_holder(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            let v0;
-            if (r0 !== 0) {
-                v0 = getStringFromWasm0(r0, r1).slice();
-                wasm.__wbindgen_free(r0, r1 * 1);
-            }
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the service(s) used to refresh an expired {@link Credential} in the `Presentation`.
-    * @returns {Array<RefreshService>}
-    */
-    refreshService() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_refreshService(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the terms-of-use specified by the `Presentation` holder
-    * @returns {Array<Policy>}
-    */
-    termsOfUse() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_termsOfUse(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the proof used to verify the `Presentation`.
-    * @returns {Proof | undefined}
-    */
-    proof() {
-        const ret = wasm.presentation_proof(this.ptr);
-        return ret === 0 ? undefined : Proof.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the miscellaneous properties on the `Presentation`.
-    * @returns {Map<string, any>}
-    */
-    properties() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_properties(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `Presentation` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Presentation` from a JSON object.
-    * @param {any} json
-    * @returns {Presentation}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentation_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Presentation.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {Presentation}
-    */
-    clone() {
-        const ret = wasm.presentation_clone(this.ptr);
-        return Presentation.__wrap(ret);
-    }
-}
-
-const PresentationValidationOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_presentationvalidationoptions_free(ptr));
-/**
-* Options to declare validation criteria when validating presentation.
-*/
-export class PresentationValidationOptions {
-
-    static __wrap(ptr) {
-        const obj = Object.create(PresentationValidationOptions.prototype);
-        obj.ptr = ptr;
-        PresentationValidationOptionsFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        PresentationValidationOptionsFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_presentationvalidationoptions_free(ptr);
-    }
-    /**
-    * Creates a new `PresentationValidationOptions` from the given fields.
-    *
-    * Throws an error if any of the options are invalid.
-    * @param {IPresentationValidationOptions} options
-    */
-    constructor(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentationvalidationoptions_new(retptr, addHeapObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return PresentationValidationOptions.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Creates a new `PresentationValidationOptions` with defaults.
-    * @returns {PresentationValidationOptions}
-    */
-    static default() {
-        const ret = wasm.presentationvalidationoptions_default();
-        return PresentationValidationOptions.__wrap(ret);
-    }
-    /**
-    * Serializes a `PresentationValidationOptions` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentationvalidationoptions_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `PresentationValidationOptions` from a JSON object.
-    * @param {any} json
-    * @returns {PresentationValidationOptions}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.presentationvalidationoptions_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return PresentationValidationOptions.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {PresentationValidationOptions}
-    */
-    clone() {
-        const ret = wasm.presentationvalidationoptions_clone(this.ptr);
-        return PresentationValidationOptions.__wrap(ret);
-    }
-}
-
-const PresentationValidatorFinalization = new FinalizationRegistry(ptr => wasm.__wbg_presentationvalidator_free(ptr));
-/**
-*/
-export class PresentationValidator {
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        PresentationValidatorFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_presentationvalidator_free(ptr);
-    }
-    /**
-    * Validate a `Presentation`.
-    *
-    * The following properties are validated according to `options`:
-    * - the semantic structure of the presentation,
-    * - the holder's signature,
-    * - the relationship between the holder and the credential subjects,
-    * - the signatures and some properties of the constituent credentials (see
-    * `CredentialValidator::validate`).
-    *
-    * ### Warning
-    * The lack of an error returned from this method is in of itself not enough to conclude that the presentation can be
-    * trusted. This section contains more information on additional checks that should be carried out before and after
-    * calling this method.
-    *
-    * #### The state of the supplied DID Documents.
-    * The caller must ensure that the DID Documents in `holder` and `issuers` are up-to-date. The convenience methods
-    * `Resolver::resolve_presentation_holder` and `Resolver::resolve_presentation_issuers`
-    * can help extract the latest available states of these DID Documents.
-    *
-    * #### Properties that are not validated
-    *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:
-    * `credentialStatus`, `type`, `credentialSchema`, `refreshService`, **and more**.
-    * These should be manually checked after validation, according to your requirements.
-    *
-    * ### Errors
-    * An error is returned whenever a validated condition is not satisfied.
-    * @param {Presentation} presentation
-    * @param {Document | ResolvedDocument} holder
-    * @param {Array<Document> | Array<ResolvedDocument>} issuers
-    * @param {PresentationValidationOptions} options
-    * @param {number} fail_fast
-    */
-    static validate(presentation, holder, issuers, options, fail_fast) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(presentation, Presentation);
-            _assertClass(options, PresentationValidationOptions);
-            wasm.presentationvalidator_validate(retptr, presentation.ptr, addBorrowedObject(holder), addBorrowedObject(issuers), options.ptr, fail_fast);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Verify the presentation's signature using the resolved document of the holder.
-    *
-    * ### Warning
-    * The caller must ensure that the DID Document of the holder is up-to-date.
-    *
-    * ### Errors
-    * Fails if the `holder` does not match the `presentation`'s holder property.
-    * Fails if signature verification against the holder document fails.
-    * @param {Presentation} presentation
-    * @param {Document | ResolvedDocument} holder
-    * @param {VerifierOptions} options
-    */
-    static verifyPresentationSignature(presentation, holder, options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(presentation, Presentation);
-            _assertClass(options, VerifierOptions);
-            wasm.presentationvalidator_verifyPresentationSignature(retptr, presentation.ptr, addBorrowedObject(holder), options.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Validates the semantic structure of the `Presentation`.
-    * @param {Presentation} presentation
-    */
-    static checkStructure(presentation) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(presentation, Presentation);
-            wasm.presentationvalidator_checkStructure(retptr, presentation.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const ProofFinalization = new FinalizationRegistry(ptr => wasm.__wbg_proof_free(ptr));
-/**
-* A digital signature.
-*
-* For field definitions see: https://w3c-ccg.github.io/security-vocab/
-*/
-export class Proof {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Proof.prototype);
-        obj.ptr = ptr;
-        ProofFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ProofFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_proof_free(ptr);
-    }
-    /**
-    * Returns a copy of the proof type.
-    * @returns {string}
-    */
-    type() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proof_type(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns a copy of the proof value string.
-    * @returns {string}
-    */
-    value() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proof_value(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns a copy of the identifier of the DID method used to create this proof.
-    * @returns {string}
-    */
-    verificationMethod() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proof_verificationMethod(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * When the proof was generated.
-    * @returns {Timestamp | undefined}
-    */
-    created() {
-        const ret = wasm.proof_created(this.ptr);
-        return ret === 0 ? undefined : Timestamp.__wrap(ret);
-    }
-    /**
-    * When the proof expires.
-    * @returns {Timestamp | undefined}
-    */
-    expires() {
-        const ret = wasm.proof_expires(this.ptr);
-        return ret === 0 ? undefined : Timestamp.__wrap(ret);
-    }
-    /**
-    * Challenge from a proof requester to mitigate replay attacks.
-    * @returns {string | undefined}
-    */
-    challenge() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proof_challenge(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            let v0;
-            if (r0 !== 0) {
-                v0 = getStringFromWasm0(r0, r1).slice();
-                wasm.__wbindgen_free(r0, r1 * 1);
-            }
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Domain for which a proof is valid to mitigate replay attacks.
-    * @returns {string | undefined}
-    */
-    domain() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proof_domain(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            let v0;
-            if (r0 !== 0) {
-                v0 = getStringFromWasm0(r0, r1).slice();
-                wasm.__wbindgen_free(r0, r1 * 1);
-            }
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Purpose for which the proof was generated.
-    * @returns {ProofPurpose | undefined}
-    */
-    purpose() {
-        const ret = wasm.proof_purpose(this.ptr);
-        return ret === 0 ? undefined : ProofPurpose.__wrap(ret);
-    }
-    /**
-    * Serializes a `Proof` to a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proof_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Proof` from a JSON object.
-    * @param {any} json
-    * @returns {Proof}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proof_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Proof.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {Proof}
-    */
-    clone() {
-        const ret = wasm.proof_clone(this.ptr);
-        return Proof.__wrap(ret);
-    }
-}
-
-const ProofOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_proofoptions_free(ptr));
-/**
-* Holds additional options for creating signatures.
-* See `IProofOptions`.
-*/
-export class ProofOptions {
-
-    static __wrap(ptr) {
-        const obj = Object.create(ProofOptions.prototype);
-        obj.ptr = ptr;
-        ProofOptionsFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ProofOptionsFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_proofoptions_free(ptr);
-    }
-    /**
-    * Creates a new `ProofOptions` from the given fields.
-    *
-    * Throws an error if any of the options are invalid.
-    * @param {IProofOptions} options
-    */
-    constructor(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proofoptions_new(retptr, addHeapObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return ProofOptions.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Creates a new `ProofOptions` with default options.
-    * @returns {ProofOptions}
-    */
-    static default() {
-        const ret = wasm.proofoptions_default();
-        return ProofOptions.__wrap(ret);
-    }
-    /**
-    * Deep clones the object.
-    * @returns {ProofOptions}
-    */
-    clone() {
-        const ret = wasm.proofoptions_clone(this.ptr);
-        return ProofOptions.__wrap(ret);
-    }
-}
-
-const ProofPurposeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_proofpurpose_free(ptr));
-/**
-* Associates a purpose with a {@link Proof}.
-*
-* See https://w3c-ccg.github.io/security-vocab/#proofPurpose
-*/
-export class ProofPurpose {
-
-    static __wrap(ptr) {
-        const obj = Object.create(ProofPurpose.prototype);
-        obj.ptr = ptr;
-        ProofPurposeFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ProofPurposeFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_proofpurpose_free(ptr);
-    }
-    /**
-    * Purpose is to assert a claim.
-    * See https://www.w3.org/TR/did-core/#assertion
-    * @returns {ProofPurpose}
-    */
-    static assertionMethod() {
-        const ret = wasm.proofpurpose_assertionMethod();
-        return ProofPurpose.__wrap(ret);
-    }
-    /**
-    * Purpose is to authenticate the signer.
-    * See https://www.w3.org/TR/did-core/#authentication
-    * @returns {ProofPurpose}
-    */
-    static authentication() {
-        const ret = wasm.proofpurpose_authentication();
-        return ProofPurpose.__wrap(ret);
-    }
-    /**
-    * Serializes a `ProofPurpose` to a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proofpurpose_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `ProofPurpose` from a JSON object.
-    * @param {any} json
-    * @returns {ProofPurpose}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.proofpurpose_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return ProofPurpose.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {ProofPurpose}
-    */
-    clone() {
-        const ret = wasm.proofpurpose_clone(this.ptr);
-        return ProofPurpose.__wrap(ret);
-    }
-}
-
-const ReceiptFinalization = new FinalizationRegistry(ptr => wasm.__wbg_receipt_free(ptr));
-/**
-*/
-export class Receipt {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Receipt.prototype);
-        obj.ptr = ptr;
-        ReceiptFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ReceiptFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_receipt_free(ptr);
-    }
-    /**
-    * Returns a copy of the associated IOTA Tangle `Network`.
-    * @returns {Network}
-    */
-    network() {
-        const ret = wasm.receipt_network(this.ptr);
-        return Network.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the message `id`.
-    * @returns {string}
-    */
-    messageId() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.receipt_messageId(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns a copy of the message `network_id`.
-    * @returns {string}
-    */
-    networkId() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.receipt_networkId(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns a copy of the message `nonce`.
-    * @returns {string}
-    */
-    nonce() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.receipt_nonce(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Serializes a `Receipt` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.receipt_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Receipt` from a JSON object.
-    * @param {any} json
-    * @returns {Receipt}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.receipt_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Receipt.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {Receipt}
-    */
-    clone() {
-        const ret = wasm.receipt_clone(this.ptr);
-        return Receipt.__wrap(ret);
-    }
-}
-
-const ResolvedDocumentFinalization = new FinalizationRegistry(ptr => wasm.__wbg_resolveddocument_free(ptr));
-/**
-* An IOTA DID document resolved from the Tangle. Represents an integration chain message possibly
-* merged with one or more `DiffMessages`.
-*/
-export class ResolvedDocument {
-
-    static __wrap(ptr) {
-        const obj = Object.create(ResolvedDocument.prototype);
-        obj.ptr = ptr;
-        ResolvedDocumentFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ResolvedDocumentFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_resolveddocument_free(ptr);
-    }
-    /**
-    * Attempts to merge changes from a `DiffMessage` into this document and
-    * updates the `ResolvedDocument::diffMessageId`.
-    *
-    * If merging fails the document remains unmodified, otherwise this represents
-    * the merged document state.
-    *
-    * See `Document::mergeDiff`.
-    *
-    * # Errors
-    *
-    * Fails if the merge operation or signature verification on the diff fails.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {DiffMessage} diff_message
-    */
-    mergeDiffMessage(diff_message) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(diff_message, DiffMessage);
-            wasm.resolveddocument_mergeDiffMessage(retptr, this.ptr, diff_message.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the inner DID document.
-    *
-    * NOTE: If the `ResolvedDocument` is no longer needed after calling this method
-    * then consider using `intoDocument()` for efficiency.
-    * @returns {Document}
-    */
-    document() {
-        const ret = wasm.resolveddocument_document(this.ptr);
-        return Document.__wrap(ret);
-    }
-    /**
-    * Consumes this object and returns the inner DID document.
-    *
-    * NOTE: trying to use the `ResolvedDocument` after calling this will throw an error.
-    * @returns {Document}
-    */
-    intoDocument() {
-        const ptr = this.__destroy_into_raw();
-        const ret = wasm.resolveddocument_intoDocument(ptr);
-        return Document.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the diff chain message id.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @returns {string}
-    */
-    diffMessageId() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.resolveddocument_diffMessageId(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Sets the diff chain message id.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {string} value
-    */
-    setDiffMessageId(value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.resolveddocument_setDiffMessageId(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the integration chain message id.
-    * @returns {string}
-    */
-    integrationMessageId() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.resolveddocument_integrationMessageId(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Sets the integration chain message id.
-    * @param {string} value
-    */
-    setIntegrationMessageId(value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.resolveddocument_setIntegrationMessageId(retptr, this.ptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            if (r1) {
-                throw takeObject(r0);
-            }
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `Document` object as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.resolveddocument_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Document` object from a JSON object.
-    * @param {any} json
-    * @returns {ResolvedDocument}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.resolveddocument_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return ResolvedDocument.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {ResolvedDocument}
-    */
-    clone() {
-        const ret = wasm.resolveddocument_clone(this.ptr);
-        return ResolvedDocument.__wrap(ret);
-    }
-}
-
-const ResolverFinalization = new FinalizationRegistry(ptr => wasm.__wbg_resolver_free(ptr));
-/**
-*/
-export class Resolver {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Resolver.prototype);
-        obj.ptr = ptr;
-        ResolverFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ResolverFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_resolver_free(ptr);
-    }
-    /**
-    * Constructs a new `Resolver` with a default `Client` for
-    * the `Mainnet`.
-    */
-    constructor() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.resolver_new(retptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Resolver.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a {@link ResolverBuilder} to construct a new `Resolver`.
-    * @returns {ResolverBuilder}
-    */
-    static builder() {
-        const ret = wasm.resolver_builder();
-        return ResolverBuilder.__wrap(ret);
-    }
-    /**
-    * Returns the `Client` corresponding to the given network name if one exists.
-    * @param {string} network_name
-    * @returns {Client | undefined}
-    */
-    getClient(network_name) {
-        const ptr0 = passStringToWasm0(network_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.resolver_getClient(this.ptr, ptr0, len0);
-        return ret === 0 ? undefined : Client.__wrap(ret);
-    }
-    /**
-    * Fetches the `Document` of the given `DID`.
-    * @param {DID | string} did
-    * @returns {Promise<ResolvedDocument>}
-    */
-    resolve(did) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.resolver_resolve(retptr, this.ptr, addHeapObject(did));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Fetches the `DocumentHistory` of the given `DID`.
-    * @param {DID | string} did
-    * @returns {Promise<DocumentHistory>}
-    */
-    resolveHistory(did) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.resolver_resolveHistory(retptr, this.ptr, addHeapObject(did));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns the `DiffChainHistory` of a diff chain starting from a `Document` on the
-    * integration chain.
-    *
-    * NOTE: the document must have been published to the Tangle and have a valid message id.
-    *
-    * @deprecated since 0.5.0, diff chain features are slated for removal.
-    * @param {ResolvedDocument} document
-    * @returns {Promise<DiffChainHistory>}
-    */
-    resolveDiffHistory(document) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(document, ResolvedDocument);
-            wasm.resolver_resolveDiffHistory(retptr, this.ptr, document.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Fetches the DID Document of the issuer on a `Credential`.
-    *
-    * ### Errors
-    *
-    * Errors if the issuer URL is not a valid `DID` or document resolution fails.
-    * @param {Credential} credential
-    * @returns {Promise<ResolvedDocument>}
-    */
-    resolveCredentialIssuer(credential) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(credential, Credential);
-            wasm.resolver_resolveCredentialIssuer(retptr, this.ptr, credential.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Fetches all DID Documents of `Credential` issuers contained in a `Presentation`.
-    * Issuer documents are returned in arbitrary order.
-    *
-    * ### Errors
-    *
-    * Errors if any issuer URL is not a valid `DID` or document resolution fails.
-    * @param {Presentation} presentation
-    * @returns {Promise<Array<ResolvedDocument>>}
-    */
-    resolvePresentationIssuers(presentation) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(presentation, Presentation);
-            wasm.resolver_resolvePresentationIssuers(retptr, this.ptr, presentation.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Fetches the DID Document of the holder of a `Presentation`.
-    *
-    * ### Errors
-    *
-    * Errors if the holder URL is missing, is not a valid `DID`, or document resolution fails.
-    * @param {Presentation} presentation
-    * @returns {Promise<ResolvedDocument>}
-    */
-    resolvePresentationHolder(presentation) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(presentation, Presentation);
-            wasm.resolver_resolvePresentationHolder(retptr, this.ptr, presentation.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Verifies a `Presentation`.
-    *
-    * ### Important
-    * See `PresentationValidator::validate` for information about which properties get
-    * validated and what is expected of the optional arguments `holder` and `issuer`.
-    *
-    * ### Resolution
-    * The DID Documents for the `holder` and `issuers` are optionally resolved if not given.
-    * If you already have up-to-date versions of these DID Documents, you may want
-    * to use `PresentationValidator::validate`.
-    * See also `Resolver::resolvePresentationIssuers` and `Resolver::resolvePresentationHolder`.
-    *
-    * ### Errors
-    * Errors from resolving the holder and issuer DID Documents, if not provided, will be returned immediately.
-    * Otherwise, errors from validating the presentation and its credentials will be returned
-    * according to the `fail_fast` parameter.
-    * @param {Presentation} presentation
-    * @param {PresentationValidationOptions} options
-    * @param {number} fail_fast
-    * @param {ResolvedDocument | undefined} holder
-    * @param {Array<ResolvedDocument> | undefined} issuers
-    * @returns {Promise<void>}
-    */
-    verifyPresentation(presentation, options, fail_fast, holder, issuers) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(presentation, Presentation);
-            _assertClass(options, PresentationValidationOptions);
-            wasm.resolver_verifyPresentation(retptr, this.ptr, presentation.ptr, options.ptr, fail_fast, isLikeNone(holder) ? 0 : addHeapObject(holder), isLikeNone(issuers) ? 0 : addHeapObject(issuers));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const ResolverBuilderFinalization = new FinalizationRegistry(ptr => wasm.__wbg_resolverbuilder_free(ptr));
-/**
-* Builder for configuring [`Clients`][Client] when constructing a [`Resolver`].
-*/
-export class ResolverBuilder {
-
-    static __wrap(ptr) {
-        const obj = Object.create(ResolverBuilder.prototype);
-        obj.ptr = ptr;
-        ResolverBuilderFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ResolverBuilderFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_resolverbuilder_free(ptr);
-    }
-    /**
-    * Constructs a new `ResolverBuilder` with no `Clients` configured.
-    */
-    constructor() {
-        const ret = wasm.resolverbuilder_new();
-        return ResolverBuilder.__wrap(ret);
-    }
-    /**
-    * Inserts a `Client`.
-    *
-    * NOTE: replaces any previous `Client` or `Config` with the same network name.
-    * @param {Client} client
-    * @returns {ResolverBuilder}
-    */
-    client(client) {
-        const ptr = this.__destroy_into_raw();
-        _assertClass(client, Client);
-        const ret = wasm.resolverbuilder_client(ptr, client.ptr);
-        return ResolverBuilder.__wrap(ret);
-    }
-    /**
-    * Inserts a `Config` used to create a `Client`.
-    *
-    * NOTE: replaces any previous `Client` or `Config` with the same network name.
-    * @param {IClientConfig} config
-    * @returns {ResolverBuilder}
-    */
-    clientConfig(config) {
-        try {
-            const ptr = this.__destroy_into_raw();
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.resolverbuilder_clientConfig(retptr, ptr, addHeapObject(config));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return ResolverBuilder.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Constructs a new [`Resolver`] based on the builder configuration.
-    * @returns {Promise<Resolver>}
-    */
-    build() {
-        const ptr = this.__destroy_into_raw();
-        const ret = wasm.resolverbuilder_build(ptr);
-        return takeObject(ret);
-    }
-}
-
-const RevocationBitmapFinalization = new FinalizationRegistry(ptr => wasm.__wbg_revocationbitmap_free(ptr));
-/**
-* A compressed bitmap for managing credential revocation.
-*/
-export class RevocationBitmap {
-
-    static __wrap(ptr) {
-        const obj = Object.create(RevocationBitmap.prototype);
-        obj.ptr = ptr;
-        RevocationBitmapFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        RevocationBitmapFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_revocationbitmap_free(ptr);
-    }
-    /**
-    * Creates a new `RevocationBitmap` instance.
-    */
-    constructor() {
-        const ret = wasm.revocationbitmap_new();
-        return RevocationBitmap.__wrap(ret);
-    }
-    /**
-    * The name of the service type.
-    * @returns {string}
-    */
-    static type() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.revocationbitmap_type(retptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns `true` if the credential at the given `index` is revoked.
-    * @param {number} index
-    * @returns {boolean}
-    */
-    isRevoked(index) {
-        const ret = wasm.revocationbitmap_isRevoked(this.ptr, index);
-        return ret !== 0;
-    }
-    /**
-    * Mark the given index as revoked.
-    *
-    * Returns true if the index was absent from the set.
-    * @param {number} index
-    * @returns {boolean}
-    */
-    revoke(index) {
-        const ret = wasm.revocationbitmap_revoke(this.ptr, index);
-        return ret !== 0;
-    }
-    /**
-    * Mark the index as not revoked.
-    *
-    * Returns true if the index was present in the set.
-    * @param {number} index
-    * @returns {boolean}
-    */
-    unrevoke(index) {
-        const ret = wasm.revocationbitmap_unrevoke(this.ptr, index);
-        return ret !== 0;
-    }
-    /**
-    * Returns the number of revoked credentials.
-    * @returns {number}
-    */
-    len() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.revocationbitmap_len(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return r0 >>> 0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Return the bitmap as a data url embedded in a service endpoint.
-    * @returns {string | string[] | Map<string, string[]>}
-    */
-    toEndpoint() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.revocationbitmap_toEndpoint(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Construct a `RevocationBitmap` from a data `url`.
-    * @param {string | string[] | Map<string, string[]>} endpoint
-    * @returns {RevocationBitmap}
-    */
-    static fromEndpoint(endpoint) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.revocationbitmap_fromEndpoint(retptr, addHeapObject(endpoint));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return RevocationBitmap.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const ServiceFinalization = new FinalizationRegistry(ptr => wasm.__wbg_service_free(ptr));
-/**
-* A DID Document Service used to enable trusted interactions associated
-* with a DID subject.
-*
-* See: https://www.w3.org/TR/did-core/#services
-*/
-export class Service {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Service.prototype);
-        obj.ptr = ptr;
-        ServiceFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        ServiceFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_service_free(ptr);
-    }
-    /**
-    * @param {IService} service
-    */
-    constructor(service) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.service_new(retptr, addHeapObject(service));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Service.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the `Service` id.
-    * @returns {DIDUrl}
-    */
-    id() {
-        const ret = wasm.service_id(this.ptr);
-        return DIDUrl.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the `Service` type.
-    * @returns {string}
-    */
-    type() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.service_type(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Returns a copy of the `Service` endpoint.
-    * @returns {string | string[] | Map<string, string[]>}
-    */
-    serviceEndpoint() {
-        const ret = wasm.service_serviceEndpoint(this.ptr);
-        return takeObject(ret);
-    }
-    /**
-    * Returns a copy of the custom properties on the `Service`.
-    * @returns {Map<string, any>}
-    */
-    properties() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.service_properties(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `Service` object as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.service_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Service` object from a JSON object.
-    * @param {any} value
-    * @returns {Service}
-    */
-    static fromJSON(value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.service_fromJSON(retptr, addBorrowedObject(value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Service.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {Service}
-    */
-    clone() {
-        const ret = wasm.service_clone(this.ptr);
-        return Service.__wrap(ret);
-    }
-}
-
-const SignatureFinalization = new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr));
-/**
-*/
-export class Signature {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Signature.prototype);
-        obj.ptr = ptr;
-        SignatureFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        SignatureFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_signature_free(ptr);
-    }
-    /**
-    * Creates a new `Signature`.
-    * @param {Uint8Array} data
-    */
-    constructor(data) {
-        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
-        const len0 = WASM_VECTOR_LEN;
-        const ret = wasm.signature_new(ptr0, len0);
-        return Signature.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the signature as a `UInt8Array`.
-    * @returns {Uint8Array}
-    */
-    asBytes() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.signature_asBytes(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var v0 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v0;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Serializes a `Signature` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.signature_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a JSON object as `Signature`.
-    * @param {any} json_value
-    * @returns {Signature}
-    */
-    static fromJSON(json_value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.signature_fromJSON(retptr, addHeapObject(json_value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Signature.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-const StorageTestSuiteFinalization = new FinalizationRegistry(ptr => wasm.__wbg_storagetestsuite_free(ptr));
-/**
-* A test suite for the `Storage` interface.
-*
-* This module contains a set of tests that a correct storage implementation
-* should pass. Note that not every edge case is tested.
-*
-* Tests usually rely on multiple interface methods being implemented, so they should only
-* be run on a fully implemented version. That's why there is not a single test case for every
-* interface method.
-*/
-export class StorageTestSuite {
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        StorageTestSuiteFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_storagetestsuite_free(ptr);
-    }
-    /**
-    * @param {Storage} storage
-    * @returns {Promise<void>}
-    */
-    static didCreateGenerateKeyTest(storage) {
-        const ret = wasm.storagetestsuite_didCreateGenerateKeyTest(addHeapObject(storage));
-        return takeObject(ret);
-    }
-    /**
-    * @param {Storage} storage
-    * @returns {Promise<void>}
-    */
-    static didCreatePrivateKeyTest(storage) {
-        const ret = wasm.storagetestsuite_didCreatePrivateKeyTest(addHeapObject(storage));
-        return takeObject(ret);
-    }
-    /**
-    * @param {Storage} storage
-    * @returns {Promise<void>}
-    */
-    static didListTest(storage) {
-        const ret = wasm.storagetestsuite_didListTest(addHeapObject(storage));
-        return takeObject(ret);
-    }
-    /**
-    * @param {Storage} storage
-    * @returns {Promise<void>}
-    */
-    static didPurgeTest(storage) {
-        const ret = wasm.storagetestsuite_didPurgeTest(addHeapObject(storage));
-        return takeObject(ret);
-    }
-    /**
-    * @param {Storage} storage
-    * @returns {Promise<void>}
-    */
-    static keyGenerateTest(storage) {
-        const ret = wasm.storagetestsuite_keyGenerateTest(addHeapObject(storage));
-        return takeObject(ret);
-    }
-    /**
-    * @param {Storage} storage
-    * @returns {Promise<void>}
-    */
-    static keyDeleteTest(storage) {
-        const ret = wasm.storagetestsuite_keyDeleteTest(addHeapObject(storage));
-        return takeObject(ret);
-    }
-    /**
-    * @param {Storage} storage
-    * @returns {Promise<void>}
-    */
-    static keyInsertTest(storage) {
-        const ret = wasm.storagetestsuite_keyInsertTest(addHeapObject(storage));
-        return takeObject(ret);
-    }
-    /**
-    * @param {Storage} storage
-    * @returns {Promise<void>}
-    */
-    static keySignEd25519Test(storage) {
-        const ret = wasm.storagetestsuite_keySignEd25519Test(addHeapObject(storage));
-        return takeObject(ret);
-    }
-    /**
-    * @param {Storage} alice_storage
-    * @param {Storage} bob_storage
-    * @returns {Promise<void>}
-    */
-    static encryptionTest(alice_storage, bob_storage) {
-        const ret = wasm.storagetestsuite_encryptionTest(addHeapObject(alice_storage), addHeapObject(bob_storage));
-        return takeObject(ret);
-    }
-}
-
-const TimestampFinalization = new FinalizationRegistry(ptr => wasm.__wbg_timestamp_free(ptr));
-/**
-*/
-export class Timestamp {
-
-    static __wrap(ptr) {
-        const obj = Object.create(Timestamp.prototype);
-        obj.ptr = ptr;
-        TimestampFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        TimestampFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_timestamp_free(ptr);
-    }
-    /**
-    * Parses a `Timestamp` from the provided input string.
-    * @param {string} input
-    * @returns {Timestamp}
-    */
-    static parse(input) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.timestamp_parse(retptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Timestamp.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Creates a new `Timestamp` with the current date and time.
-    * @returns {Timestamp}
-    */
-    static nowUTC() {
-        const ret = wasm.timestamp_nowUTC();
-        return Timestamp.__wrap(ret);
-    }
-    /**
-    * Returns the `Timestamp` as an RFC 3339 `String`.
-    * @returns {string}
-    */
-    toRFC3339() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.timestamp_toRFC3339(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            return getStringFromWasm0(r0, r1);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            wasm.__wbindgen_free(r0, r1);
-        }
-    }
-    /**
-    * Computes `self + duration`
-    *
-    * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).
-    * @param {Duration} duration
-    * @returns {Timestamp | undefined}
-    */
-    checkedAdd(duration) {
-        _assertClass(duration, Duration);
-        const ret = wasm.timestamp_checkedAdd(this.ptr, duration.ptr);
-        return ret === 0 ? undefined : Timestamp.__wrap(ret);
-    }
-    /**
-    * Computes `self - duration`
-    *
-    * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).
-    * @param {Duration} duration
-    * @returns {Timestamp | undefined}
-    */
-    checkedSub(duration) {
-        _assertClass(duration, Duration);
-        const ret = wasm.timestamp_checkedSub(this.ptr, duration.ptr);
-        return ret === 0 ? undefined : Timestamp.__wrap(ret);
-    }
-    /**
-    * Serializes a `Timestamp` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.timestamp_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `Timestamp` from a JSON object.
-    * @param {any} json
-    * @returns {Timestamp}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.timestamp_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return Timestamp.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-}
-
-const VerificationMethodFinalization = new FinalizationRegistry(ptr => wasm.__wbg_verificationmethod_free(ptr));
-/**
-*/
-export class VerificationMethod {
-
-    static __wrap(ptr) {
-        const obj = Object.create(VerificationMethod.prototype);
-        obj.ptr = ptr;
-        VerificationMethodFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        VerificationMethodFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_verificationmethod_free(ptr);
-    }
-    /**
-    * Creates a new `VerificationMethod` object from the given `did` and public key.
-    * @param {DID} did
-    * @param {number} key_type
-    * @param {Uint8Array} public_key
-    * @param {string} fragment
-    */
-    constructor(did, key_type, public_key, fragment) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            _assertClass(did, DID);
-            const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            const ptr1 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-            const len1 = WASM_VECTOR_LEN;
-            wasm.verificationmethod_new(retptr, did.ptr, key_type, ptr0, len0, ptr1, len1);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return VerificationMethod.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Returns a copy of the `id` `DIDUrl` of the `VerificationMethod` object.
-    * @returns {DIDUrl}
-    */
-    id() {
-        const ret = wasm.verificationmethod_id(this.ptr);
-        return DIDUrl.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the `controller` `DID` of the `VerificationMethod` object.
-    * @returns {DID}
-    */
-    controller() {
-        const ret = wasm.verificationmethod_controller(this.ptr);
-        return DID.__wrap(ret);
-    }
-    /**
-    * Sets the `controller` `DID` of the `VerificationMethod` object.
-    * @param {DID} did
-    */
-    SetController(did) {
-        _assertClass(did, DID);
-        wasm.verificationmethod_SetController(this.ptr, did.ptr);
-    }
-    /**
-    * Returns a copy of the `VerificationMethod` type.
-    * @returns {MethodType}
-    */
-    type() {
-        const ret = wasm.verificationmethod_type(this.ptr);
-        return MethodType.__wrap(ret);
-    }
-    /**
-    * Returns a copy of the `VerificationMethod` public key data.
-    * @returns {MethodData}
-    */
-    data() {
-        const ret = wasm.verificationmethod_data(this.ptr);
-        return MethodData.__wrap(ret);
-    }
-    /**
-    * Serializes a `VerificationMethod` object as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.verificationmethod_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `VerificationMethod` object from a JSON object.
-    * @param {any} value
-    * @returns {VerificationMethod}
-    */
-    static fromJSON(value) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.verificationmethod_fromJSON(retptr, addBorrowedObject(value));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return VerificationMethod.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {VerificationMethod}
-    */
-    clone() {
-        const ret = wasm.verificationmethod_clone(this.ptr);
-        return VerificationMethod.__wrap(ret);
-    }
-}
-
-const VerifierOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_verifieroptions_free(ptr));
-/**
-* Holds additional proof verification options.
-* See `IVerifierOptions`.
-*/
-export class VerifierOptions {
-
-    static __wrap(ptr) {
-        const obj = Object.create(VerifierOptions.prototype);
-        obj.ptr = ptr;
-        VerifierOptionsFinalization.register(obj, obj.ptr, obj);
-        return obj;
-    }
-
-    toJSON() {
-        return {
-        };
-    }
-
-    toString() {
-        return JSON.stringify(this);
-    }
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        VerifierOptionsFinalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_verifieroptions_free(ptr);
-    }
-    /**
-    * Creates a new `VerifierOptions` from the given fields.
-    *
-    * Throws an error if any of the options are invalid.
-    * @param {IVerifierOptions} options
-    */
-    constructor(options) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.verifieroptions_new(retptr, addHeapObject(options));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return VerifierOptions.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Creates a new `VerifierOptions` with default options.
-    * @returns {VerifierOptions}
-    */
-    static default() {
-        const ret = wasm.verifieroptions_default();
-        return VerifierOptions.__wrap(ret);
-    }
-    /**
-    * Serializes a `VerifierOptions` as a JSON object.
-    * @returns {any}
-    */
-    toJSON() {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.verifieroptions_toJSON(retptr, this.ptr);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return takeObject(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Deserializes a `VerifierOptions` from a JSON object.
-    * @param {any} json
-    * @returns {VerifierOptions}
-    */
-    static fromJSON(json) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            wasm.verifieroptions_fromJSON(retptr, addBorrowedObject(json));
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            if (r2) {
-                throw takeObject(r1);
-            }
-            return VerifierOptions.__wrap(r0);
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-            heap[stack_pointer++] = undefined;
-        }
-    }
-    /**
-    * Deep clones the object.
-    * @returns {VerifierOptions}
-    */
-    clone() {
-        const ret = wasm.verifieroptions_clone(this.ptr);
-        return VerifierOptions.__wrap(ret);
-    }
-}
-
-const X25519Finalization = new FinalizationRegistry(ptr => wasm.__wbg_x25519_free(ptr));
-/**
-* An implementation of `X25519` Elliptic-curve Diffie-Hellman (ECDH) cryptographic key exchange.
-*/
-export class X25519 {
-
-    __destroy_into_raw() {
-        const ptr = this.ptr;
-        this.ptr = 0;
-        X25519Finalization.unregister(this);
-        return ptr;
-    }
-
-    free() {
-        const ptr = this.__destroy_into_raw();
-        wasm.__wbg_x25519_free(ptr);
-    }
-    /**
-    * Length in bytes of an X25519 private key.
-    * @returns {number}
-    */
-    static PRIVATE_KEY_LENGTH() {
-        const ret = wasm.x25519_PRIVATE_KEY_LENGTH();
-        return ret >>> 0;
-    }
-    /**
-    * Length in bytes of an X25519 public key.
-    * @returns {number}
-    */
-    static PUBLIC_KEY_LENGTH() {
-        const ret = wasm.x25519_PUBLIC_KEY_LENGTH();
-        return ret >>> 0;
-    }
-    /**
-    * Performs Diffie-Hellman key exchange using the private key of the first party with the
-    * public key of the second party, resulting in a shared secret.
-    * @param {Uint8Array} privateKey
-    * @param {Uint8Array} publicKey
-    * @returns {Uint8Array}
-    */
-    static keyExchange(privateKey, publicKey) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            const ptr1 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);
-            const len1 = WASM_VECTOR_LEN;
-            wasm.x25519_keyExchange(retptr, ptr0, len0, ptr1, len1);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            if (r3) {
-                throw takeObject(r2);
-            }
-            var v2 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v2;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Transforms an `Ed25519` private key to an `X25519` private key.
-    *
-    * This is possible because Ed25519 is birationally equivalent to Curve25519 used by X25519.
-    * @param {Uint8Array} privateKey
-    * @returns {Uint8Array}
-    */
-    static Ed25519toX25519Private(privateKey) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.x25519_Ed25519toX25519Private(retptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            if (r3) {
-                throw takeObject(r2);
-            }
-            var v1 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v1;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-    /**
-    * Transforms an `Ed25519` public key to an `X25519` public key.
-    *
-    * This is possible because Ed25519 is birationally equivalent to Curve25519 used by X25519.
-    * @param {Uint8Array} publicKey
-    * @returns {Uint8Array}
-    */
-    static Ed25519toX25519Public(publicKey) {
-        try {
-            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
-            const ptr0 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);
-            const len0 = WASM_VECTOR_LEN;
-            wasm.x25519_Ed25519toX25519Public(retptr, ptr0, len0);
-            var r0 = getInt32Memory0()[retptr / 4 + 0];
-            var r1 = getInt32Memory0()[retptr / 4 + 1];
-            var r2 = getInt32Memory0()[retptr / 4 + 2];
-            var r3 = getInt32Memory0()[retptr / 4 + 3];
-            if (r3) {
-                throw takeObject(r2);
-            }
-            var v1 = getArrayU8FromWasm0(r0, r1).slice();
-            wasm.__wbindgen_free(r0, r1 * 1);
-            return v1;
-        } finally {
-            wasm.__wbindgen_add_to_stack_pointer(16);
-        }
-    }
-}
-
-async function load(module, imports) {
-    if (typeof Response === 'function' && module instanceof Response) {
-        if (typeof WebAssembly.instantiateStreaming === 'function') {
-            try {
-                return await WebAssembly.instantiateStreaming(module, imports);
-
-            } catch (e) {
-                if (module.headers.get('Content-Type') != 'application/wasm') {
-                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
-
-                } else {
-                    throw e;
-                }
-            }
-        }
-
-        const bytes = await module.arrayBuffer();
-        return await WebAssembly.instantiate(bytes, imports);
-
-    } else {
-        const instance = await WebAssembly.instantiate(module, imports);
-
-        if (instance instanceof WebAssembly.Instance) {
-            return { instance, module };
-
-        } else {
-            return instance;
-        }
-    }
-}
-
-function getImports() {
-    const imports = {};
-    imports.wbg = {};
-    imports.wbg.__wbg_forceIntegrationUpdate_641fd7b976adff69 = function(arg0) {
-        const ret = getObject(arg0).forceIntegrationUpdate;
-        return isLikeNone(ret) ? 0xFFFFFF : ret ? 1 : 0;
-    };
-    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
-        takeObject(arg0);
-    };
-    imports.wbg.__wbg_fragment_25296ef0b74e471c = function(arg0, arg1) {
-        const ret = getObject(arg1).fragment;
-        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_relationships_c7202aa83d5786f9 = function(arg0) {
-        const ret = getObject(arg0).relationships;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_fragment_e12c852962da3c2f = function(arg0, arg1) {
-        const ret = getObject(arg1).fragment;
-        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_scope_5601b30729b55bad = function(arg0) {
-        const ret = getObject(arg0).scope;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_content_f0d524fd72f59620 = function(arg0) {
-        const ret = getObject(arg0).content;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_fragment_a25c44360edfc7ab = function(arg0, arg1) {
-        const ret = getObject(arg1).fragment;
-        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_relationships_1bf1dd48031307c9 = function(arg0) {
-        const ret = getObject(arg0).relationships;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_documenthistory_new = function(arg0) {
-        const ret = DocumentHistory.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_diffchainhistory_new = function(arg0) {
-        const ret = DiffChainHistory.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_account_new = function(arg0) {
-        const ret = Account.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_resolver_new = function(arg0) {
-        const ret = Resolver.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_signWith_26510522782c9743 = function(arg0, arg1) {
-        const ret = getObject(arg1).signWith;
-        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_endpoint_89ffe3f61253a70c = function(arg0) {
-        const ret = getObject(arg0).endpoint;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_properties_b83a47dc5145e6b1 = function(arg0) {
-        const ret = getObject(arg0).properties;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_urls_2b5b5612ab9e9967 = function(arg0) {
-        const ret = getObject(arg0).urls;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_controllers_4399724802a69314 = function(arg0) {
-        const ret = getObject(arg0).controllers;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_credential_new = function(arg0) {
-        const ret = Credential.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_resolveddocument_new = function(arg0) {
-        const ret = ResolvedDocument.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_service_new = function(arg0) {
-        const ret = Service.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
-        const ret = getStringFromWasm0(arg0, arg1);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_diffmessage_new = function(arg0) {
-        const ret = DiffMessage.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_did_new = function(arg0) {
-        const ret = DID.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_verificationmethod_new = function(arg0) {
-        const ret = VerificationMethod.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_privateKey_f7e2aae190433242 = function(arg0, arg1) {
-        const ret = getObject(arg1).privateKey;
-        var ptr0 = isLikeNone(ret) ? 0 : passArray8ToWasm0(ret, wasm.__wbindgen_malloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_autopublish_9d92161d27e897c1 = function(arg0) {
-        const ret = getObject(arg0).autopublish;
-        return isLikeNone(ret) ? 0xFFFFFF : ret ? 1 : 0;
-    };
-    imports.wbg.__wbg_autosave_b8db1c486313174b = function(arg0) {
-        const ret = getObject(arg0).autosave;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_clientConfig_3c2dd50a526ba96a = function(arg0) {
-        const ret = getObject(arg0).clientConfig;
-        return isLikeNone(ret) ? 0 : addHeapObject(ret);
-    };
-    imports.wbg.__wbg_storage_74384a6249104eeb = function(arg0) {
-        const ret = getObject(arg0).storage;
-        return isLikeNone(ret) ? 0 : addHeapObject(ret);
-    };
-    imports.wbg.__wbg_fragment_c8587d74bb1b41dd = function(arg0, arg1) {
-        const ret = getObject(arg1).fragment;
-        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_fragment_e50e6d708e6d988c = function(arg0, arg1) {
-        const ret = getObject(arg1).fragment;
-        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_client_new = function(arg0) {
-        const ret = Client.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {
-        const ret = new Error(getStringFromWasm0(arg0, arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_receipt_new = function(arg0) {
-        const ret = Receipt.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_id_3dc663ab7a361b11 = function(arg0) {
-        const ret = getObject(arg0).id;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_serviceEndpoint_d0df0dca54fd1088 = function(arg0) {
-        const ret = getObject(arg0).serviceEndpoint;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_properties_7a9978c87641ff8d = function(arg0) {
-        const ret = getObject(arg0).properties;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_type_61d3194948f52780 = function(arg0, arg1) {
-        const ret = getObject(arg1).type;
-        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_presentation_new = function(arg0) {
-        const ret = Presentation.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_is_null = function(arg0) {
-        const ret = getObject(arg0) === null;
-        return ret;
-    };
-    imports.wbg.__wbindgen_is_undefined = function(arg0) {
-        const ret = getObject(arg0) === undefined;
-        return ret;
-    };
-    imports.wbg.__wbg_document_new = function(arg0) {
-        const ret = Document.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_encrypteddata_new = function(arg0) {
-        const ret = EncryptedData.__wrap(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_flushChanges_1b3e7070edebd3c7 = function(arg0) {
-        const ret = getObject(arg0).flushChanges();
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_didList_837aa54393a8ecef = function(arg0) {
-        const ret = getObject(arg0).didList();
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_json_parse = function(arg0, arg1) {
-        const ret = JSON.parse(getStringFromWasm0(arg0, arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_json_serialize = function(arg0, arg1) {
-        const obj = getObject(arg1);
-        const ret = JSON.stringify(obj === undefined ? null : obj);
-        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_fragment_2a56fdc975987578 = function(arg0, arg1) {
-        const ret = getObject(arg1).fragment;
-        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_type_fea5cfdd0db34544 = function(arg0, arg1) {
-        const ret = getObject(arg1).type;
-        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_didCreate_564518ce4160d06e = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
-        let v0;
-        if (arg5 !== 0) {
-            v0 = getArrayU8FromWasm0(arg5, arg6).slice();
-            wasm.__wbindgen_free(arg5, arg6 * 1);
-        }
-        const ret = getObject(arg0).didCreate(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), v0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_didPurge_14c8f1f02cf5a5b5 = function(arg0, arg1) {
-        const ret = getObject(arg0).didPurge(DID.__wrap(arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_didExists_f3e119d2efa95097 = function(arg0, arg1) {
-        const ret = getObject(arg0).didExists(DID.__wrap(arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_keyGenerate_b15d8eba573d7ff9 = function(arg0, arg1, arg2, arg3, arg4) {
-        try {
-            const ret = getObject(arg0).keyGenerate(DID.__wrap(arg1), arg2 >>> 0, getStringFromWasm0(arg3, arg4));
-            return addHeapObject(ret);
-        } finally {
-            wasm.__wbindgen_free(arg3, arg4);
-        }
-    };
-    imports.wbg.__wbg_keyInsert_8a0e701b351551b6 = function(arg0, arg1, arg2, arg3, arg4) {
-        var v0 = getArrayU8FromWasm0(arg3, arg4).slice();
-        wasm.__wbindgen_free(arg3, arg4 * 1);
-        const ret = getObject(arg0).keyInsert(DID.__wrap(arg1), KeyLocation.__wrap(arg2), v0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_keyPublic_11a79e1b5f708b41 = function(arg0, arg1, arg2) {
-        const ret = getObject(arg0).keyPublic(DID.__wrap(arg1), KeyLocation.__wrap(arg2));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_keyDelete_f01483f265a4e273 = function(arg0, arg1, arg2) {
-        const ret = getObject(arg0).keyDelete(DID.__wrap(arg1), KeyLocation.__wrap(arg2));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_keySign_65f2fbbe5dee6f08 = function(arg0, arg1, arg2, arg3, arg4) {
-        var v0 = getArrayU8FromWasm0(arg3, arg4).slice();
-        wasm.__wbindgen_free(arg3, arg4 * 1);
-        const ret = getObject(arg0).keySign(DID.__wrap(arg1), KeyLocation.__wrap(arg2), v0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_keyExists_9f0e24a0dc921a0f = function(arg0, arg1, arg2) {
-        const ret = getObject(arg0).keyExists(DID.__wrap(arg1), KeyLocation.__wrap(arg2));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_dataEncrypt_d3fdd1572872900e = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
-        var v0 = getArrayU8FromWasm0(arg2, arg3).slice();
-        wasm.__wbindgen_free(arg2, arg3 * 1);
-        var v1 = getArrayU8FromWasm0(arg4, arg5).slice();
-        wasm.__wbindgen_free(arg4, arg5 * 1);
-        var v2 = getArrayU8FromWasm0(arg8, arg9).slice();
-        wasm.__wbindgen_free(arg8, arg9 * 1);
-        const ret = getObject(arg0).dataEncrypt(DID.__wrap(arg1), v0, v1, EncryptionAlgorithm.__wrap(arg6), CekAlgorithm.__wrap(arg7), v2);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_dataDecrypt_77871e9915a5d30e = function(arg0, arg1, arg2, arg3, arg4, arg5) {
-        const ret = getObject(arg0).dataDecrypt(DID.__wrap(arg1), EncryptedData.__wrap(arg2), EncryptionAlgorithm.__wrap(arg3), CekAlgorithm.__wrap(arg4), KeyLocation.__wrap(arg5));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_chainStateGet_6e79198c588db9e7 = function(arg0, arg1) {
-        const ret = getObject(arg0).chainStateGet(DID.__wrap(arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_chainStateSet_da53cea6c2166f4e = function(arg0, arg1, arg2) {
-        const ret = getObject(arg0).chainStateSet(DID.__wrap(arg1), ChainState.__wrap(arg2));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_documentGet_f0d797c335fedd28 = function(arg0, arg1) {
-        const ret = getObject(arg0).documentGet(DID.__wrap(arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_documentSet_f41fdfb8cb62830e = function(arg0, arg1, arg2) {
-        const ret = getObject(arg0).documentSet(DID.__wrap(arg1), Document.__wrap(arg2));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_new_693216e109162396 = function() {
-        const ret = new Error();
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_stack_0ddaca5d1abfb52f = function(arg0, arg1) {
-        const ret = getObject(arg1).stack;
-        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_error_09919627ac0992f5 = function(arg0, arg1) {
-        try {
-            console.error(getStringFromWasm0(arg0, arg1));
-        } finally {
-            wasm.__wbindgen_free(arg0, arg1);
-        }
-    };
-    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {
-        const obj = getObject(arg1);
-        const ret = typeof(obj) === 'string' ? obj : undefined;
-        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        var len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_fetch_b1379d93c1e2b015 = function(arg0) {
-        const ret = fetch(getObject(arg0));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
-        const ret = getObject(arg0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_cb_drop = function(arg0) {
-        const obj = takeObject(arg0).original;
-        if (obj.cnt-- == 1) {
-            obj.a = 0;
-            return true;
-        }
-        const ret = false;
-        return ret;
-    };
-    imports.wbg.__wbg_fetch_8c28485eb2d6317d = function(arg0, arg1) {
-        const ret = getObject(arg0).fetch(getObject(arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_instanceof_Response_e928c54c1025470c = function(arg0) {
-        const ret = getObject(arg0) instanceof Response;
-        return ret;
-    };
-    imports.wbg.__wbg_url_0f82030e7245954c = function(arg0, arg1) {
-        const ret = getObject(arg1).url;
-        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbg_status_5b4a574de7c5bbfe = function(arg0) {
-        const ret = getObject(arg0).status;
-        return ret;
-    };
-    imports.wbg.__wbg_headers_1dc1ef92ba3d32b1 = function(arg0) {
-        const ret = getObject(arg0).headers;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_text_5cb78830c1a11c5b = function() { return handleError(function (arg0) {
-        const ret = getObject(arg0).text();
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_now_9c64828adecad05e = function(arg0) {
-        const ret = getObject(arg0).now();
-        return ret;
-    };
-    imports.wbg.__wbg_newwithstrandinit_41c86e821f771b24 = function() { return handleError(function (arg0, arg1, arg2) {
-        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_new_483f23f84dfd2751 = function() { return handleError(function () {
-        const ret = new Headers();
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_append_fcf64231455390c4 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {
-        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
-    }, arguments) };
-    imports.wbg.__wbg_clearTimeout_65417660fe82f08d = typeof clearTimeout == 'function' ? clearTimeout : notDefined('clearTimeout');
-    imports.wbg.__wbg_setTimeout_131fc254e1bd5624 = function() { return handleError(function (arg0, arg1) {
-        const ret = setTimeout(getObject(arg0), arg1);
-        return ret;
-    }, arguments) };
-    imports.wbg.__wbg_process_e56fd54cf6319b6c = function(arg0) {
-        const ret = getObject(arg0).process;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_is_object = function(arg0) {
-        const val = getObject(arg0);
-        const ret = typeof(val) === 'object' && val !== null;
-        return ret;
-    };
-    imports.wbg.__wbg_versions_77e21455908dad33 = function(arg0) {
-        const ret = getObject(arg0).versions;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_node_0dd25d832e4785d5 = function(arg0) {
-        const ret = getObject(arg0).node;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_is_string = function(arg0) {
-        const ret = typeof(getObject(arg0)) === 'string';
-        return ret;
-    };
-    imports.wbg.__wbg_require_0db1598d9ccecb30 = function() { return handleError(function (arg0, arg1, arg2) {
-        const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_crypto_b95d7173266618a9 = function(arg0) {
-        const ret = getObject(arg0).crypto;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_msCrypto_5a86d77a66230f81 = function(arg0) {
-        const ret = getObject(arg0).msCrypto;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_getRandomValues_b14734aa289bc356 = function() { return handleError(function (arg0, arg1) {
-        getObject(arg0).getRandomValues(getObject(arg1));
-    }, arguments) };
-    imports.wbg.__wbg_static_accessor_NODE_MODULE_26b231378c1be7dd = function() {
-        const ret = module;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_randomFillSync_91e2b39becca6147 = function() { return handleError(function (arg0, arg1, arg2) {
-        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));
-    }, arguments) };
-    imports.wbg.__wbg_get_f0f4f1608ebf633e = function(arg0, arg1) {
-        const ret = getObject(arg0)[arg1 >>> 0];
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_length_93debb0e2e184ab6 = function(arg0) {
-        const ret = getObject(arg0).length;
-        return ret;
-    };
-    imports.wbg.__wbg_new_2ab697f1555e0dbc = function() {
-        const ret = new Array();
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_is_function = function(arg0) {
-        const ret = typeof(getObject(arg0)) === 'function';
-        return ret;
-    };
-    imports.wbg.__wbg_newnoargs_fc5356289219b93b = function(arg0, arg1) {
-        const ret = new Function(getStringFromWasm0(arg0, arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_new_f0540490a24a79bb = function() {
-        const ret = new Map();
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_next_0e1ee6203bc0f8ed = function(arg0) {
-        const ret = getObject(arg0).next;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_next_9ef803116340cdc1 = function() { return handleError(function (arg0) {
-        const ret = getObject(arg0).next();
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_done_2a1e30464aae6a4d = function(arg0) {
-        const ret = getObject(arg0).done;
-        return ret;
-    };
-    imports.wbg.__wbg_value_a495c29471c31da6 = function(arg0) {
-        const ret = getObject(arg0).value;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_iterator_6ac6eb1e020f18e3 = function() {
-        const ret = Symbol.iterator;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_get_89247d3aeaa38cc5 = function() { return handleError(function (arg0, arg1) {
-        const ret = Reflect.get(getObject(arg0), getObject(arg1));
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_call_4573f605ca4b5f10 = function() { return handleError(function (arg0, arg1) {
-        const ret = getObject(arg0).call(getObject(arg1));
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_new_306ce8d57919e6ae = function() {
-        const ret = new Object();
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_self_ba1ddafe9ea7a3a2 = function() { return handleError(function () {
-        const ret = self.self;
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_window_be3cc430364fd32c = function() { return handleError(function () {
-        const ret = window.window;
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_globalThis_56d9c9f814daeeee = function() { return handleError(function () {
-        const ret = globalThis.globalThis;
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_global_8c35aeee4ac77f2b = function() { return handleError(function () {
-        const ret = global.global;
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_from_7ff9036e9b5c3ccb = function(arg0) {
-        const ret = Array.from(getObject(arg0));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_push_811c8b08bf4ff9d5 = function(arg0, arg1) {
-        const ret = getObject(arg0).push(getObject(arg1));
-        return ret;
-    };
-    imports.wbg.__wbg_instanceof_Error_53fd3b982f19be06 = function(arg0) {
-        const ret = getObject(arg0) instanceof Error;
-        return ret;
-    };
-    imports.wbg.__wbg_new_651776e932b7e9c7 = function(arg0, arg1) {
-        const ret = new Error(getStringFromWasm0(arg0, arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_setname_c41f156664cf0ab9 = function(arg0, arg1, arg2) {
-        getObject(arg0).name = getStringFromWasm0(arg1, arg2);
-    };
-    imports.wbg.__wbg_toString_ef76a2af8f5bb98a = function(arg0) {
-        const ret = getObject(arg0).toString();
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_call_9855a4612eb496cb = function() { return handleError(function (arg0, arg1, arg2) {
-        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_instanceof_Map_9e1310ea011d1721 = function(arg0) {
-        const ret = getObject(arg0) instanceof Map;
-        return ret;
-    };
-    imports.wbg.__wbg_set_e44d2fe94a18567f = function(arg0, arg1, arg2) {
-        const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_now_513c8208bd94c09b = function() {
-        const ret = Date.now();
-        return ret;
-    };
-    imports.wbg.__wbg_fromEntries_06150f1d39e0a856 = function() { return handleError(function (arg0) {
-        const ret = Object.fromEntries(getObject(arg0));
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbg_new_78403b138428b684 = function(arg0, arg1) {
-        try {
-            var state0 = {a: arg0, b: arg1};
-            var cb0 = (arg0, arg1) => {
-                const a = state0.a;
-                state0.a = 0;
-                try {
-                    return __wbg_adapter_655(a, state0.b, arg0, arg1);
-                } finally {
-                    state0.a = a;
-                }
-            };
-            const ret = new Promise(cb0);
-            return addHeapObject(ret);
-        } finally {
-            state0.a = state0.b = 0;
-        }
-    };
-    imports.wbg.__wbg_resolve_f269ce174f88b294 = function(arg0) {
-        const ret = Promise.resolve(getObject(arg0));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_then_1c698eedca15eed6 = function(arg0, arg1) {
-        const ret = getObject(arg0).then(getObject(arg1));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_then_4debc41d4fc92ce5 = function(arg0, arg1, arg2) {
-        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_buffer_de1150f91b23aa89 = function(arg0) {
-        const ret = getObject(arg0).buffer;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_newwithbyteoffsetandlength_9ca61320599a2c84 = function(arg0, arg1, arg2) {
-        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_new_97cf52648830a70d = function(arg0) {
-        const ret = new Uint8Array(getObject(arg0));
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_set_a0172b213e2469e9 = function(arg0, arg1, arg2) {
-        getObject(arg0).set(getObject(arg1), arg2 >>> 0);
-    };
-    imports.wbg.__wbg_length_e09c0b925ab8de5d = function(arg0) {
-        const ret = getObject(arg0).length;
-        return ret;
-    };
-    imports.wbg.__wbg_instanceof_Uint8Array_fd17ec67c77de602 = function(arg0) {
-        const ret = getObject(arg0) instanceof Uint8Array;
-        return ret;
-    };
-    imports.wbg.__wbg_newwithlength_e833b89f9db02732 = function(arg0) {
-        const ret = new Uint8Array(arg0 >>> 0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_subarray_9482ae5cd5cd99d3 = function(arg0, arg1, arg2) {
-        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbg_has_ded5f0e31f1ff6ad = function() { return handleError(function (arg0, arg1) {
-        const ret = Reflect.has(getObject(arg0), getObject(arg1));
-        return ret;
-    }, arguments) };
-    imports.wbg.__wbg_set_b12cd0ab82903c2f = function() { return handleError(function (arg0, arg1, arg2) {
-        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));
-        return ret;
-    }, arguments) };
-    imports.wbg.__wbg_stringify_cf20dc96bee34a66 = function() { return handleError(function (arg0) {
-        const ret = JSON.stringify(getObject(arg0));
-        return addHeapObject(ret);
-    }, arguments) };
-    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
-        const ret = debugString(getObject(arg1));
-        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
-        const len0 = WASM_VECTOR_LEN;
-        getInt32Memory0()[arg0 / 4 + 1] = len0;
-        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
-    };
-    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
-        throw new Error(getStringFromWasm0(arg0, arg1));
-    };
-    imports.wbg.__wbindgen_memory = function() {
-        const ret = wasm.memory;
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_closure_wrapper8805 = function(arg0, arg1, arg2) {
-        const ret = makeMutClosure(arg0, arg1, 1515, __wbg_adapter_34);
-        return addHeapObject(ret);
-    };
-    imports.wbg.__wbindgen_closure_wrapper10366 = function(arg0, arg1, arg2) {
-        const ret = makeMutClosure(arg0, arg1, 1752, __wbg_adapter_37);
-        return addHeapObject(ret);
-    };
-
-    return imports;
-}
-
-function initMemory(imports, maybe_memory) {
-
-}
-
-function finalizeInit(instance, module) {
-    wasm = instance.exports;
-    initWasm.__wbindgen_wasm_module = module;
-    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
-    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
-
-    wasm.__wbindgen_start();
-    return wasm;
-}
-
-function initSync(bytes) {
-    const imports = getImports();
-
-    initMemory(imports);
-
-    const module = new WebAssembly.Module(bytes);
-    const instance = new WebAssembly.Instance(module, imports);
-
-    return finalizeInit(instance, module);
-}
-
-async function initWasm(input) {
-    if (typeof input === 'undefined') {
-        // input = new URL('identity_wasm_bg.wasm', import.meta.url);
-    }
-    const imports = getImports();
-
-    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
-        input = fetch(input);
-    }
-
-    initMemory(imports);
-
-    const { instance, module } = await load(await input, imports);
-
-    return finalizeInit(instance, module);
-}
-
-export { initSync }
-let __initializedIotaWasm = false
-
-export function init(path) {
-    if (__initializedIotaWasm) {
-        return Promise.resolve(wasm)
-    }
-    return initWasm(path || 'identity_wasm_bg.wasm').then(() => {
-        __initializedIotaWasm = true
-        return wasm
-    })
-}
-
diff --git a/node_modules/@iota/identity-wasm/web/identity_wasm_bg.wasm b/node_modules/@iota/identity-wasm/web/identity_wasm_bg.wasm
deleted file mode 100644
index 49ae036..0000000
Binary files a/node_modules/@iota/identity-wasm/web/identity_wasm_bg.wasm and /dev/null differ
diff --git a/node_modules/@iota/identity-wasm/web/identity_wasm_bg.wasm.d.ts b/node_modules/@iota/identity-wasm/web/identity_wasm_bg.wasm.d.ts
deleted file mode 100644
index d27276a..0000000
--- a/node_modules/@iota/identity-wasm/web/identity_wasm_bg.wasm.d.ts
+++ /dev/null
@@ -1,486 +0,0 @@
-/* tslint:disable */
-/* eslint-disable */
-export const memory: WebAssembly.Memory;
-export function __wbg_methodcontent_free(a: number): void;
-export function methodcontent_GenerateEd25519(): number;
-export function methodcontent_PrivateEd25519(a: number, b: number): number;
-export function methodcontent_PublicEd25519(a: number, b: number): number;
-export function methodcontent_GenerateX25519(): number;
-export function methodcontent_PrivateX25519(a: number, b: number): number;
-export function methodcontent_PublicX25519(a: number, b: number): number;
-export function methodcontent_toJSON(a: number, b: number): void;
-export function methodcontent_fromJSON(a: number, b: number): void;
-export function account_attachMethodRelationships(a: number, b: number, c: number): void;
-export function account_createMethod(a: number, b: number, c: number): void;
-export function account_detachMethodRelationships(a: number, b: number, c: number): void;
-export function __wbg_timestamp_free(a: number): void;
-export function timestamp_parse(a: number, b: number, c: number): void;
-export function timestamp_nowUTC(): number;
-export function timestamp_toRFC3339(a: number, b: number): void;
-export function timestamp_checkedAdd(a: number, b: number): number;
-export function timestamp_checkedSub(a: number, b: number): number;
-export function timestamp_toJSON(a: number, b: number): void;
-export function timestamp_fromJSON(a: number, b: number): void;
-export function __wbg_duration_free(a: number): void;
-export function duration_seconds(a: number): number;
-export function duration_minutes(a: number): number;
-export function duration_hours(a: number): number;
-export function duration_days(a: number): number;
-export function duration_weeks(a: number): number;
-export function duration_toJSON(a: number, b: number): void;
-export function duration_fromJSON(a: number, b: number): void;
-export function __wbg_keypair_free(a: number): void;
-export function keypair_new(a: number, b: number): void;
-export function keypair_fromKeys(a: number, b: number, c: number, d: number, e: number, f: number): void;
-export function keypair_tryFromPrivateKeyBytes(a: number, b: number, c: number, d: number): void;
-export function keypair_type(a: number): number;
-export function keypair_public(a: number, b: number): void;
-export function keypair_private(a: number, b: number): void;
-export function keypair_toJSON(a: number, b: number): void;
-export function keypair_fromJSON(a: number, b: number): void;
-export function keypair_clone(a: number): number;
-export function __wbg_verifieroptions_free(a: number): void;
-export function verifieroptions_new(a: number, b: number): void;
-export function verifieroptions_default(): number;
-export function verifieroptions_toJSON(a: number, b: number): void;
-export function verifieroptions_fromJSON(a: number, b: number): void;
-export function verifieroptions_clone(a: number): number;
-export function __wbg_chainstate_free(a: number): void;
-export function chainstate_toJSON(a: number, b: number): void;
-export function chainstate_fromJSON(a: number, b: number): void;
-export function __wbg_documenthistory_free(a: number): void;
-export function documenthistory_integrationChainData(a: number): number;
-export function documenthistory_integrationChainSpam(a: number): number;
-export function documenthistory_diffChainData(a: number): number;
-export function documenthistory_diffChainSpam(a: number): number;
-export function documenthistory_toJSON(a: number, b: number): void;
-export function documenthistory_fromJSON(a: number, b: number): void;
-export function documenthistory_clone(a: number): number;
-export function __wbg_integrationchainhistory_free(a: number): void;
-export function __wbg_diffchainhistory_free(a: number): void;
-export function integrationchainhistory_chainData(a: number): number;
-export function diffchainhistory_chainData(a: number): number;
-export function integrationchainhistory_spam(a: number): number;
-export function integrationchainhistory_toJSON(a: number, b: number): void;
-export function integrationchainhistory_fromJSON(a: number, b: number): void;
-export function diffchainhistory_spam(a: number): number;
-export function diffchainhistory_toJSON(a: number, b: number): void;
-export function diffchainhistory_fromJSON(a: number, b: number): void;
-export function __wbg_credentialvalidator_free(a: number): void;
-export function credentialvalidator_validate(a: number, b: number, c: number, d: number, e: number): void;
-export function credentialvalidator_checkStructure(a: number, b: number): void;
-export function credentialvalidator_checkExpiresOnOrAfter(a: number, b: number, c: number): void;
-export function credentialvalidator_checkIssuedOnOrBefore(a: number, b: number, c: number): void;
-export function credentialvalidator_verifySignature(a: number, b: number, c: number, d: number): void;
-export function credentialvalidator_check_subject_holder_relationship(a: number, b: number, c: number, d: number, e: number): void;
-export function credentialvalidator_checkStatus(a: number, b: number, c: number, d: number): void;
-export function __wbg_methoddata_free(a: number): void;
-export function methoddata_newBase58(a: number, b: number): number;
-export function methoddata_newMultibase(a: number, b: number): number;
-export function methoddata_tryDecode(a: number, b: number): void;
-export function methoddata_toJSON(a: number, b: number): void;
-export function methoddata_fromJSON(a: number, b: number): void;
-export function methoddata_clone(a: number): number;
-export function __wbg_account_free(a: number): void;
-export function account_did(a: number): number;
-export function account_autopublish(a: number): number;
-export function account_autosave(a: number): number;
-export function account_document(a: number): number;
-export function account_resolveIdentity(a: number): number;
-export function account_deleteIdentity(a: number): number;
-export function account_publish(a: number, b: number): number;
-export function account_createSignedCredential(a: number, b: number, c: number, d: number, e: number): number;
-export function account_createSignedDocument(a: number, b: number, c: number, d: number, e: number): number;
-export function account_createSignedPresentation(a: number, b: number, c: number, d: number, e: number): number;
-export function account_createSignedData(a: number, b: number, c: number, d: number, e: number, f: number): void;
-export function account_updateDocumentUnchecked(a: number, b: number): number;
-export function account_fetchDocument(a: number): number;
-export function account_revokeCredentials(a: number, b: number, c: number, d: number): number;
-export function account_unrevokeCredentials(a: number, b: number, c: number, d: number): number;
-export function account_encryptData(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
-export function account_decryptData(a: number, b: number, c: number, d: number, e: number, f: number): number;
-export function __wbg_didurl_free(a: number): void;
-export function didurl_parse(a: number, b: number, c: number): void;
-export function didurl_did(a: number): number;
-export function didurl_urlStr(a: number, b: number): void;
-export function didurl_fragment(a: number, b: number): void;
-export function didurl_setFragment(a: number, b: number, c: number, d: number): void;
-export function didurl_path(a: number, b: number): void;
-export function didurl_setPath(a: number, b: number, c: number, d: number): void;
-export function didurl_query(a: number, b: number): void;
-export function didurl_setQuery(a: number, b: number, c: number, d: number): void;
-export function didurl_join(a: number, b: number, c: number, d: number): void;
-export function didurl_toString(a: number, b: number): void;
-export function didurl_toJSON(a: number, b: number): void;
-export function didurl_clone(a: number): number;
-export function __wbg_diffmessage_free(a: number): void;
-export function diffmessage_id(a: number): number;
-export function diffmessage_did(a: number): number;
-export function diffmessage_diff(a: number, b: number): void;
-export function diffmessage_messageId(a: number, b: number): void;
-export function diffmessage_setMessageId(a: number, b: number, c: number, d: number): void;
-export function diffmessage_previousMessageId(a: number, b: number): void;
-export function diffmessage_setPreviousMessageId(a: number, b: number, c: number, d: number): void;
-export function diffmessage_proof(a: number): number;
-export function diffmessage_merge(a: number, b: number, c: number): void;
-export function diffmessage_toJSON(a: number, b: number): void;
-export function diffmessage_fromJSON(a: number, b: number): void;
-export function diffmessage_clone(a: number): number;
-export function __wbg_resolver_free(a: number): void;
-export function resolver_new(a: number): void;
-export function resolver_builder(): number;
-export function resolver_getClient(a: number, b: number, c: number): number;
-export function resolver_resolve(a: number, b: number, c: number): void;
-export function resolver_resolveHistory(a: number, b: number, c: number): void;
-export function resolver_resolveDiffHistory(a: number, b: number, c: number): void;
-export function resolver_resolveCredentialIssuer(a: number, b: number, c: number): void;
-export function resolver_resolvePresentationIssuers(a: number, b: number, c: number): void;
-export function resolver_resolvePresentationHolder(a: number, b: number, c: number): void;
-export function resolver_verifyPresentation(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
-export function __wbg_resolverbuilder_free(a: number): void;
-export function resolverbuilder_new(): number;
-export function resolverbuilder_client(a: number, b: number): number;
-export function resolverbuilder_clientConfig(a: number, b: number, c: number): void;
-export function resolverbuilder_build(a: number): number;
-export function __wbg_autosave_free(a: number): void;
-export function autosave_never(): number;
-export function autosave_every(): number;
-export function autosave_batch(a: number): number;
-export function autosave_toJSON(a: number, b: number): void;
-export function autosave_fromJSON(a: number, b: number): void;
-export function __wbg_encrypteddata_free(a: number): void;
-export function encrypteddata_nonce(a: number, b: number): void;
-export function encrypteddata_associatedData(a: number, b: number): void;
-export function encrypteddata_ciphertext(a: number, b: number): void;
-export function encrypteddata_tag(a: number, b: number): void;
-export function encrypteddata_toJSON(a: number, b: number): void;
-export function encrypteddata_fromJSON(a: number, b: number): void;
-export function __wbg_accountbuilder_free(a: number): void;
-export function accountbuilder_new(a: number, b: number): void;
-export function accountbuilder_loadIdentity(a: number, b: number, c: number): void;
-export function accountbuilder_createIdentity(a: number, b: number, c: number): void;
-export function __wbg_did_free(a: number): void;
-export function did_new(a: number, b: number, c: number, d: number, e: number): void;
-export function did_parse(a: number, b: number, c: number): void;
-export function did_network(a: number, b: number): void;
-export function did_network_name(a: number, b: number): void;
-export function did_tag(a: number, b: number): void;
-export function did_join(a: number, b: number, c: number, d: number): void;
-export function did_toUrl(a: number): number;
-export function did_intoUrl(a: number): number;
-export function did_toString(a: number, b: number): void;
-export function did_fromJSON(a: number, b: number): void;
-export function did_toJSON(a: number): number;
-export function did_clone(a: number): number;
-export function __wbg_methodtype_free(a: number): void;
-export function methodtype_Ed25519VerificationKey2018(): number;
-export function methodtype_X25519KeyAgreementKey2019(): number;
-export function methodtype_toJSON(a: number, b: number): void;
-export function methodtype_fromJSON(a: number, b: number): void;
-export function methodtype_toString(a: number, b: number): void;
-export function methodtype_clone(a: number): number;
-export function account_setAlsoKnownAs(a: number, b: number, c: number): void;
-export function __wbg_proofpurpose_free(a: number): void;
-export function proofpurpose_assertionMethod(): number;
-export function proofpurpose_authentication(): number;
-export function proofpurpose_toJSON(a: number, b: number): void;
-export function proofpurpose_fromJSON(a: number, b: number): void;
-export function proofpurpose_clone(a: number): number;
-export function __wbg_documentmetadata_free(a: number): void;
-export function documentmetadata_created(a: number): number;
-export function documentmetadata_updated(a: number): number;
-export function documentmetadata_previous_message_id(a: number, b: number): void;
-export function documentmetadata_clone(a: number): number;
-export function __wbg_verificationmethod_free(a: number): void;
-export function verificationmethod_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
-export function verificationmethod_id(a: number): number;
-export function verificationmethod_controller(a: number): number;
-export function verificationmethod_SetController(a: number, b: number): void;
-export function verificationmethod_type(a: number): number;
-export function verificationmethod_data(a: number): number;
-export function verificationmethod_toJSON(a: number, b: number): void;
-export function verificationmethod_fromJSON(a: number, b: number): void;
-export function verificationmethod_clone(a: number): number;
-export function __wbg_cekalgorithm_free(a: number): void;
-export function cekalgorithm_EcdhEs(a: number): number;
-export function cekalgorithm_EcdhEsA256Kw(a: number): number;
-export function cekalgorithm_toJSON(a: number, b: number): void;
-export function cekalgorithm_fromJSON(a: number, b: number): void;
-export function account_deleteMethod(a: number, b: number, c: number): void;
-export function account_deleteService(a: number, b: number, c: number): void;
-export function account_setController(a: number, b: number, c: number): void;
-export function __wbg_ed25519_free(a: number): void;
-export function ed25519_PRIVATE_KEY_LENGTH(): number;
-export function ed25519_PUBLIC_KEY_LENGTH(): number;
-export function ed25519_SIGNATURE_LENGTH(): number;
-export function ed25519_sign(a: number, b: number, c: number, d: number, e: number): void;
-export function ed25519_verify(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
-export function __wbg_proofoptions_free(a: number): void;
-export function proofoptions_new(a: number, b: number): void;
-export function proofoptions_default(): number;
-export function proofoptions_clone(a: number): number;
-export function __wbg_storagetestsuite_free(a: number): void;
-export function storagetestsuite_didCreateGenerateKeyTest(a: number): number;
-export function storagetestsuite_didCreatePrivateKeyTest(a: number): number;
-export function storagetestsuite_didListTest(a: number): number;
-export function storagetestsuite_didPurgeTest(a: number): number;
-export function storagetestsuite_keyGenerateTest(a: number): number;
-export function storagetestsuite_keyDeleteTest(a: number): number;
-export function storagetestsuite_keyInsertTest(a: number): number;
-export function storagetestsuite_keySignEd25519Test(a: number): number;
-export function storagetestsuite_encryptionTest(a: number, b: number): number;
-export function __wbg_encryptionalgorithm_free(a: number): void;
-export function encryptionalgorithm_A256GCM(): number;
-export function encryptionalgorithm_keyLength(a: number): number;
-export function encryptionalgorithm_toJSON(a: number, b: number): void;
-export function encryptionalgorithm_fromJSON(a: number, b: number): void;
-export function __wbg_proof_free(a: number): void;
-export function proof_type(a: number, b: number): void;
-export function proof_value(a: number, b: number): void;
-export function proof_verificationMethod(a: number, b: number): void;
-export function proof_created(a: number): number;
-export function proof_expires(a: number): number;
-export function proof_challenge(a: number, b: number): void;
-export function proof_domain(a: number, b: number): void;
-export function proof_purpose(a: number): number;
-export function proof_toJSON(a: number, b: number): void;
-export function proof_fromJSON(a: number, b: number): void;
-export function proof_clone(a: number): number;
-export function __wbg_x25519_free(a: number): void;
-export function x25519_PRIVATE_KEY_LENGTH(): number;
-export function x25519_PUBLIC_KEY_LENGTH(): number;
-export function x25519_keyExchange(a: number, b: number, c: number, d: number, e: number): void;
-export function x25519_Ed25519toX25519Private(a: number, b: number, c: number): void;
-export function x25519_Ed25519toX25519Public(a: number, b: number, c: number): void;
-export function __wbg_document_free(a: number): void;
-export function document_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
-export function document_fromVerificationMethod(a: number, b: number): void;
-export function document_isSigningMethodType(a: number): number;
-export function document_id(a: number): number;
-export function document_setController(a: number, b: number, c: number): void;
-export function document_controller(a: number): number;
-export function document_setAlsoKnownAs(a: number, b: number, c: number): void;
-export function document_alsoKnownAs(a: number): number;
-export function document_setPropertyUnchecked(a: number, b: number, c: number, d: number, e: number): void;
-export function document_properties(a: number, b: number): void;
-export function document_service(a: number): number;
-export function document_insertService(a: number, b: number): number;
-export function document_removeService(a: number, b: number): number;
-export function document_methods(a: number): number;
-export function document_insertMethod(a: number, b: number, c: number, d: number): void;
-export function document_removeMethod(a: number, b: number, c: number): void;
-export function document_defaultSigningMethod(a: number, b: number): void;
-export function document_resolveMethod(a: number, b: number, c: number, d: number): void;
-export function document_resolveSigningMethod(a: number, b: number, c: number): void;
-export function document_attachMethodRelationship(a: number, b: number, c: number, d: number): void;
-export function document_detachMethodRelationship(a: number, b: number, c: number, d: number): void;
-export function document_signSelf(a: number, b: number, c: number, d: number): void;
-export function document_signDocument(a: number, b: number, c: number, d: number, e: number): void;
-export function document_signCredential(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
-export function document_signPresentation(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
-export function document_signData(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
-export function document_verifyData(a: number, b: number, c: number, d: number): void;
-export function document_verifyDocument(a: number, b: number, c: number): void;
-export function document_verifyRootDocument(a: number, b: number): void;
-export function document_diff(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
-export function document_verifyDiff(a: number, b: number, c: number): void;
-export function document_mergeDiff(a: number, b: number, c: number): void;
-export function document_integrationIndex(a: number, b: number): void;
-export function document_diffIndex(a: number, b: number, c: number): void;
-export function document_metadata(a: number): number;
-export function document_metadataCreated(a: number): number;
-export function document_setMetadataCreated(a: number, b: number, c: number): void;
-export function document_metadataUpdated(a: number): number;
-export function document_setMetadataUpdated(a: number, b: number, c: number): void;
-export function document_metadataPreviousMessageId(a: number, b: number): void;
-export function document_setMetadataPreviousMessageId(a: number, b: number, c: number, d: number): void;
-export function document_proof(a: number): number;
-export function document_revokeCredentials(a: number, b: number, c: number, d: number, e: number): void;
-export function document_unrevokeCredentials(a: number, b: number, c: number, d: number, e: number): void;
-export function document_toJSON(a: number, b: number): void;
-export function document_fromJSON(a: number, b: number): void;
-export function document_clone(a: number): number;
-export function __wbg_methodscope_free(a: number): void;
-export function methodscope_VerificationMethod(): number;
-export function methodscope_Authentication(): number;
-export function methodscope_AssertionMethod(): number;
-export function methodscope_KeyAgreement(): number;
-export function methodscope_CapabilityDelegation(): number;
-export function methodscope_CapabilityInvocation(): number;
-export function methodscope_toString(a: number, b: number): void;
-export function methodscope_toJSON(a: number, b: number): void;
-export function methodscope_fromJSON(a: number, b: number): void;
-export function methodscope_clone(a: number): number;
-export function __wbg_credential_free(a: number): void;
-export function credential_BaseContext(a: number): void;
-export function credential_BaseType(a: number): void;
-export function credential_new(a: number, b: number): void;
-export function credential_context(a: number, b: number): void;
-export function credential_id(a: number, b: number): void;
-export function credential_type(a: number): number;
-export function credential_credentialSubject(a: number, b: number): void;
-export function credential_issuer(a: number, b: number): void;
-export function credential_issuanceDate(a: number): number;
-export function credential_expirationDate(a: number): number;
-export function credential_credentialStatus(a: number, b: number): void;
-export function credential_credentialSchema(a: number, b: number): void;
-export function credential_refreshService(a: number, b: number): void;
-export function credential_termsOfUse(a: number, b: number): void;
-export function credential_evidence(a: number, b: number): void;
-export function credential_nonTransferable(a: number): number;
-export function credential_proof(a: number): number;
-export function credential_properties(a: number, b: number): void;
-export function credential_toJSON(a: number, b: number): void;
-export function credential_fromJSON(a: number, b: number): void;
-export function credential_clone(a: number): number;
-export function __wbg_resolveddocument_free(a: number): void;
-export function resolveddocument_mergeDiffMessage(a: number, b: number, c: number): void;
-export function resolveddocument_document(a: number): number;
-export function resolveddocument_intoDocument(a: number): number;
-export function resolveddocument_diffMessageId(a: number, b: number): void;
-export function resolveddocument_setDiffMessageId(a: number, b: number, c: number, d: number): void;
-export function resolveddocument_integrationMessageId(a: number, b: number): void;
-export function resolveddocument_setIntegrationMessageId(a: number, b: number, c: number, d: number): void;
-export function resolveddocument_toJSON(a: number, b: number): void;
-export function resolveddocument_fromJSON(a: number, b: number): void;
-export function resolveddocument_clone(a: number): number;
-export function __wbg_client_free(a: number): void;
-export function client_new(a: number): void;
-export function client_fromConfig(a: number, b: number): void;
-export function client_network(a: number): number;
-export function client_publishDocument(a: number, b: number, c: number): void;
-export function client_publishDiff(a: number, b: number, c: number, d: number, e: number): void;
-export function client_publishJSON(a: number, b: number, c: number, d: number, e: number): void;
-export function client_publishJsonWithRetry(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
-export function client_isMessageIncluded(a: number, b: number, c: number, d: number): void;
-export function client_resolve(a: number, b: number, c: number): void;
-export function client_resolveHistory(a: number, b: number, c: number): void;
-export function client_resolveDiffHistory(a: number, b: number, c: number): void;
-export function __wbg_signature_free(a: number): void;
-export function signature_new(a: number, b: number): number;
-export function signature_asBytes(a: number, b: number): void;
-export function signature_toJSON(a: number, b: number): void;
-export function signature_fromJSON(a: number, b: number): void;
-export function __wbg_credentialvalidationoptions_free(a: number): void;
-export function credentialvalidationoptions_new(a: number, b: number): void;
-export function credentialvalidationoptions_default(): number;
-export function credentialvalidationoptions_toJSON(a: number, b: number): void;
-export function credentialvalidationoptions_fromJSON(a: number, b: number): void;
-export function credentialvalidationoptions_clone(a: number): number;
-export function __wbg_presentationvalidationoptions_free(a: number): void;
-export function presentationvalidationoptions_new(a: number, b: number): void;
-export function presentationvalidationoptions_default(): number;
-export function presentationvalidationoptions_toJSON(a: number, b: number): void;
-export function presentationvalidationoptions_fromJSON(a: number, b: number): void;
-export function presentationvalidationoptions_clone(a: number): number;
-export function __wbg_service_free(a: number): void;
-export function service_new(a: number, b: number): void;
-export function service_id(a: number): number;
-export function service_type(a: number, b: number): void;
-export function service_serviceEndpoint(a: number): number;
-export function service_properties(a: number, b: number): void;
-export function service_toJSON(a: number, b: number): void;
-export function service_fromJSON(a: number, b: number): void;
-export function service_clone(a: number): number;
-export function __wbg_revocationbitmap_free(a: number): void;
-export function revocationbitmap_new(): number;
-export function revocationbitmap_type(a: number): void;
-export function revocationbitmap_isRevoked(a: number, b: number): number;
-export function revocationbitmap_revoke(a: number, b: number): number;
-export function revocationbitmap_unrevoke(a: number, b: number): number;
-export function revocationbitmap_len(a: number, b: number): void;
-export function revocationbitmap_toEndpoint(a: number, b: number): void;
-export function revocationbitmap_fromEndpoint(a: number, b: number): void;
-export function __wbg_receipt_free(a: number): void;
-export function receipt_network(a: number): number;
-export function receipt_messageId(a: number, b: number): void;
-export function receipt_networkId(a: number, b: number): void;
-export function receipt_nonce(a: number, b: number): void;
-export function receipt_toJSON(a: number, b: number): void;
-export function receipt_fromJSON(a: number, b: number): void;
-export function receipt_clone(a: number): number;
-export function __wbg_keylocation_free(a: number): void;
-export function keylocation_new(a: number, b: number, c: number, d: number, e: number): number;
-export function keylocation_fromVerificationMethod(a: number, b: number): void;
-export function keylocation_canonical(a: number, b: number): void;
-export function keylocation_keyType(a: number): number;
-export function keylocation_toJSON(a: number, b: number): void;
-export function keylocation_fromJSON(a: number, b: number): void;
-export function keylocation_toString(a: number, b: number): void;
-export function account_createService(a: number, b: number, c: number): void;
-export function __wbg_presentationvalidator_free(a: number): void;
-export function presentationvalidator_validate(a: number, b: number, c: number, d: number, e: number, f: number): void;
-export function presentationvalidator_verifyPresentationSignature(a: number, b: number, c: number, d: number): void;
-export function presentationvalidator_checkStructure(a: number, b: number): void;
-export function __wbg_agreementinfo_free(a: number): void;
-export function agreementinfo_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
-export function agreementinfo_apu(a: number, b: number): void;
-export function agreementinfo_apv(a: number, b: number): void;
-export function agreementinfo_pubInfo(a: number, b: number): void;
-export function agreementinfo_privInfo(a: number, b: number): void;
-export function agreementinfo_toJSON(a: number, b: number): void;
-export function agreementinfo_fromJSON(a: number, b: number): void;
-export function __wbg_presentation_free(a: number): void;
-export function presentation_BaseContext(a: number): void;
-export function presentation_BaseType(a: number): void;
-export function presentation_new(a: number, b: number): void;
-export function presentation_context(a: number, b: number): void;
-export function presentation_id(a: number, b: number): void;
-export function presentation_type(a: number): number;
-export function presentation_verifiableCredential(a: number): number;
-export function presentation_holder(a: number, b: number): void;
-export function presentation_refreshService(a: number, b: number): void;
-export function presentation_termsOfUse(a: number, b: number): void;
-export function presentation_proof(a: number): number;
-export function presentation_properties(a: number, b: number): void;
-export function presentation_toJSON(a: number, b: number): void;
-export function presentation_fromJSON(a: number, b: number): void;
-export function presentation_clone(a: number): number;
-export function __wbg_explorerurl_free(a: number): void;
-export function explorerurl_parse(a: number, b: number, c: number): void;
-export function explorerurl_mainnet(): number;
-export function explorerurl_devnet(): number;
-export function explorerurl_messageUrl(a: number, b: number, c: number, d: number): void;
-export function explorerurl_resolverUrl(a: number, b: number, c: number): void;
-export function explorerurl_toString(a: number, b: number): void;
-export function __wbg_network_free(a: number): void;
-export function network_tryFromName(a: number, b: number, c: number): void;
-export function network_mainnet(): number;
-export function network_devnet(): number;
-export function network_name(a: number, b: number): void;
-export function network_defaultNodeURL(a: number, b: number): void;
-export function network_toString(a: number, b: number): void;
-export function network_toJSON(a: number, b: number): void;
-export function network_fromJSON(a: number, b: number): void;
-export function network_clone(a: number): number;
-export function start(): void;
-export function BrotliDecoderCreateInstance(a: number, b: number, c: number): number;
-export function BrotliDecoderSetParameter(a: number, b: number, c: number): void;
-export function BrotliDecoderDecompressPrealloc(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
-export function BrotliDecoderDecompressWithReturnInfo(a: number, b: number, c: number, d: number, e: number): void;
-export function BrotliDecoderDecompress(a: number, b: number, c: number, d: number): number;
-export function BrotliDecoderDecompressStream(a: number, b: number, c: number, d: number, e: number, f: number): number;
-export function BrotliDecoderDecompressStreaming(a: number, b: number, c: number, d: number, e: number): number;
-export function BrotliDecoderMallocU8(a: number, b: number): number;
-export function BrotliDecoderFreeU8(a: number, b: number, c: number): void;
-export function BrotliDecoderMallocUsize(a: number, b: number): number;
-export function BrotliDecoderFreeUsize(a: number, b: number, c: number): void;
-export function BrotliDecoderDestroyInstance(a: number): void;
-export function BrotliDecoderHasMoreOutput(a: number): number;
-export function BrotliDecoderTakeOutput(a: number, b: number): number;
-export function BrotliDecoderIsUsed(a: number): number;
-export function BrotliDecoderIsFinished(a: number): number;
-export function BrotliDecoderGetErrorCode(a: number): number;
-export function BrotliDecoderGetErrorString(a: number): number;
-export function BrotliDecoderErrorString(a: number): number;
-export function BrotliDecoderVersion(): number;
-export function __wbindgen_malloc(a: number): number;
-export function __wbindgen_realloc(a: number, b: number, c: number): number;
-export const __wbindgen_export_2: WebAssembly.Table;
-export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hdcd0b8367bd8bfe2(a: number, b: number, c: number): void;
-export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4fe003293c171f86(a: number, b: number): void;
-export function __wbindgen_add_to_stack_pointer(a: number): number;
-export function __wbindgen_free(a: number, b: number): void;
-export function __wbindgen_exn_store(a: number): void;
-export function wasm_bindgen__convert__closures__invoke2_mut__hd12e749677640a32(a: number, b: number, c: number, d: number): void;
-export function __wbindgen_start(): void;
diff --git a/node_modules/@iota/identity-wasm/web/package.json b/node_modules/@iota/identity-wasm/web/package.json
deleted file mode 100644
index 7c3d3c1..0000000
--- a/node_modules/@iota/identity-wasm/web/package.json
+++ /dev/null
@@ -1,13 +0,0 @@
-{
-  "name": "@iota/identity-wasm",
-  "description": "WASM bindings for IOTA Identity - A Self Sovereign Identity Framework implementing the DID and VC standards from W3C. To be used in Javascript/Typescript",
-  "version": "0.6.0",
-  "license": "Apache-2.0",
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/iotaledger/identity.rs.git"
-  },
-  "module": "identity_wasm.js",
-  "homepage": "https://www.iota.org",
-  "types": "identity_wasm.d.ts"
-}
\ No newline at end of file
